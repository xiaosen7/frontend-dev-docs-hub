{"version":3,"mappings":"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","names":["OperatorDecisionTreeDataService","constructor","http","getDecisionTree$","this","get","i0","factory","tree","error","OperatorDecisionTreeService","dataService","previousBranchIds","currentBranchId","BehaviorSubject","initialState","pipe","catchError","of","configOrBufferSize","windowTime","scheduler","bufferSize","refCount","Infinity","share","connector","ReplaySubject","resetOnError","resetOnComplete","resetOnRefCountZero","shareReplay","combineLatest","tree$","state$","filter","treeIsErrorFree","map","includes","length","isInitialDecision","entityId","label","join","trim","state","options","node","nodeHasOptions","option","initial","mapTo","snapShot","getValue","selectOption","optionId","next","back","previousOptionId","slice","startOver","ctx_r5","ctx_r7","ctx_r12","oxw","OperatorDecisionTreeComponent","operatorDecisionTreeService","scrollService","currentSentence$","options$","isBeyondInitialQuestion$","hasError$","scrollToTop","ngOnDestroy","selectors","trigger","style","transform","transition","animate","OperatorDecisionTreeModule","ScrollService","imports","CommonModule","MatButtonModule","MatCardModule","MatRippleModule"],"sources":["./src/app/custom-elements/operator-decision-tree/operator-decision-tree-data.service.ts","./src/app/custom-elements/operator-decision-tree/utils.ts","./src/app/custom-elements/operator-decision-tree/operator-decision-tree.service.ts","./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js","./src/app/custom-elements/operator-decision-tree/operator-decision-tree.component.ts","./src/app/custom-elements/operator-decision-tree/operator-decision-tree.module.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OperatorDecisionTree } from './interfaces';\n\n@Injectable()\nexport class OperatorDecisionTreeDataService {\n  constructor(private http: HttpClient) {}\n\n  getDecisionTree$(): Observable<OperatorDecisionTree> {\n    return this.http.get<OperatorDecisionTree>(\n      '/generated/docs/app/decision-tree-data.json'\n    );\n  }\n}\n","import { OperatorTreeNodeWithOptions } from './interfaces';\n\nexport function isInitialDecision(previousBranchIds: string[]): boolean {\n  return (\n    previousBranchIds.includes('initial') && previousBranchIds.length === 1\n  );\n}\n\nexport function treeIsErrorFree(tree): boolean {\n  return !tree.error;\n}\n\nexport function nodeHasOptions(node): node is OperatorTreeNodeWithOptions {\n  return !!node.options;\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { catchError, filter, map, mapTo, shareReplay } from 'rxjs/operators';\nimport { OperatorDecisionTree, OperatorTreeNode, State } from './interfaces';\nimport { OperatorDecisionTreeDataService } from './operator-decision-tree-data.service';\nimport { isInitialDecision, nodeHasOptions, treeIsErrorFree } from './utils';\n\n@Injectable()\nexport class OperatorDecisionTreeService {\n  private initialState: State = {\n    previousBranchIds: ['initial'],\n    currentBranchId: 'initial'\n  };\n  private state$ = new BehaviorSubject<State>(this.initialState);\n  private tree$: Observable<\n    OperatorDecisionTree\n  > = this.dataService.getDecisionTree$().pipe(\n    catchError(error => of(error)), // This helps if the JSON for some reason fails to get fetched\n    shareReplay()\n  );\n\n  currentSentence$: Observable<string> = combineLatest(\n    this.tree$,\n    this.state$\n  ).pipe(\n    filter(([tree]) => treeIsErrorFree(tree)),\n    map(([tree, { previousBranchIds }]) =>\n        isInitialDecision(previousBranchIds)\n            ? '从下表中选择一个选项，以开始决策'\n            : `${previousBranchIds\n                .map(entityId => {\n                  return tree[entityId].label;\n                })\n                .join(' ')}...`.trim()\n    )\n  );\n\n  options$: Observable<(OperatorTreeNode)[]> = combineLatest(\n    this.tree$,\n    this.state$\n  ).pipe(\n    filter(([tree, state]) => {\n      return (\n        treeIsErrorFree(tree) &&\n        !!tree[state.currentBranchId] &&\n        !!tree[state.currentBranchId].options\n      );\n    }),\n    map(([tree, state]) => {\n      // Project is currently using TypeScript 2.9.2\n      // With TS 3.1+ this can be done better if we map to [tree, node] and typeguard with a tuple in a filter\n      // filter((a): a is [OperatorDecisionTree, OperatorTreeNodeWithOptions] => !a[0].error && !!a[1].options)\n      const node = tree[state.currentBranchId];\n      return nodeHasOptions(node)\n        ? node.options.map(option => tree[option])\n        : tree['initial'].options.map(option => tree[option]);\n    })\n  );\n\n  isBeyondInitialQuestion$: Observable<boolean> = this.state$.pipe(\n    map(({ currentBranchId }) => currentBranchId !== 'initial')\n  );\n\n  // This helps if the JSON for some reason fails to get fetched\n  hasError$ = this.tree$.pipe(\n    filter(tree => !!tree.error),\n    mapTo(true)\n  );\n\n  constructor(private dataService: OperatorDecisionTreeDataService) {}\n\n  private get snapShot(): State {\n    return this.state$.getValue();\n  }\n\n  selectOption(optionId: string): void {\n    this.state$.next({\n      previousBranchIds: [...this.snapShot.previousBranchIds, optionId],\n      currentBranchId: optionId\n    });\n  }\n\n  back(): void {\n    const previousOptionId = this.snapShot.previousBranchIds[\n      this.snapShot.previousBranchIds.length - 2\n    ];\n\n    if (previousOptionId) {\n      this.state$.next({\n        previousBranchIds: [\n          ...this.snapShot.previousBranchIds.slice(\n            0,\n            this.snapShot.previousBranchIds.length - 1\n          )\n        ],\n        currentBranchId: previousOptionId\n      });\n    }\n  }\n\n  startOver(): void {\n    this.state$.next(this.initialState);\n  }\n}\n","import { ReplaySubject } from '../ReplaySubject';\nimport { share } from './share';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let bufferSize;\n    let refCount = false;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        ({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\n    }\n    else {\n        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);\n    }\n    return share({\n        connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\n        resetOnError: true,\n        resetOnComplete: false,\n        resetOnRefCountZero: refCount,\n    });\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, OnDestroy } from '@angular/core';\nimport { ScrollService } from 'app/shared/scroll.service';\nimport { Observable } from 'rxjs';\nimport { OperatorTreeNode } from './interfaces';\nimport { OperatorDecisionTreeService } from './operator-decision-tree.service';\n\n@Component({\n  selector: 'aio-operator-decision-tree',\n  template: `\n    <h1 class=\"mat-heading\" tabindex=\"0\" translation-result=\"on\">操作符决策树</h1>\n    <h1 class=\"mat-heading\" tabindex=\"0\" translation-origin=\"off\">Operator Decision Tree</h1>\n    <ng-container *ngIf=\"!(hasError$ | async); else hasErrorTemplate\">\n      <h2 class=\"mat-subheading-2\" tabindex=\"0\">\n        {{ currentSentence$ | async }}\n      </h2>\n      <ng-container *ngIf=\"isBeyondInitialQuestion$ | async\">\n        <section>\n          <button (click)=\"back()\" mat-button class=\"back\">后退</button>\n          <button (click)=\"startOver()\" mat-button color=\"warn\" class=\"start-over\">重新开始</button>\n        </section>\n      </ng-container>\n      <div>\n        <ng-container *ngFor=\"let option of options$ | async\">\n          <ng-container *ngIf=\"option.options; else operatorTemplate\">\n            <button class=\"option mat-body-1\" (click)=\"selectOption(option.id)\" [@flyIn]>\n              <mat-card matRipple>\n                {{ option.label }}\n              </mat-card>\n            </button>\n          </ng-container>\n          <ng-template #operatorTemplate>\n            <p *ngIf=\"option.method\" class=\"mat-body-1\">\n              You want the {{ option.method }} of the {{ option.docType }}\n              <a href=\"{{ option.path }}#{{ option.method }}\">{{ option.label }}</a\n              >.\n            </p>\n            <p *ngIf=\"!option.method\" class=\"mat-body-1\">\n              You want the {{ option.docType }} <a href=\"{{ option.path }}\">{{ option.label }}</a\n              >.\n            </p>\n          </ng-template>\n        </ng-container>\n      </div>\n    </ng-container>\n\n    <ng-template #hasErrorTemplate>\n      <div class=\"mat-body-1 error\">\n        <p>Oops! There was an issue loading the decision tree.. we're real sorry about that. Please try reloading the page.</p>\n        <p>\n          You can also try\n          <a href=\"https://github.com/ReactiveX/rxjs/issues/new?template=documentation.md\" target=\"_blank\">submitting an issue on GitHub</a\n          >.\n        </p>\n      </div>\n    </ng-template>\n  `,\n  styleUrls: ['./operator-decision-tree.component.scss'],\n  animations: [\n    trigger('flyIn', [\n      state('in', style({ transform: 'translateX(0)' })),\n      transition(':enter', [style({ transform: 'translateX(-100%)' }), animate(250)]),\n    ]),\n  ],\n})\nexport class OperatorDecisionTreeComponent implements OnDestroy {\n  currentSentence$: Observable<string> = this.operatorDecisionTreeService.currentSentence$;\n  options$: Observable<OperatorTreeNode[]> = this.operatorDecisionTreeService.options$;\n  isBeyondInitialQuestion$: Observable<boolean> = this.operatorDecisionTreeService.isBeyondInitialQuestion$;\n  hasError$: Observable<boolean> = this.operatorDecisionTreeService.hasError$;\n\n  constructor(private operatorDecisionTreeService: OperatorDecisionTreeService, private scrollService: ScrollService) {}\n\n  selectOption(optionId: string): void {\n    this.operatorDecisionTreeService.selectOption(optionId);\n    this.scrollService.scrollToTop();\n  }\n\n  back(): void {\n    this.operatorDecisionTreeService.back();\n  }\n\n  startOver(): void {\n    this.operatorDecisionTreeService.startOver();\n  }\n\n  ngOnDestroy(): void {\n    this.startOver();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatRippleModule } from '@angular/material/core';\nimport { ScrollService } from 'app/shared/scroll.service';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { DocTypeNamePipe } from './doc-type-name.pipe';\nimport { OperatorDecisionTreeDataService } from './operator-decision-tree-data.service';\nimport { OperatorDecisionTreeComponent } from './operator-decision-tree.component';\nimport { OperatorDecisionTreeService } from './operator-decision-tree.service';\n\n@NgModule({\n  imports: [CommonModule, MatButtonModule, MatCardModule, MatRippleModule],\n  declarations: [\n    DocTypeNamePipe,\n    OperatorDecisionTreeComponent,\n  ],\n  providers: [\n    OperatorDecisionTreeDataService,\n    OperatorDecisionTreeService,\n    ScrollService,\n  ],\n})\nexport class OperatorDecisionTreeModule implements WithCustomElementComponent {\n  customElementComponent: Type<OperatorDecisionTreeComponent> = OperatorDecisionTreeComponent;\n}\n"],"sourceRoot":"webpack:///","file":"722.07e68783c8c1d8ef.js"}