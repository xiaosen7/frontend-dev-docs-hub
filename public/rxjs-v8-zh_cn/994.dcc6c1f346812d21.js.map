{"version":3,"mappings":"8LASA,MAAMA,EAAgBC,KAAqB,iBAGpC,IAAMC,EAAb,MAAM,QAGJC,YAAoBC,eAClBC,KAAKC,WAAaD,KAAKE,gBAGjBA,gBAEN,MAAMD,EAAaD,KAAKD,KAAKI,IAASR,GAAeS,QACnDC,KAAIC,GAUV,WAAsBC,GACpB,OAAOC,OAAOC,KAAKF,GAAcF,IAAIK,IACnC,MAAMC,EAAMJ,EAAaG,GACzB,MAAO,CACLE,GAAIC,EAAOH,GACXI,MAAOJ,EACPK,MAAOJ,EAAII,MACXC,cAAeC,EAAgBN,EAAIK,cAAeN,MAGrDQ,KAAKC,GApBUC,CAAad,OACzBe,QAGDpB,SAAiDqB,UAC3CrB,gDAfEJ,GAAe0B,wCAAf1B,EAAe2B,QAAf3B,EAAe,YAAfA,GAAb,GAkCA,WAAyB4B,EAAsBf,GAC7C,OAAOF,OAAOC,KAAKgB,GAAiBpB,IAAIqB,IACpC,MAAMC,EAAMF,EAAgBC,GAC5B,MAAO,CACLd,GAAIC,EAAOa,GACXZ,MAAOY,EACPX,MAAOY,EAAIZ,MACXa,UAAWC,EAAYF,EAAIC,UAAWF,EAAQhB,MAGnDQ,KAAKC,GAIR,WAAqBW,EAAmBJ,EAAgBhB,GACtD,OAAOF,OAAOC,KAAKqB,GAAczB,IAAI0B,IACnC,MAAMC,EAAMF,EAAaC,GACzBC,SAAIC,SAAWvB,EACfsB,EAAIE,YAAcR,EAClBM,EAAIpB,GAAKC,EAAOkB,GACTC,IAERd,KAAKiB,GAGR,WAAqBC,EAA2BC,GAC9C,OAAOD,EAAErB,QAAUsB,EAAEtB,MAAQoB,EAAcC,EAAGC,GAAKD,EAAErB,MAAQsB,EAAEtB,MAAQ,GAAI,EAG7E,WAAuBqB,EAAoBC,GAC1C,OAAOD,EAAEtB,MAAMwB,cAAgBD,EAAEvB,MAAMwB,cAAgB,GAAI,EAG5D,WAAgBxB,GACd,OAAOA,EAAMyB,cAAcC,QAAQ,OAAQ,8BCzD7BjB,kBAA6C,SAA7CA,CAA6C,QAA7CA,CAA6C,QAGnCA,SAAoBA,QACxBA,gBAAgCA,SAAuCA,8CAHfA,mCAEpDA,wBAC4BA,mEALxCA,eACEA,uBAQFA,kCAR2BA,uDAL7BA,eACEA,eACAA,gBAA8BA,SAAuBA,QAErDA,uBAUFA,kCAb6BA,0BACGA,wBAEJA,gEAXhCA,iBAA0D,cAEtDA,eACAA,cAAIA,SAAoBA,UAG1BA,iBACEA,uBAeFA,oCApB6BA,0BACvBA,wBAIyBA,2CAqBlC,IAAMkB,EAAb,MAAM,QAKJ3C,YAAY4C,EAAoCC,0BAFhD3C,eAAY,EAGVA,KAAK0C,SAAWA,EAASE,SAASJ,QAAQ,OAAQ,IAGpDK,KAAKlC,GACH,OAAOX,KAAK0C,SAAW,IAAM/B,EAAIC,GAGnCkC,WAGE9C,KAAK2C,gBAAgB1C,WAAW8C,UAAWC,GAAUhD,KAAKC,WAAa+C,GAIzEC,SAASC,GACPlD,KAAKmD,UAAYD,IAASA,EAAOE,WAAaF,EAAOG,KAAKD,YAAa,gDArB9DX,GAAqBlB,+CAArBkB,EAAqBa,oGAArBC,uBAAuB,waA9BhChC,iBAAiC,WAE7BA,uBAwBFA,iBAxB6CA,kFA4BtCkB,GAAb,GC5Bae,EAAb,MAAM,QALN1D,cAMEE,4BAAoCyC,gDADzBe,6DAFA,CAAE3D,GAAiB4D,SAFrB,CAAEC,SAIAF,GAAb","names":["resourcesPath","CONTENT_URL_PREFIX","ResourceService","constructor","http","this","categories","getCategories","get","pipe","map","data","categoryJson","Object","keys","catKey","cat","id","makeId","title","order","subCategories","mkSubCategories","sort","compareCats","mkCategories","publishLast","connect","i0","factory","subCategoryJson","subKey","sub","resources","mkResources","resourceJson","resKey","res","category","subCategory","compareTitles","l","r","toUpperCase","toLowerCase","replace","ResourceListComponent","location","resourceService","pathname","href","ngOnInit","subscribe","cats","onScroll","target","scrollPos","scrollTop","body","selectors","ctx","ResourceListModule","imports","CommonModule"],"sources":["./src/app/custom-elements/resource/resource.service.ts","./src/app/custom-elements/resource/resource-list.component.ts","./src/app/custom-elements/resource/resource-list.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ConnectableObservable, Observable } from 'rxjs';\nimport { map, publishLast } from 'rxjs/operators';\n\nimport { Category, Resource, SubCategory } from './resource.model';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\nconst resourcesPath = CONTENT_URL_PREFIX + 'resources.json';\n\n@Injectable()\nexport class ResourceService {\n  categories: Observable<Category[]>;\n\n  constructor(private http: HttpClient) {\n    this.categories = this.getCategories();\n  }\n\n  private getCategories(): Observable<Category[]> {\n\n    const categories = this.http.get<any>(resourcesPath).pipe(\n      map(data => mkCategories(data)),\n      publishLast(),\n    );\n\n    (categories as ConnectableObservable<Category[]>).connect();\n    return categories;\n  };\n}\n\n// Extract sorted Category[] from resource JSON data\nfunction mkCategories(categoryJson: any): Category[] {\n  return Object.keys(categoryJson).map(catKey => {\n    const cat = categoryJson[catKey];\n    return {\n      id: makeId(catKey),\n      title: catKey,\n      order: cat.order,\n      subCategories: mkSubCategories(cat.subCategories, catKey)\n    } as Category;\n  })\n  .sort(compareCats);\n}\n\n// Extract sorted SubCategory[] from JSON category data\nfunction mkSubCategories(subCategoryJson: any, catKey: string): SubCategory[] {\n  return Object.keys(subCategoryJson).map(subKey => {\n      const sub = subCategoryJson[subKey];\n      return {\n        id: makeId(subKey),\n        title: subKey,\n        order: sub.order,\n        resources: mkResources(sub.resources, subKey, catKey)\n      } as SubCategory;\n  })\n  .sort(compareCats);\n}\n\n// Extract sorted Resource[] from JSON subcategory data\nfunction mkResources(resourceJson: any, subKey: string, catKey: string): Resource[] {\n  return Object.keys(resourceJson).map(resKey => {\n    const res = resourceJson[resKey];\n    res.category = catKey;\n    res.subCategory = subKey;\n    res.id = makeId(resKey);\n    return res as Resource;\n  })\n  .sort(compareTitles);\n}\n\nfunction compareCats(l: Category | SubCategory, r: Category | SubCategory) {\n  return l.order === r.order ? compareTitles(l, r) : l.order > r.order ? 1 : -1;\n}\n\nfunction compareTitles(l: {title: string}, r: {title: string}) {\n return l.title.toUpperCase() > r.title.toUpperCase() ? 1 : -1;\n}\n\nfunction makeId(title: string) {\n  return title.toLowerCase().replace(/\\s+/g, '-');\n}\n","import { Component, HostListener, OnInit } from '@angular/core';\nimport { PlatformLocation } from '@angular/common';\n\nimport { Category } from './resource.model';\nimport { ResourceService } from './resource.service';\n\n@Component({\n  selector: 'aio-resource-list',\n  template: `\n    <div class=\"resources-container\">\n      <div class=\"l-flex--column\">\n        <div class=\"showcase\" *ngFor=\"let category of categories\">\n          <header class=\"c-resource-header\">\n            <a class=\"h-anchor-offset\" id=\"{{ category.id }}\"></a>\n            <h2>{{ category.title }}</h2>\n          </header>\n\n          <div class=\"shadow-1\">\n            <div *ngFor=\"let subCategory of category.subCategories\">\n              <a class=\"h-anchor-offset\" id=\"{{ subCategory.id }}\"></a>\n              <h3 class=\"subcategory-title\">{{ subCategory.title }}</h3>\n\n              <div *ngFor=\"let resource of subCategory.resources\">\n                <div class=\"c-resource\" *ngIf=\"resource.rev\">\n                  <a class=\"l-flex--column resource-row-link\" target=\"_blank\" [href]=\"resource.url\">\n                    <div>\n                      <h4>{{ resource.title }}</h4>\n                      <p class=\"resource-description\">{{ resource.desc || 'No Description' }}</p>\n                    </div>\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n})\nexport class ResourceListComponent implements OnInit {\n  categories: Category[];\n  location: string;\n  scrollPos = 0;\n\n  constructor(location: PlatformLocation, private resourceService: ResourceService) {\n    this.location = location.pathname.replace(/^\\/+/, '');\n  }\n\n  href(cat: { id: string }) {\n    return this.location + '#' + cat.id;\n  }\n\n  ngOnInit() {\n    // Not using async pipe because cats appear twice in template\n    // No need to unsubscribe because categories observable completes.\n    this.resourceService.categories.subscribe((cats) => (this.categories = cats));\n  }\n\n  @HostListener('window:scroll', ['$event.target'])\n  onScroll(target: any) {\n    this.scrollPos = target ? target.scrollTop || target.body.scrollTop || 0 : 0;\n  }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResourceListComponent } from './resource-list.component';\nimport { ResourceService } from './resource.service';\nimport { WithCustomElementComponent } from '../element-registry';\n\n@NgModule({\n  imports: [ CommonModule ],\n  declarations: [ ResourceListComponent ],\n  providers: [ ResourceService ]\n})\nexport class ResourceListModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = ResourceListComponent;\n}\n"],"sourceRoot":"webpack:///","file":"994.dcc6c1f346812d21.js"}