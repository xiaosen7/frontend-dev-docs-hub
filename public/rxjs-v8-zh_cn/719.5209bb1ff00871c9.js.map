{"version":3,"mappings":"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","names":["e","t","clickToLoad","r","devToolsHeight","i","forceEmbedLayout","hideDevTools","hideExplorer","hideNavigation","showSidebar","openFile","Array","isArray","filter","trim","map","encodeURIComponent","join","terminalHeight","theme","o","view","Math","round","n","includes","origin","u","Object","entries","hasOwnProperty","Boolean","length","document","createElement","type","name","value","b","template","console","warn","method","setAttribute","appendChild","g","title","description","dependencies","JSON","stringify","settings","keys","files","forEach","w","action","d","target","newWindow","p","body","submit","removeChild","StackblitzService","openProject","config","codeExtension","ts","typescript","language","StackBlitzkSDK","html","code","tags","compile","trigger","clearConsole","factory","i0","ctx_r3","ctx_r5","CodeComponent","constructor","snackbar","pretty","copier","logger","stackblitz","this","EventEmitter","_code","formatDisplayedCode","showMissingCodeMessage","header","_header","ariaLabelCopy","ariaLabelEdit","ngOnChanges","leftAlignedCode","text","indent","Number","MAX_VALUE","lines","split","line","lineIndent","search","min","substr","leftAlign","setCodeHtml","codeText","getCodeText","formatCode","l","_a","getLinenums","pipe","tap","codeFormatted","emit","subscribe","c","err","src","path","region","formattedCode","codeContainer","nativeElement","innerHTML","textContent","getHtmlFromCode","pattern","RegExp","matches","match","doCopy","copyText","log","open","duration","error","Error","editInStackBlitz","rxjs","version","linenums","parseInt","isNaN","selectors","CodeModule","PrettyPrinter","CopierService","imports","CommonModule","MatSnackBarModule","prettyPrintOne","fromPromise","getPrettyPrintOne","share","ppo","window","Promise","resolve","_","then","msg","message","first","createFake","isRTL","documentElement","getAttribute","fakeElem","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","select","setSelectionRange","removeFake","execCommand","module","scrollBehaviorSupported","supportsScrollBehavior","_viewportRuler","_previousHTMLStyles","left","_isEnabled","_document","attach","enable","_canBeEnabled","root","_previousScrollPosition","getViewportScrollPosition","coerceCssPixelValue","classList","add","disable","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","abs","updatePosition","unsubscribe","element","scrollContainers","some","containerBounds","bottom","right","scrollContainerRect","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","isElementScrolledOutsideView","ScrollStrategyOptions","noop","NoopScrollStrategy","close","CloseScrollStrategy","block","BlockScrollStrategy","reposition","RepositionScrollStrategy","ɵfac","i1","DOCUMENT","ɵprov","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","key","undefined","connectionPair","scrollableViewProperties","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","event","next","_backdropTransitionendHandler","_disposeBackdrop","_keydownEvents","_outsidePointerEvents","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","portal","parentElement","_previousHostParent","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","keydownEvents","outsidePointerEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","assign","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","addEventListener","requestAnimationFrame","runOutsideAngular","nextSibling","parentNode","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","coerceArray","subscription","takeUntil","merge","children","backdrop","removeEventListener","clearTimeout","OverlayContainer","_platform","ngOnDestroy","_containerElement","getContainerElement","_createContainer","containerClass","isBrowser","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","container","i1$1","boundingBoxClass","cssUnitPattern","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","push","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","indexOf","withViewportMargin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","y","originX","startX","_isRtl","endX","originY","overlayStartX","overlayStartY","overlayX","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","ConnectedOverlayPositionChange","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isElementClippedByScrolling","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","cssClass","ElementRef","Element","destination","source","input","units","parseFloat","clientRect","floor","wrapperClass","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","m","parent","OverlayPositionBuilder","global","GlobalPositionStrategy","flexibleConnectedTo","FlexibleConnectedPositionStrategy","BaseOverlayDispatcher","_attachedOverlays","index","splice","OverlayKeyboardDispatcher","super","_keydownListener","overlays","_isAttached","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","slice","_addEventListeners","IOS","_cursorOriginalValue","cursor","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","OverlayConfig","OverlayRef","id","_appRef","get","ApplicationRef","DomPortalOutlet","i5","i6","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","InjectionToken","deps","useFactory","OverlayModule","ɵmod","ɵinj","BidiModule","PortalModule","ScrollingModule","mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","_matchMedia","matchMedia","bind","noopMatchMedia","query","WEBKIT","BLINK","has","head","sheet","insertRule","createEmptyStyleRule","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","isMatched","queries","mediaQuery","_registerQuery","mql","observe","observables","splitQueries","observable","stateObservable","combineLatest","concat","skip","debounceTime","breakpointStates","response","breakpoints","output","Observable","observer","handler","startWith","set","a1","a2","MAT_SNACK_BAR_DATA","politeness","announcementMessage","data","horizontalPosition","verticalPosition","MAX_TIMEOUT","pow","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","_onExit","_finishDismiss","dismiss","closed","exit","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","_open","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","SimpleSnackBar","snackBarRef","hasAction","MatSnackBarRef","ɵcmp","directives","i2","i3","matSnackBarAnimations","snackBarState","state","opacity","transition","animate","MatSnackBarContainer","BasePortalOutlet","_elementRef","_changeDetectorRef","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","_assertNotAttached","_applySnackBarClasses","_live","h","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","fromState","toState","_completeExit","onEnter","enter","detectChanges","_screenReaderAnnounce","_announceTimeoutId","onMicrotaskEmpty","panelClasses","inertElement","querySelector","liveElement","focusedElement","activeElement","HTMLElement","removeAttribute","focus","MatSnackBarConfig","CdkPortalOutlet","decls","i3$1","MatButtonModule","MatCommonModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","_MatSnackBarBase","_overlay","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","openFromComponent","component","_attach","openFromTemplate","simpleSnackBarComponent","_attachSnackBarContainer","injector","Injector","viewContainerRef","providers","useValue","containerPortal","ComponentPortal","snackBarContainerComponent","containerRef","instance","content","userConfig","_createOverlay","TemplateRef","TemplatePortal","$implicit","_createInjector","contentRef","toggle","handsetCssClass","announce","_animateSnackBar","clear","isLeft","isRight","i2$1","i3$2","MatSnackBar","live","breakpointObserver","parentSnackBar","defaultConfig"],"sources":["./node_modules/@stackblitz/sdk/bundles/sdk.m.js","./src/app/shared/stackblitz.service.ts","./src/app/custom-elements/code/code.component.ts","./src/app/custom-elements/code/code.module.ts","./src/app/custom-elements/code/pretty-printer.service.ts","./src/app/shared/copier.service.ts","./tools/stackblitz/rxjs.version.js","./node_modules/@angular/cdk/fesm2015/overlay.mjs","./node_modules/@angular/cdk/fesm2015/layout.mjs","./node_modules/@angular/material/fesm2015/snack-bar.mjs"],"sourcesContent":["var e=[\"angular-cli\",\"create-react-app\",\"html\",\"javascript\",\"node\",\"polymer\",\"typescript\",\"vue\"],t={clickToLoad:function(e){return r(\"ctl\",e)},devToolsHeight:function(e){return i(\"devtoolsheight\",e)},forceEmbedLayout:function(e){return r(\"embed\",e)},hideDevTools:function(e){return r(\"hidedevtools\",e)},hideExplorer:function(e){return r(\"hideExplorer\",e)},hideNavigation:function(e){return r(\"hideNavigation\",e)},showSidebar:function(e){return function(e,t){return\"boolean\"==typeof t?\"showSidebar=\"+(t?\"1\":\"0\"):\"\"}(0,e)},openFile:function(e){return function(e,t){return(Array.isArray(t)?t:[t]).filter(function(e){return\"string\"==typeof e&&\"\"!==e.trim()}).map(function(e){return\"file=\"+encodeURIComponent(e.trim())})}(0,e).join(\"&\")},terminalHeight:function(e){return i(\"terminalHeight\",e)},theme:function(e){return o(\"theme\",[\"light\",\"dark\"],e)},view:function(e){return o(\"view\",[\"preview\",\"editor\"],e)}};function n(e){void 0===e&&(e={});var n=Object.entries(e).map(function(e){var n=e[0],r=e[1];return null!=r&&t.hasOwnProperty(n)?t[n](r):\"\"}).filter(Boolean);return n.length?\"?\"+n.join(\"&\"):\"\"}function r(e,t){return!0===t?e+\"=1\":\"\"}function i(e,t){return\"number\"==typeof t&&t>=0&&t<=100?e+\"=\"+Math.round(t):\"\"}function o(e,t,n){return\"string\"==typeof n&&t.includes(n)?e+\"=\"+n:\"\"}function a(){return Math.random().toString(36).slice(2,6)+Math.random().toString(36).slice(2,6)}function d(e,t){return\"\"+u(t)+e+n(t)}function c(e,t){var r={forceEmbedLayout:!0};return t&&\"object\"==typeof t&&Object.assign(r,t),\"\"+u(r)+e+n(r)}function u(e){return void 0===e&&(e={}),\"string\"==typeof e.origin?e.origin:\"https://stackblitz.com\"}function s(e,t,n){if(!t||!e||!e.parentNode)throw new Error(\"Invalid Element\");e.id&&(t.id=e.id),e.className&&(t.className=e.className),function(e,t){t&&\"object\"==typeof t&&(Object.hasOwnProperty.call(t,\"height\")&&(e.height=\"\"+t.height),Object.hasOwnProperty.call(t,\"width\")&&(e.width=\"\"+t.width)),e.height||(e.height=\"300\"),e.width||e.setAttribute(\"style\",\"width:100%;\")}(t,n),e.parentNode.replaceChild(t,e)}function l(e){if(\"string\"==typeof e){var t=document.getElementById(e);if(!t)throw new Error(\"Could not find element with id '\"+e+\"'\");return t}if(e instanceof HTMLElement)return e;throw new Error(\"Invalid element: \"+e)}function p(e){return e&&!1===e.newWindow?\"_self\":\"_blank\"}function f(){return f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},f.apply(this,arguments)}var h=/*#__PURE__*/function(){function e(e){this.port=void 0,this.pending={},this.port=e,this.port.onmessage=this.messageListener.bind(this)}var t=e.prototype;return t.request=function(e){var t=this,n=e.type,r=e.payload,i=a();return new Promise(function(e,o){t.pending[i]={resolve:e,reject:o},t.port.postMessage({type:n,payload:f({},r,{__reqid:i})})})},t.messageListener=function(e){var t;if(\"string\"==typeof(null==(t=e.data.payload)?void 0:t.__reqid)){var n=e.data,r=n.type,i=n.payload,o=i.__reqid,a=i.__error;this.pending[o]&&(i.__success?this.pending[o].resolve(function(e){var t=f({},e);return delete t.__reqid,delete t.__success,delete t.__error,Object.keys(t).length?t:null}(i)):this.pending[o].reject(a?r+\": \"+a:r),delete this.pending[o])}},e}(),m=/*#__PURE__*/function(){function e(e,t){var n=this;this._rdc=void 0,this.editor={openFile:function(e){return n._rdc.request({type:\"SDK_OPEN_FILE\",payload:{path:e}})},setCurrentFile:function(e){return n._rdc.request({type:\"SDK_SET_CURRENT_FILE\",payload:{path:e}})},setTheme:function(e){return n._rdc.request({type:\"SDK_SET_UI_THEME\",payload:{theme:e}})},setView:function(e){return n._rdc.request({type:\"SDK_SET_UI_VIEW\",payload:{view:e}})},showSidebar:function(e){return void 0===e&&(e=!0),n._rdc.request({type:\"SDK_TOGGLE_SIDEBAR\",payload:{visible:e}})}},this.preview={origin:\"\",getUrl:function(){return n._rdc.request({type:\"SDK_GET_PREVIEW_URL\",payload:{}}).then(function(e){var t;return null!=(t=null==e?void 0:e.url)?t:null})},setUrl:function(e){if(void 0===e&&(e=\"/\"),\"string\"!=typeof e||!e.startsWith(\"/\"))throw new Error(\"Invalid argument: expected a path starting with '/', got '\"+e+\"'\");return n._rdc.request({type:\"SDK_SET_PREVIEW_URL\",payload:{path:e}})}},this._rdc=new h(e),Object.defineProperty(this.preview,\"origin\",{value:\"string\"==typeof t.previewOrigin?t.previewOrigin:null,writable:!1})}var t=e.prototype;return t.applyFsDiff=function(e){var t=function(e){return null!==e&&\"object\"==typeof e};if(!t(e)||!t(e.create))throw new Error(\"Invalid diff object: expected diff.create to be an object.\");if(!Array.isArray(e.destroy))throw new Error(\"Invalid diff object: expected diff.create to be an array.\");return this._rdc.request({type:\"SDK_APPLY_FS_DIFF\",payload:e})},t.getDependencies=function(){return this._rdc.request({type:\"SDK_GET_DEPS_SNAPSHOT\",payload:{}})},t.getFsSnapshot=function(){return this._rdc.request({type:\"SDK_GET_FS_SNAPSHOT\",payload:{}})},e}(),v=[],y=function(e){var t=this;this.element=void 0,this.id=void 0,this.pending=void 0,this.vm=void 0,this.id=a(),this.element=e,this.pending=new Promise(function(e,n){var r=function(n){var r=n.data;\"SDK_INIT_SUCCESS\"===(null==r?void 0:r.action)&&r.id===t.id&&(t.vm=new m(n.ports[0],r.payload),e(t.vm),o())},i=function(){var e;null==(e=t.element.contentWindow)||e.postMessage({action:\"SDK_INIT\",id:t.id},\"*\")};function o(){window.clearInterval(d),window.removeEventListener(\"message\",r)}window.addEventListener(\"message\",r),i();var a=0,d=window.setInterval(function(){if(t.vm)o();else{if(a>=20)return o(),n(\"Timeout: Unable to establish a connection with the StackBlitz VM\"),void v.forEach(function(e,n){e.id===t.id&&v.splice(n,1)});a++,i()}},500)}),v.push(this)};function g(e,t){var n=document.createElement(\"input\");return n.type=\"hidden\",n.name=e,n.value=t,n}function w(t){if(!e.includes(t.template)){var n=e.map(function(e){return\"'\"+e+\"'\"}).join(\", \");console.warn(\"Unsupported project.template: must be one of \"+n)}var r=\"node\"===t.template,i=document.createElement(\"form\");return i.method=\"POST\",i.setAttribute(\"style\",\"display:none!important;\"),i.appendChild(g(\"project[title]\",t.title)),i.appendChild(g(\"project[description]\",t.description)),i.appendChild(g(\"project[template]\",t.template)),t.dependencies&&(r?console.warn(\"Invalid project.dependencies: dependencies must be provided as a 'package.json' file when using the 'node' template.\"):i.appendChild(g(\"project[dependencies]\",JSON.stringify(t.dependencies)))),t.settings&&i.appendChild(g(\"project[settings]\",JSON.stringify(t.settings))),Object.keys(t.files).forEach(function(e){\"string\"==typeof t.files[e]&&i.appendChild(g(\"project[files][\"+e+\"]\",t.files[e]))}),i}function _(e){var t,n,r,i;return null!=e&&e.contentWindow?(null!=(i=(n=e)instanceof Element?\"element\":\"id\",t=null!=(r=v.find(function(e){return e[i]===n}))?r:null)?t:new y(e)).pending:Promise.reject(\"Provided element is not an iframe.\")}var b={connect:_,embedGithubProject:function(e,t,n){var r=l(e),i=document.createElement(\"iframe\");return i.src=c(\"/github/\"+t,n),s(r,i,n),_(i)},embedProject:function(e,t,n){var r,i=l(e),o=function(e,t){var n=w(e);return n.action=c(\"/run\",t),n.id=\"sb\",\"<html><head><title></title></head><body>\"+n.outerHTML+\"<script>document.getElementById('\"+n.id+\"').submit();<\\/script></body></html>\"}(t,n),a=document.createElement(\"iframe\");return s(i,a,n),null==(r=a.contentDocument)||r.write(o),_(a)},embedProjectId:function(e,t,n){var r=l(e),i=document.createElement(\"iframe\");return i.src=c(\"/edit/\"+t,n),s(r,i,n),_(i)},openGithubProject:function(e,t){var n=d(\"/github/\"+e,t),r=p(t);window.open(n,r)},openProject:function(e,t){!function(e,t){var n=w(e);n.action=d(\"/run\",t),n.target=p(t),document.body.appendChild(n),n.submit(),document.body.removeChild(n)}(e,t)},openProjectId:function(e,t){var n=d(\"/edit/\"+e,t),r=p(t);window.open(n,r)}};export{b as default};\n","import StackBlitzkSDK from '@stackblitz/sdk';\nimport { Injectable } from '@angular/core';\nimport { Project } from '@stackblitz/sdk/typings/interfaces';\n\ninterface StackBlitzExampleConfig {\n  code: string;\n  language: string;\n  html?: string;\n  dependencies: {\n    [name: string]: string;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StackblitzService {\n  openProject(config: StackBlitzExampleConfig) {\n    const codeExtension: 'js' | string= {\n      'ts': 'ts',\n      'typescript': 'ts'\n    }[config.language] || 'js';\n\n    const template: Project['template'] = codeExtension === 'ts'\n      ? 'typescript'\n      : 'javascript';\n\n    StackBlitzkSDK.openProject({\n      files: {\n        'index.html': config.html || '',\n        [`index.${codeExtension}`]: config.code\n      },\n      title: 'RxJS example',\n      description: 'RxJS example',\n      template,\n      tags: ['rxjs', 'demo'],\n      dependencies: config.dependencies,\n      settings: {\n        compile: {\n          trigger: 'auto',\n          action: 'refresh',\n          clearConsole: true,\n        },\n      }\n    }, {\n        devToolsHeight: 50\n    });\n  }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\nimport { StackblitzService } from 'app/shared/stackblitz.service';\nimport version from '../../../../tools/stackblitz/rxjs.version';\n\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nconst DEFAULT_LINE_NUMS_COUNT = 10;\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n * Renders code provided through the `updateCode` method.\n *\n */\n@Component({\n  selector: 'aio-code',\n  template: `\n    <pre class=\"prettyprint lang-{{ language }}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabelCopy\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <button *ngIf=\"!hideCopy\" class=\"material-icons edit-button no-print\"\n        title=\"Edit in StackBlitz\"\n        [attr.aria-label]=\"ariaLabelEdit\"\n        (click)=\"editInStackBlitz()\">\n        <span aria-hidden=\"true\">open_in_new</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n  `,\n})\nexport class CodeComponent implements OnChanges {\n  ariaLabelCopy = '';\n  ariaLabelEdit = '';\n\n  /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n  private codeText: string;\n\n  /** Code that should be formatted with current inputs and displayed in the view. */\n  set code(code: string) {\n    this._code = code;\n\n    if (!this._code || !this._code.trim()) {\n      this.showMissingCodeMessage();\n    } else {\n      this.formatDisplayedCode();\n    }\n  }\n  get code(): string {\n    return this._code;\n  }\n  _code: string;\n\n  /** Whether the copy button should be shown. */\n  @Input() hideCopy: boolean;\n\n  /** Language to render the code (e.g. javascript, dart, typescript). */\n  @Input() language: string | null;\n\n  /**\n   * Whether to display line numbers:\n   *\n   * - If false: hide\n   * - If true: show\n   * - If number: show but start at that number\n   *\n   */\n  @Input() linenums: boolean | number | string;\n\n  /** Path to the source of the code. */\n  @Input() path: string;\n\n  /** Region of the source of the code being displayed. */\n  @Input() region: string;\n\n  /** Optional header to be displayed above the code. */\n  @Input()\n  set header(header: string | null) {\n    this._header = header;\n    this.ariaLabelCopy = this.header ? `Copy code snippet from ${this.header}` : '';\n    this.ariaLabelEdit = this.header ? `Edit code snippet from ${this.header} in StackBlitz` : '';\n  }\n  get header(): string | null {\n    return this._header;\n  }\n  private _header: string | null;\n\n  @Output() codeFormatted = new EventEmitter<void>();\n\n  /** The element in the template that will display the formatted code. */\n  @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n  constructor(\n    private snackbar: MatSnackBar,\n    private pretty: PrettyPrinter,\n    private copier: CopierService,\n    private logger: Logger,\n    private stackblitz: StackblitzService\n  ) {}\n\n  ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n    if (this.code) {\n      this.formatDisplayedCode();\n    }\n  }\n\n  private formatDisplayedCode() {\n    const leftAlignedCode = leftAlign(this.code);\n    this.setCodeHtml(leftAlignedCode); // start with unformatted code\n    this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n    this.pretty\n      .formatCode(leftAlignedCode, this.language ?? '', this.getLinenums(leftAlignedCode))\n      .pipe(tap(() => this.codeFormatted.emit()))\n      .subscribe(\n        (c) => this.setCodeHtml(c),\n        (err) => {\n          /* ignore failure to format */\n        }\n      );\n  }\n\n  /** Sets the message showing that the code could not be found. */\n  private showMissingCodeMessage() {\n    const src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n    const srcMsg = src ? ` for\\n${src}` : '.';\n    this.setCodeHtml(`<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`);\n  }\n\n  /** Sets the innerHTML of the code container to the provided code string. */\n  private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n    this.codeContainer.nativeElement.innerHTML = formattedCode;\n  }\n\n  /** Gets the textContent of the displayed code element. */\n  private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n    return this.codeContainer.nativeElement.textContent;\n  }\n\n  /** Extracts html placed in the `// html: ` comment in the code.  */\n  private getHtmlFromCode(code: string): string {\n    const pattern = new RegExp('// html: (.*)');\n    const matches = code.match(pattern);\n\n    return matches ? matches[1] : '';\n  }\n\n  /** Copies the code snippet to the user's clipboard. */\n  doCopy() {\n    const code = this.codeText;\n    const successfullyCopied = this.copier.copyText(code);\n\n    if (successfullyCopied) {\n      this.logger.log('Copied code to clipboard:', code);\n      this.snackbar.open('Code Copied', '', { duration: 800 });\n    } else {\n      this.logger.error(new Error(`ERROR copying code to clipboard: \"${code}\"`));\n      this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n    }\n  }\n\n  editInStackBlitz() {\n    this.stackblitz.openProject({\n      code: this.codeText,\n      language: this.language ?? '',\n      dependencies: {\n        rxjs: version,\n      },\n      html: this.getHtmlFromCode(this.codeText),\n    });\n  }\n\n  /** Gets the calculated value of linenums (boolean/number). */\n  getLinenums(code: string) {\n    const linenums =\n      typeof this.linenums === 'boolean'\n        ? this.linenums\n        : this.linenums === 'true'\n        ? true\n        : this.linenums === 'false'\n        ? false\n        : typeof this.linenums === 'string'\n        ? parseInt(this.linenums, 10)\n        : this.linenums;\n\n    // if no linenums, enable line numbers if more than one line\n    return linenums == null || isNaN(linenums as number) ? (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT : linenums;\n  }\n}\n\nfunction leftAlign(text: string): string {\n  let indent = Number.MAX_VALUE;\n\n  const lines = text.split('\\n');\n  lines.forEach((line) => {\n    const lineIndent = line.search(/\\S/);\n    if (lineIndent !== -1) {\n      indent = Math.min(lineIndent, indent);\n    }\n  });\n\n  return lines\n    .map((line) => line.substr(indent))\n    .join('\\n')\n    .trim();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n  imports: [ CommonModule, MatSnackBarModule ],\n  declarations: [ CodeComponent ],\n  exports: [ CodeComponent ],\n  providers: [ PrettyPrinter, CopierService ]\n})\nexport class CodeModule { }\n","import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any).prettyPrintOne;\n    return ppo ? Promise.resolve(ppo) :\n      // `prettyPrintOne` is not on `window`, which means `prettify.js` has not been loaded yet.\n      // Import it; as a side-effect it will add `prettyPrintOne` on `window`.\n      import('assets/js/prettify.js' as any)\n        .then(\n          () => (window as any).prettyPrintOne,\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   * - false: don't display\n   * - true: do display\n   * - number: do display but start at the given number\n   *\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: string, language?: string, linenums?: number | boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return ppo(code, language, linenums);\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n","import { Injectable } from \"@angular/core\";\n/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n *\n */\n\n\n@Injectable()\nexport class CopierService {\n    private fakeElem: HTMLTextAreaElement|null;\n\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    createFake(text: string) {\n      const isRTL = document.documentElement.getAttribute('dir') === 'rtl';\n\n      // Create a fake element to hold the contents to copy\n      this.fakeElem = document.createElement('textarea');\n\n      // Prevent zooming on iOS\n      this.fakeElem.style.fontSize = '12pt';\n\n      // Reset box model\n      this.fakeElem.style.border = '0';\n      this.fakeElem.style.padding = '0';\n      this.fakeElem.style.margin = '0';\n\n      // Move element out of screen horizontally\n      this.fakeElem.style.position = 'absolute';\n      this.fakeElem.style[ isRTL ? 'right' : 'left' ] = '-9999px';\n\n      // Move element to the same position vertically\n      const yPosition = window.pageYOffset || document.documentElement.scrollTop;\n      this.fakeElem.style.top = yPosition + 'px';\n\n      this.fakeElem.setAttribute('readonly', '');\n      this.fakeElem.value = text;\n\n      document.body.appendChild(this.fakeElem);\n\n      this.fakeElem.select();\n      this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n    }\n\n    removeFake() {\n      if (this.fakeElem) {\n        document.body.removeChild(this.fakeElem);\n        this.fakeElem = null;\n      }\n    }\n\n    copyText(text: string) {\n      try {\n        this.createFake(text);\n        return document.execCommand('copy');\n      } catch (err) {\n        return false;\n      } finally {\n        this.removeFake();\n      }\n    }\n}\n","// Exposes the current RxJS version number from the library's package.json\n// for usage in TypeScript files.\n// (Since said package.json is outside of this TypeScript project, it's not\n// available for a direct TypeScript import).\n\nmodule.exports = require('../../../package.json').version;\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ElementRef, Optional, ApplicationRef, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _isTestEnvironment, _getEventTarget } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        var _a;\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        (_a = this._host) === null || _a === void 0 ? void 0 : _a.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        var _a;\n        (_a = this._containerElement) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: OverlayContainer }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }];\n    } });\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                    }] }, { type: i5.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, declarations: [CdkConnectedOverlay, CdkOverlayOrigin], imports: [BidiModule, PortalModule, ScrollingModule], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import * as i0 from '@angular/core';\nimport { NgModule, Injectable } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass LayoutModule {\n}\nLayoutModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: LayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLayoutModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: LayoutModule });\nLayoutModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: LayoutModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: LayoutModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia =\n            this._platform.isBrowser && window.matchMedia\n                ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n                    // call it from a different scope.\n                    window.matchMedia.bind(window)\n                : noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT || this._platform.BLINK) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MediaMatcher, deps: [{ token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaMatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MediaMatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MediaMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }]; } });\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { },\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(breakpointStates => {\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(({ matches, query }) => {\n                response.matches = response.matches || matches;\n                response.breakpoints[query] = matches;\n            });\n            return response;\n        }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = new Observable((observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            const handler = (e) => this._zone.run(() => observer.next(e));\n            mql.addListener(handler);\n            return () => {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(({ matches }) => ({ query, matches })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BreakpointObserver, deps: [{ token: MediaMatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nBreakpointObserver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BreakpointObserver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BreakpointObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: MediaMatcher }, { type: i0.NgZone }]; } });\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries\n        .map(query => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.98px)',\n    Small: '(min-width: 600px) and (max-width: 959.98px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n        '(max-width: 959.98px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i2$1 from '@angular/cdk/a11y';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-simple-snackbar\" }, ngImport: i0, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\\n\"], components: [{ type: i2.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-simple-snackbar',\n                    }, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DATA]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarContainer, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSnackBarContainer, selector: \"snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mat-snack-bar-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], directives: [{ type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, declarations: [MatSnackBarContainer, SimpleSnackBar], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatSnackBarContainer, MatCommonModule] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, imports: [[OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                }]\n        }] });\n\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\nclass _MatSnackBarBase {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\n_MatSnackBarBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\n_MatSnackBarBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSnackBarBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: MatSnackBarConfig, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: MatSnackBarConfig, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, matSnackBarAnimations };\n"],"sourceRoot":"webpack:///","file":"719.5209bb1ff00871c9.js"}