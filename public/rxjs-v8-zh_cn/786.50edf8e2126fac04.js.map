{"version":3,"mappings":"sRAYIA,iBAAoEA,oBAAQA,iDAE5EA,oBAGEA,yCAASC,EAATC,OAASD,QAAO,KAMhBD,sBACAA,sBACFA,iCAJEA,qCAG+DA,oEAK7DA,oBAQEA,gBACFA,iEALEA,eACAA,kEAAoE,4BAHpEA,uBAMGA,oCAAiB,uDATxBA,SACEA,wBAUFA,6CAPKA,oGAUPA,qBAGEA,kDAASG,WAMVH,iCAJCA,iCAGAA,+DAvCOA,iBACTA,uBAEAA,0BAaAA,gBACEA,gCAYFA,QAEAA,0BAUFA,8BAzCmEA,iCAC3DA,iDAGHA,qDAYkBA,+CACWA,oCAe7BA,sDAYA,IAAMI,EAAb,MAAM,QAUJC,YAAoBC,EAA8BC,EAAgCC,GAA9DC,qBAA8DA,kBATlFA,iBAA6B,KAC7BA,UAAgB,OAChBA,kBAAc,EACdA,iBAAa,EAELA,eAAY,IAAIC,IACxBD,gBAAa,EAIXA,KAAKE,YAAwE,IAA3DJ,EAAWK,cAAcC,UAAUC,QAAQ,YAG/DC,WACEN,KAAKD,WAAWQ,QAAQC,MAAKC,OAAUT,KAAKU,YAAYC,UAAWJ,IACjEP,KAAKO,QAAUA,EACf,MAAMK,EAmDZ,WAAkBC,EAAYC,GAC5B,OAAOD,EAAME,OAAO,CAACC,EAAQC,IAAUH,EAAGG,GAAQD,EAAS,EAAIA,EAAS,GApDlDE,CAAMlB,KAAKO,QAAUU,GAAwB,OAAfA,EAAKE,OAErDnB,KAAKoB,KACHR,EAAY,EAAKZ,KAAKE,WAAcU,EAAYZ,KAAKqB,WAAa,qBAAuB,iBAAoB,WAAc,SAIjIC,kBACOtB,KAAKE,aAIRqB,OAAcvB,KAAKD,WAAWyB,gBAAgBhB,QAAKiB,KAAYC,MAAQ1B,KAAK2B,MAAMC,QAAQpB,MAAKqB,OAAU7B,KAAK2B,SAC3GnB,QAAKC,KAAUT,KAAKU,YACpBC,UAAU,EAAEmB,EAAOH,MAElB,GADA3B,KAAK+B,YAAcD,EACL,OAAVA,GAAkBA,GAASH,EAAMK,OACnC,OAGF,MAAMC,EAAIN,EAAMO,UAAUJ,GAAO3B,cAC3BgC,EAAIF,EAAEG,aAENC,EAAQJ,EAAEK,wBACVC,EAAQJ,EAAEG,wBAIXE,EAFsBC,KAAOF,EAAME,KAAOJ,EAAMK,QAAUH,EAAMG,SAGnEP,EAAEQ,WAAaN,EAAMI,IAAMF,EAAME,IAAMN,EAAES,aAAe,KAMlEC,cACE7C,KAAKU,UAAUoC,KAAK,MAGtBC,OAAOC,GAAY,GACjBhD,KAAKiD,aAAejD,KAAKiD,YACrBD,GAAahD,KAAKiD,aACpBjD,KAAKkD,QAITA,QACElD,KAAKH,cAAcsD,4DAhEVxD,GAAYJ,6DAAZI,EAAYyD,imCA5CZ7D,4BAAMA,6EA4CNI,GAAb,GC7Ca0D,EAAb,MAAM,QAJNzD,cAKEI,4BAAoCL,gDADzB0D,4DAHF,CAAEC,KAAcC,SAGdF,GAAb","names":["i0","ctx_r5","oxw","ctx_r12","TocComponent","constructor","scrollService","elementRef","tocService","this","Subject","isEmbedded","nativeElement","className","indexOf","ngOnInit","tocList","pipe","takeUntil","onDestroy","subscribe","itemCount","array","fn","reduce","result","item","count","level","type","primaryMax","ngAfterViewInit","combineLatest","activeItemIndex","subscribeOn","asap","items","changes","startWith","index","activeIndex","length","e","toArray","p","offsetParent","eRect","getBoundingClientRect","pRect","isInViewport","top","bottom","scrollTop","clientHeight","ngOnDestroy","next","toggle","canScroll","isCollapsed","toTop","scrollToTop","selectors","TocModule","CommonModule","MatIconModule"],"sources":["./src/app/custom-elements/toc/toc.component.ts","./src/app/custom-elements/toc/toc.module.ts"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, QueryList, ViewChildren } from '@angular/core';\nimport { asapScheduler as asap, combineLatest, Subject } from 'rxjs';\nimport { startWith, subscribeOn, takeUntil } from 'rxjs/operators';\n\nimport { ScrollService } from 'app/shared/scroll.service';\nimport { TocItem, TocService } from 'app/shared/toc.service';\n\ntype TocType = 'None' | 'Floating' | 'EmbeddedSimple' | 'EmbeddedExpandable';\n\n@Component({\n  selector: 'aio-toc',\n  template: `<div *ngIf=\"type !== 'None'\" class=\"toc-inner no-print\" [class.collapsed]=\"isCollapsed\">\n    <div *ngIf=\"type === 'EmbeddedSimple'\" class=\"toc-heading embedded\">Contents</div>\n\n    <button\n      *ngIf=\"type === 'EmbeddedExpandable'\"\n      type=\"button\"\n      (click)=\"toggle(false)\"\n      class=\"toc-heading embedded secondary\"\n      title=\"Expand/collapse contents\"\n      aria-label=\"Expand/collapse contents\"\n      [attr.aria-pressed]=\"!isCollapsed\"\n    >\n      Contents\n      <mat-icon class=\"rotating-icon\" svgIcon=\"keyboard_arrow_right\" [class.collapsed]=\"isCollapsed\"></mat-icon>\n    </button>\n\n    <ul class=\"toc-list\" [class.embedded]=\"type !== 'Floating'\">\n      <ng-container *ngFor=\"let toc of tocList; let i = index\">\n        <li\n          #tocItem\n          title=\"{{ toc.title }}\"\n          *ngIf=\"type === 'Floating' || toc.level !== 'h1'\"\n          class=\"{{ toc.level }}\"\n          [class.secondary]=\"type === 'EmbeddedExpandable' && i >= primaryMax\"\n          [class.active]=\"i === activeIndex\"\n        >\n          <a [href]=\"toc.href\" [innerHTML]=\"toc.content\"></a>\n        </li>\n      </ng-container>\n    </ul>\n\n    <button\n      *ngIf=\"type === 'EmbeddedExpandable'\"\n      type=\"button\"\n      (click)=\"toggle()\"\n      class=\"toc-more-items embedded material-icons\"\n      [class.collapsed]=\"isCollapsed\"\n      title=\"Expand/collapse contents\"\n      aria-label=\"Expand/collapse contents\"\n      [attr.aria-pressed]=\"!isCollapsed\"\n    ></button>\n  </div> `,\n  styles: [],\n})\nexport class TocComponent implements OnInit, AfterViewInit, OnDestroy {\n  activeIndex: number | null = null;\n  type: TocType = 'None';\n  isCollapsed = true;\n  isEmbedded = false;\n  @ViewChildren('tocItem') private items: QueryList<ElementRef>;\n  private onDestroy = new Subject();\n  primaryMax = 4;\n  tocList: TocItem[];\n\n  constructor(private scrollService: ScrollService, elementRef: ElementRef, private tocService: TocService) {\n    this.isEmbedded = elementRef.nativeElement.className.indexOf('embedded') !== -1;\n  }\n\n  ngOnInit() {\n    this.tocService.tocList.pipe(takeUntil(this.onDestroy)).subscribe((tocList) => {\n      this.tocList = tocList;\n      const itemCount = count(this.tocList, (item) => item.level !== 'h1');\n\n      this.type =\n        itemCount > 0 ? (this.isEmbedded ? (itemCount > this.primaryMax ? 'EmbeddedExpandable' : 'EmbeddedSimple') : 'Floating') : 'None';\n    });\n  }\n\n  ngAfterViewInit() {\n    if (!this.isEmbedded) {\n      // We use the `asap` scheduler because updates to `activeItemIndex` are triggered by DOM changes,\n      // which, in turn, are caused by the rendering that happened due to a ChangeDetection.\n      // Without asap, we would be updating the model while still in a ChangeDetection handler, which is disallowed by Angular.\n      combineLatest(this.tocService.activeItemIndex.pipe(subscribeOn(asap)), this.items.changes.pipe(startWith(this.items)))\n        .pipe(takeUntil(this.onDestroy))\n        .subscribe(([index, items]) => {\n          this.activeIndex = index;\n          if (index === null || index >= items.length) {\n            return;\n          }\n\n          const e = items.toArray()[index].nativeElement;\n          const p = e.offsetParent;\n\n          const eRect = e.getBoundingClientRect();\n          const pRect = p.getBoundingClientRect();\n\n          const isInViewport = eRect.top >= pRect.top && eRect.bottom <= pRect.bottom;\n\n          if (!isInViewport) {\n            p.scrollTop += eRect.top - pRect.top - p.clientHeight / 2;\n          }\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.onDestroy.next(null);\n  }\n\n  toggle(canScroll = true) {\n    this.isCollapsed = !this.isCollapsed;\n    if (canScroll && this.isCollapsed) {\n      this.toTop();\n    }\n  }\n\n  toTop() {\n    this.scrollService.scrollToTop();\n  }\n}\n\nfunction count<T>(array: T[], fn: (item: T) => boolean) {\n  return array.reduce((result, item) => (fn(item) ? result + 1 : result), 0);\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { TocComponent } from './toc.component';\n\n@NgModule({\n  imports: [ CommonModule, MatIconModule ],\n  declarations: [ TocComponent ]\n})\nexport class TocModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = TocComponent;\n}\n"],"sourceRoot":"webpack:///","file":"786.50edf8e2126fac04.js"}