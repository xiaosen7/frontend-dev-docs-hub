{
  "id": "guide/subscription",
  "title": "订阅",
  "contents": "\n<div class=\"content\">\n<h1 id=\"subscription\">Subscription<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/subscription#subscription\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"订阅\">订阅<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/subscription#订阅\"><i class=\"material-icons\">link</i></a></h1>\n<p><strong>What is a Subscription?</strong> A Subscription is an object that represents a disposable resource, usually the execution of an Observable. A Subscription has one important method, <code>unsubscribe</code>, that takes no argument and just disposes the resource held by the subscription. In previous versions of RxJS, Subscription was called \"Disposable\".</p>\n<p><strong>什么是订阅？</strong> 订阅是一个表示可释放资源的对象，通常是 Observable 的一次执行。订阅有一个重要的方法 <code>unsubscribe</code>，它不接受任何参数，只是释放本订阅所持有的资源。在以前的 RxJS 版本中，Subscription 被称为 “Disposable”。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a> } from 'rxjs';\n\nconst <a href=\"api/index/const/observable\" class=\"code-anchor\">observable</a> = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000);\nconst subscription = observable.subscribe((x) => console.log(x));\n// Later:\n// This cancels the ongoing <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a> execution which\n// was started by calling subscribe with an Observer.\nsubscription.unsubscribe();\n</code-example>\n<p><span class=\"informal\">A Subscription essentially just has an <code>unsubscribe()</code> function to release resources or cancel Observable executions.</span></p>\n<p><span class=\"informal\">Subscription 本质上只有一个 <code>unsubscribe()</code> 函数来释放资源或取消 Observable 的执行过程。</span></p>\n<p>Subscriptions can also be put together, so that a call to an <code>unsubscribe()</code> of one Subscription may unsubscribe multiple Subscriptions. You can do this by \"adding\" one subscription into another:</p>\n<p>多个订阅也可以放在一起，以便调用一个订阅的 <code>unsubscribe()</code> 就可以退订多个订阅。你可以通过将一个订阅“添加”到另一个订阅中来做到这一点：</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a> } from 'rxjs';\n\nconst observable1 = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(400);\nconst observable2 = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(300);\n\nconst subscription = observable1.subscribe((x) => console.log('<a href=\"api/index/function/first\" class=\"code-anchor\">first</a>: ' + x));\nconst childSubscription = observable2.subscribe((x) => console.log('second: ' + x));\n\nsubscription.add(childSubscription);\n\nsetTimeout(() => {\n  // Unsubscribes BOTH subscription and childSubscription\n  subscription.unsubscribe();\n}, 1000);\n</code-example>\n<p>When executed, we see in the console:</p>\n<p>执行时，我们在控制台中看到：</p>\n<code-example language=\"none\">\nsecond: 0\n<a href=\"api/index/function/first\" class=\"code-anchor\">first</a>: 0\nsecond: 1\n<a href=\"api/index/function/first\" class=\"code-anchor\">first</a>: 1\nsecond: 2\n</code-example>\n<p>Subscriptions also have a <code>remove(otherSubscription)</code> method, in order to undo the addition of a child Subscription.</p>\n<p>订阅也有一个 <code>remove(otherSubscription)</code> 方法，以撤消添加进来的子订阅。</p>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/index/class/Observable\n - api/index/const/observable\n - api/index/function/first\n - api/index/function/interval\n - guide/subscription#subscription\n - guide/subscription#订阅\n-->"
}