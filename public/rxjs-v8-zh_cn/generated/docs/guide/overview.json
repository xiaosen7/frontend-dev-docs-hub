{
  "id": "guide/overview",
  "title": "介绍",
  "contents": "\n<div class=\"content\">\n<h1 id=\"introduction\">Introduction<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/overview#introduction\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"介绍\">介绍<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/overview#介绍\"><i class=\"material-icons\">link</i></a></h1>\n<p>RxJS is a library for composing asynchronous and event-based programs by using observable sequences. It provides one core type, the <a href=\"./guide/observable\">Observable</a>, satellite types (Observer, Schedulers, Subjects) and operators inspired by <code>Array</code> methods (<code><a href=\"api/index/function/map\" class=\"code-anchor\">map</a></code>, <code><a href=\"api/index/function/filter\" class=\"code-anchor\">filter</a></code>, <code><a href=\"api/index/function/reduce\" class=\"code-anchor\">reduce</a></code>, <code><a href=\"api/index/function/every\" class=\"code-anchor\">every</a></code>, etc) to allow handling asynchronous events as collections.</p>\n<p>RxJS 是一个使用可观察序列编写异步和基于事件的程序的库。它提供了一种核心类型，即 <a href=\"./guide/observable\">Observable</a>、一些周边类型（Observer、Scheduler、Subjects）和类似于 <code>Array</code> 方法（<code><a href=\"api/index/function/map\" class=\"code-anchor\">map</a></code>、<code><a href=\"api/index/function/filter\" class=\"code-anchor\">filter</a></code>、<code><a href=\"api/index/function/reduce\" class=\"code-anchor\">reduce</a></code>、<code><a href=\"api/index/function/every\" class=\"code-anchor\">every</a></code> 等）的操作符，以便将异步事件作为集合进行处理。</p>\n<p><span class=\"informal\">Think of RxJS as Lodash for events.</span></p>\n<p><span class=\"informal\">可以将 RxJS 视为处理事件的 Lodash。</span></p>\n<p>ReactiveX combines the <a href=\"https://en.wikipedia.org/wiki/Observer_pattern\">Observer pattern</a> with the <a href=\"https://en.wikipedia.org/wiki/Iterator_pattern\">Iterator pattern</a> and <a href=\"http://martinfowler.com/articles/collection-pipeline/#NestedOperatorExpressions\">functional programming with collections</a> to fill the need for an ideal way of managing sequences of events.</p>\n<p>ReactiveX 将<a href=\"https://en.wikipedia.org/wiki/Observer_pattern\">观察者模式</a>与<a href=\"https://en.wikipedia.org/wiki/Iterator_pattern\">迭代器模式</a>和<a href=\"http://martinfowler.com/articles/collection-pipeline/#NestedOperatorExpressions\">使用集合的函数式编程</a>相结合，以便让你更好地管理事件序列。</p>\n<p>The essential concepts in RxJS which solve async event management are:</p>\n<p>RxJS 中解决异步事件管理的基本概念有：</p>\n<ul>\n<li>\n<p><strong>Observable:</strong> represents the idea of an invokable collection of future values or events.</p>\n<p><strong>Observable（可观察者）：</strong>表示未来（future）值或事件的可调用集合的概念。</p>\n</li>\n<li>\n<p><strong>Observer:</strong> is a collection of callbacks that knows how to listen to values delivered by the Observable.</p>\n<p><strong>Observer（观察者）：</strong>是一个回调集合，它知道如何监听 Observable 传来的值。</p>\n</li>\n<li>\n<p><strong>Subscription:</strong> represents the execution of an Observable, is primarily useful for cancelling the execution.</p>\n<p><strong>Subscription（订阅）：</strong>表示 Observable 的一次执行，主要用于取消执行。</p>\n</li>\n<li>\n<p><strong>Operators:</strong> are pure functions that enable a functional programming style of dealing with collections with operations like <code><a href=\"api/index/function/map\" class=\"code-anchor\">map</a></code>, <code><a href=\"api/index/function/filter\" class=\"code-anchor\">filter</a></code>, <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code>, <code><a href=\"api/index/function/reduce\" class=\"code-anchor\">reduce</a></code>, etc.</p>\n<p><strong>Operator（操作符）：</strong>是纯函数，可以使用 <code><a href=\"api/index/function/map\" class=\"code-anchor\">map</a></code>、<code><a href=\"api/index/function/filter\" class=\"code-anchor\">filter</a></code>、<code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code>、<code><a href=\"api/index/function/reduce\" class=\"code-anchor\">reduce</a></code> 等操作来以函数式编程风格处理集合。</p>\n</li>\n<li>\n<p><strong>Subject:</strong> is equivalent to an EventEmitter, and the only way of multicasting a value or event to multiple Observers.</p>\n<p><strong>Subject（主体）：</strong>相当于一个 EventEmitter，也是将一个值或事件多播到多个 Observers 的唯一方式。</p>\n</li>\n<li>\n<p><strong>Schedulers:</strong> are centralized dispatchers to control concurrency, allowing us to coordinate when computation happens on e.g. <code>setTimeout</code> or <code>requestAnimationFrame</code> or others.</p>\n<p><strong>Scheduler（调度器）：</strong>是控制并发的集中化调度器，允许我们在计算发生时进行协调，例如 <code>setTimeout</code> 或 <code>requestAnimationFrame</code> 或其它。</p>\n</li>\n</ul>\n<h2 id=\"first-examples\">First examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/overview#first-examples\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"第一个例子\">第一个例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/overview#第一个例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Normally you register event listeners.</p>\n<p>通常你这样注册事件监听器。</p>\n<code-example language=\"ts\">\ndocument.addEventListener('click', () => console.log('Clicked!'));\n</code-example>\n<p>Using RxJS you create an observable instead.</p>\n<p>如果使用 RxJS，要改为创建 observable。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a> } from 'rxjs';\n\n<a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click').subscribe(() => console.log('Clicked!'));\n</code-example>\n<h3 id=\"purity\">Purity<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/overview#purity\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"纯净---purity\">纯净 - Purity<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/overview#纯净---purity\"><i class=\"material-icons\">link</i></a></h3>\n<p>What makes RxJS powerful is its ability to produce values using pure functions. That means your code is less prone to errors.</p>\n<p>RxJS 的强大之处在于它能够使用纯函数生成值。这意味着你的代码不太容易出错。</p>\n<p>Normally you would create an impure function, where other pieces of your code can mess up your state.</p>\n<p>通常你会创建一个不纯的函数，你的代码的其它部分可能会弄乱你的状态。</p>\n<code-example language=\"ts\">\nlet <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 0;\ndocument.addEventListener('click', () => console.log(`Clicked ${++<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>} times`));\n</code-example>\n<p>Using RxJS you isolate the state.</p>\n<p>使用 RxJS 可以隔离状态。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a> } from 'rxjs';\n\n<a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click')\n  .pipe(<a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a>((<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>) => <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> + 1, 0))\n  .subscribe((<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>) => console.log(`Clicked ${<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>} times`));\n</code-example>\n<p>The <strong>scan</strong> operator works just like <strong>reduce</strong> for arrays. It takes a value which is exposed to a callback. The returned value of the callback will then become the next value exposed the next time the callback runs.</p>\n<p><strong>scan</strong> 操作符的工作方式与数组的 <strong>reduce</strong> 类似。它接受一个要传给回调的值。回调的返回值将成为下一次回调运行时传入的下一个值。</p>\n<h3 id=\"flow\">Flow<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/overview#flow\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"流动---flow\">流动 - Flow<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/overview#流动---flow\"><i class=\"material-icons\">link</i></a></h3>\n<p>RxJS has a whole range of operators that helps you control how the events flow through your observables.</p>\n<p>RxJS 有一系列的操作符，可以帮助你控制事件如何在你的 observables 中流动。</p>\n<p>This is how you would allow at most one click per second, with plain JavaScript:</p>\n<p>下面是使用纯 JavaScript 实现“最多允许每秒单击一次”的方式：</p>\n<code-example language=\"ts\">\nlet <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 0;\nlet rate = 1000;\nlet lastClick = Date.now() - rate;\ndocument.addEventListener('click', () => {\n  if (Date.now() - lastClick >= rate) {\n    console.log(`Clicked ${++<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>} times`);\n    lastClick = Date.now();\n  }\n});\n</code-example>\n<p>With RxJS:</p>\n<p>使用 RxJS：</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/throttleTime\" class=\"code-anchor\">throttleTime</a>, <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a> } from 'rxjs';\n\n<a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click')\n  .pipe(\n    <a href=\"api/index/function/throttleTime\" class=\"code-anchor\">throttleTime</a>(1000),\n    <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a>((<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>) => <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> + 1, 0)\n  )\n  .subscribe((<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>) => console.log(`Clicked ${<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>} times`));\n</code-example>\n<p>Other flow control operators are <a href=\"../api/operators/filter\"><strong>filter</strong></a>, <a href=\"../api/operators/delay\"><strong>delay</strong></a>, <a href=\"../api/operators/debounceTime\"><strong>debounceTime</strong></a>, <a href=\"../api/operators/take\"><strong>take</strong></a>, <a href=\"../api/operators/takeUntil\"><strong>takeUntil</strong></a>, <a href=\"../api/operators/distinct\"><strong>distinct</strong></a>, <a href=\"../api/operators/distinctUntilChanged\"><strong>distinctUntilChanged</strong></a> etc.</p>\n<p>其它流动控制操作符有 <a href=\"../api/operators/filter\"><strong>filter</strong></a>、<a href=\"../api/operators/delay\"><strong>delay</strong></a>、<a href=\"../api/operators/debounceTime\"><strong>debounceTime</strong></a>、<a href=\"../api/operators/take\"><strong>take</strong></a>、<a href=\"../api/operators/takeUntil\"><strong>takeUntil</strong></a>、<a href=\"../api/operators/distinct\"><strong>distinct</strong></a>、<a href=\"../api/operators/distinctUntilChanged\"><strong>distinctUntilChanged</strong></a> 等。</p>\n<h3 id=\"values\">Values<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/overview#values\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"值---values\">值 - Values<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/overview#值---values\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can transform the values passed through your observables.</p>\n<p>你可以通过你的 observables 传来的值进行转换。</p>\n<p>Here's how you can add the current mouse x position for every click, in plain JavaScript:</p>\n<p>以下是使用纯 JavaScript 来为每次单击增加当前鼠标 x 位置的方法：</p>\n<code-example language=\"ts\">\nlet <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 0;\nconst rate = 1000;\nlet lastClick = Date.now() - rate;\ndocument.addEventListener('click', (event) => {\n  if (Date.now() - lastClick >= rate) {\n    <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> += event.clientX;\n    console.log(<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>);\n    lastClick = Date.now();\n  }\n});\n</code-example>\n<p>With RxJS:</p>\n<p>使用 RxJS：</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/throttleTime\" class=\"code-anchor\">throttleTime</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>, <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a> } from 'rxjs';\n\n<a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click')\n  .pipe(\n    <a href=\"api/index/function/throttleTime\" class=\"code-anchor\">throttleTime</a>(1000),\n    <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>((event) => event.clientX),\n    <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a>((<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>, clientX) => <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> + clientX, 0)\n  )\n  .subscribe((<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>) => console.log(<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>));\n</code-example>\n<p>Other value producing operators are <a href=\"../api/operators/pluck\"><strong>pluck</strong></a>, <a href=\"../api/operators/pairwise\"><strong>pairwise</strong></a>, <a href=\"../api/operators/sample\"><strong>sample</strong></a> etc.</p>\n<p>其它能产生值的操作符有 <a href=\"../api/operators/pluck\"><strong>pluck</strong></a>、<a href=\"../api/operators/pairwise\"><strong>pairwise</strong></a>、<a href=\"../api/operators/sample\"><strong>sample</strong></a> 等。</p>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - ../api/operators/debounceTime\n - ../api/operators/delay\n - ../api/operators/distinct\n - ../api/operators/distinctUntilChanged\n - ../api/operators/filter\n - ../api/operators/pairwise\n - ../api/operators/pluck\n - ../api/operators/sample\n - ../api/operators/take\n - ../api/operators/takeUntil\n - ./guide/observable\n - api/index/function/concat\n - api/index/function/count\n - api/index/function/every\n - api/index/function/filter\n - api/index/function/fromEvent\n - api/index/function/map\n - api/index/function/reduce\n - api/index/function/scan\n - api/index/function/throttleTime\n - guide/overview#first-examples\n - guide/overview#flow\n - guide/overview#introduction\n - guide/overview#purity\n - guide/overview#values\n - guide/overview#介绍\n - guide/overview#值---values\n - guide/overview#流动---flow\n - guide/overview#第一个例子\n - guide/overview#纯净---purity\n - http://martinfowler.com/articles/collection-pipeline/#NestedOperatorExpressions\n - https://en.wikipedia.org/wiki/Iterator_pattern\n - https://en.wikipedia.org/wiki/Observer_pattern\n-->"
}