{
  "id": "guide/observer",
  "title": "观察者（Observer）",
  "contents": "\n<div class=\"content\">\n<h1 id=\"observer\">Observer<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observer#observer\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"观察者observer\">观察者（Observer）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observer#观察者observer\"><i class=\"material-icons\">link</i></a></h1>\n<p><strong>What is an Observer?</strong> An Observer is a consumer of values delivered by an Observable. Observers are simply a set of callbacks, one for each type of notification delivered by the Observable: <code>next</code>, <code>error</code>, and <code>complete</code>. The following is an example of a typical Observer object:</p>\n<p><strong>什么是 Observer？</strong> Observer 是 Observable 传递的各个值的消费者。 Observer 只是一组回调，对应于 Observable 传递的每种类型的通知：<code>next</code>、<code>error</code> 和 <code>complete</code>。下面是一个典型的 Observer 对象的例子：</p>\n<code-example language=\"ts\">\nconst observer = {\n  next: (x) => console.log('<a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a> got a next value: ' + x),\n  error: (err) => console.error('<a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a> got an error: ' + err),\n  complete: () => console.log('<a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a> got a complete notification'),\n};\n</code-example>\n<p>To use the Observer, provide it to the <code>subscribe</code> of an Observable:</p>\n<p>要使用 Observer，请将其提供给 Observable 的 <code>subscribe</code> ：</p>\n<code-example language=\"ts\">\nobservable.subscribe(observer);\n</code-example>\n<p><span class=\"informal\">Observers are just objects with three callbacks, one for each type of notification that an Observable may deliver.</span></p>\n<p><span class=\"informal\"> Observer 只是具有三个回调的对象，分别用于 Observable 可能传递的每种类型的通知。</span></p>\n<p>Observers in RxJS may also be <em>partial</em>. If you don't provide one of the callbacks, the execution of the Observable will still happen normally, except some types of notifications will be ignored, because they don't have a corresponding callback in the Observer.</p>\n<p>RxJS 中的 Observer 也可能是<em>部分</em>的。如果你不提供其中一个回调，Observable 的执行仍然会正常进行，除了某些类型的通知会被忽略，因为它们在 Observer 中没有对应的回调。</p>\n<p>The example below is an <code><a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a></code> without the <code>complete</code> callback:</p>\n<p>下面的例子是一个没有 <code>complete</code> 回调的 <code><a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a></code> ：</p>\n<code-example language=\"ts\">\nconst observer = {\n  next: (x) => console.log('<a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a> got a next value: ' + x),\n  error: (err) => console.error('<a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a> got an error: ' + err),\n};\n</code-example>\n<p>When subscribing to an <code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a></code>, you may also just provide the next callback as an argument, without being attached to an <code><a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a></code> object, for instance like this:</p>\n<p>订阅 <code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a></code> 时，你也可以只提供下一个回调作为参数，而不用附属于 <code><a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a></code> 对象，例如：</p>\n<code-example language=\"ts\">\nobservable.subscribe((x) => console.log('<a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a> got a next value: ' + x));\n</code-example>\n<p>Internally in <code>observable.subscribe</code>, it will create an <code><a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a></code> object using the callback argument as the <code>next</code> handler.</p>\n<p>在 <code>observable.subscribe</code> 内部，它将使用回调参数作为 <code>next</code> <strong>处理器</strong>创建一个 <code><a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a></code> 对象。</p>\n\n</div>\n<!-- links to this doc:\n - api/index/class/Observable\n-->\n<!-- links from this doc:\n - api/index/class/Observable\n - api/index/interface/Observer\n - guide/observer#observer\n - guide/observer#观察者observer\n-->"
}