{
  "id": "deprecations/scheduler-argument",
  "title": "Scheduler(调度器)参数",
  "contents": "\n<div class=\"content\">\n<h1 id=\"scheduler-argument\">Scheduler Argument<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#scheduler-argument\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"scheduler调度器参数\">Scheduler(调度器)参数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#scheduler调度器参数\"><i class=\"material-icons\">link</i></a></h1>\n<p>To limit the API surface of some operators, but also prepare for a <a href=\"https://github.com/ReactiveX/rxjs/pull/4583\">major refactoring in V8</a>, we agreed on deprecating the <code>scheduler</code> argument from many operators. It solely deprecates those methods where this argument is rarely used. So <code>time</code> related operators, like <a href=\"https://rxjs.dev/api/index/function/interval\"><code>interval</code></a> are not affected by this deprecation.</p>\n<p>为了限制某些操作符的对外 API，同时也为 <a href=\"https://github.com/ReactiveX/rxjs/pull/4583\">V8 中的重大重构</a>做准备，我们决定从许多操作符中弃用 <code>scheduler</code> 参数。它只会弃用那些很少使用此参数的方法。因此，与 <code>time</code> 相关的操作符（如 <a href=\"https://rxjs.dev/api/index/function/interval\"><code>interval</code></a>）不受此弃用的影响。</p>\n<p>To support this transition the <a href=\"/api/index/function/scheduled\">scheduled creation function</a> was added.</p>\n<p>为了支持这种转变，添加了<a href=\"/api/index/function/scheduled\">创建型函数 scheduled</a>。</p>\n<div class=\"alert is-important\">\n<p>This deprecation was introduced in RxJS 6.5 and will become breaking with RxJS 8.</p>\n<p>此弃用是 RxJS 6.5 中引入的，并且将在 RxJS 8 中成为重大变更。</p>\n</div>\n<h2 id=\"operators-affected-by-this-change\">Operators affected by this Change<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#operators-affected-by-this-change\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"受此变更影响的操作符\">受此变更影响的操作符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#受此变更影响的操作符\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>\n<p><a href=\"/api/index/function/from\">from</a></p>\n<p><a href=\"/api/index/function/from\">from(从...转为)</a></p>\n</li>\n<li>\n<p><a href=\"/api/index/function/of\">of</a></p>\n<p><a href=\"/api/index/function/of\">of(把...包装为)</a></p>\n</li>\n<li>\n<p><a href=\"/api/index/function/merge\">merge</a></p>\n<p><a href=\"/api/index/function/merge\">merge(合并)</a></p>\n</li>\n<li>\n<p><a href=\"/api/index/function/concat\">concat</a></p>\n<p><a href=\"/api/index/function/concat\">concat(串联)</a></p>\n</li>\n<li>\n<p><a href=\"/api/operators/startWith\">startWith</a></p>\n<p><a href=\"/api/operators/startWith\">startWith(以...开始)</a></p>\n</li>\n<li>\n<p><a href=\"/api/operators/endWith\">endWith</a></p>\n<p><a href=\"/api/operators/endWith\">endWith(以...结尾)</a></p>\n</li>\n<li>\n<p><a href=\"/api/index/function/combineLatest\">combineLatest</a></p>\n<p><a href=\"/api/index/function/combineLatest\">combineLatest(组合最新的)</a></p>\n</li>\n</ul>\n<h2 id=\"how-to-refactor\">How to Refactor<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#how-to-refactor\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"如何重构\">如何重构<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#如何重构\"><i class=\"material-icons\">link</i></a></h2>\n<p>If you use any other operator from the list above and using the <code>scheduler</code> argument, you have to three potential refactoring options.</p>\n<p>如果你使用上面列表中的任何其它操作符并使用 <code>scheduler</code> 参数，则必须使用三个潜在的重构选项。</p>\n<h3 id=\"refactoring-of-of-and-from\">Refactoring of <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a></code> and <code><a href=\"api/index/function/from\" class=\"code-anchor\">from</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#refactoring-of-of-and-from\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"重构-of-和-from\">重构 <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a></code> 和 <code><a href=\"api/index/function/from\" class=\"code-anchor\">from</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#重构-of-和-from\"><i class=\"material-icons\">link</i></a></h3>\n<p><code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> is kinda copying the behavior of <code><a href=\"api/index/function/from\" class=\"code-anchor\">from</a></code>. Therefore if you used <code><a href=\"api/index/function/from\" class=\"code-anchor\">from</a></code> with a <code>scheduler</code> argument, you can just replace them.</p>\n<p><code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> 的行为有点像 <code><a href=\"api/index/function/from\" class=\"code-anchor\">from</a></code>。因此，如果你要为 <code><a href=\"api/index/function/from\" class=\"code-anchor\">from</a></code> 传入 <code>scheduler</code> 参数，则只要替换它们即可。</p>\n<p>For the <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a></code> creation function you need to this Observable with <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> and instead of passing the <code>scheduler</code> argument to <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a></code> pass it to <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code>. Following code example demonstrate this process.</p>\n<p>创建函数 <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a></code>，你需要将此 Observable 与 <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> 一起使用，而不是将 <code>scheduler</code> 参数传递给 <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a></code>。以下代码示例演示了此过程。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>, <a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a> } from 'rxjs';\n\n// Deprecated approach\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>).subscribe((x) => console.log(x));\n// suggested approach\n<a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a>([1, 2, 3], <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>).subscribe((x) => console.log(x));\n</code-example>\n<h3 id=\"refactoring-of-merge-concat-combinelatest-startwith-and-endwith\">Refactoring of <code><a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a></code>, <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code>, <code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code>, <code><a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a></code> and <code><a href=\"api/index/function/endWith\" class=\"code-anchor\">endWith</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#refactoring-of-merge-concat-combinelatest-startwith-and-endwith\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"重构-mergeconcatcombinelateststartwith-和-endwith\">重构 <code><a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a></code>、<code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code>、<code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code>、<code><a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a></code> 和 <code><a href=\"api/index/function/endWith\" class=\"code-anchor\">endWith</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#重构-mergeconcatcombinelateststartwith-和-endwith\"><i class=\"material-icons\">link</i></a></h3>\n<p>In case you used to pass a scheduler argument to one of these operators you probably had code like this:</p>\n<p>如果你曾经将调度器参数传递给这些操作符之一，可能有这样的代码：</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a>, <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a> } from 'rxjs';\n\n<a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a>(<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('hello '), <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('World'), <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>).subscribe((x) => console.log(x));\n</code-example>\n<p>To work around this deprecation you can leverage the <a href=\"/api/index/function/scheduled\"><code>scheduled</code></a> function.</p>\n<p>要解决此弃用问题，你可以利用 <a href=\"/api/index/function/scheduled\"><code>scheduled</code></a> 函数。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a>, <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>, <a href=\"api/index/function/concatAll\" class=\"code-anchor\">concatAll</a> } from 'rxjs';\n\n<a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a>([<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('hello '), <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('World')], <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>)\n  .pipe(<a href=\"api/index/function/concatAll\" class=\"code-anchor\">concatAll</a>())\n  .subscribe((x) => console.log(x));\n</code-example>\n<p>You can apply this pattern to refactor deprecated usage of <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code>, <code><a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a></code> and <code><a href=\"api/index/function/endWith\" class=\"code-anchor\">endWith</a></code> but do notice that you will want to use <a href=\"/api/operators/mergeAll\">mergeAll</a> to refactor the deprecated usage of <code><a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a></code>.</p>\n<p>你可以应用此模式来重构已弃用的 <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code>、<code><a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a></code> 和 <code><a href=\"api/index/function/endWith\" class=\"code-anchor\">endWith</a></code>，但请注意你要用 <a href=\"/api/operators/mergeAll\">mergeAll</a> 重构已弃用的 <code><a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a></code>。</p>\n<p>With <code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code>, you will want to use <a href=\"/api/operators/combineLatestAll\">combineLatestAll</a></p>\n<p>如果是 <code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code>，你就要改用 <a href=\"/api/operators/combineLatestAll\">combineLatestAll</a></p>\n<p>E.g. code that used to look like this:</p>\n<p>例如，过去看起来像这样的代码：</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>, <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a> } from 'rxjs';\n\n<a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>(<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('hello '), <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('World'), <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>).subscribe(console.log);\n</code-example>\n<p>would become:</p>\n<p>会成为：</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a>, <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>, <a href=\"api/index/function/combineLatestAll\" class=\"code-anchor\">combineLatestAll</a> } from 'rxjs';\n\n<a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a>([<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('hello '), <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('World')], <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>)\n  .pipe(<a href=\"api/index/function/combineLatestAll\" class=\"code-anchor\">combineLatestAll</a>())\n  .subscribe((x) => console.log(x));\n</code-example>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /api/index/function/combineLatest\n - /api/index/function/concat\n - /api/index/function/from\n - /api/index/function/merge\n - /api/index/function/of\n - /api/index/function/scheduled\n - /api/operators/combineLatestAll\n - /api/operators/endWith\n - /api/operators/mergeAll\n - /api/operators/startWith\n - api/index/const/asyncScheduler\n - api/index/function/combineLatest\n - api/index/function/combineLatestAll\n - api/index/function/concat\n - api/index/function/concatAll\n - api/index/function/endWith\n - api/index/function/from\n - api/index/function/merge\n - api/index/function/of\n - api/index/function/scheduled\n - api/index/function/startWith\n - deprecations/scheduler-argument#how-to-refactor\n - deprecations/scheduler-argument#operators-affected-by-this-change\n - deprecations/scheduler-argument#refactoring-of-merge-concat-combinelatest-startwith-and-endwith\n - deprecations/scheduler-argument#refactoring-of-of-and-from\n - deprecations/scheduler-argument#scheduler-argument\n - deprecations/scheduler-argument#scheduler调度器参数\n - deprecations/scheduler-argument#受此变更影响的操作符\n - deprecations/scheduler-argument#如何重构\n - deprecations/scheduler-argument#重构-mergeconcatcombinelateststartwith-和-endwith\n - deprecations/scheduler-argument#重构-of-和-from\n - https://github.com/ReactiveX/rxjs/pull/4583\n - https://rxjs.dev/api/index/function/interval\n-->"
}