{
  "id": "deprecations/subscribe-arguments",
  "title": "Subscribe(订阅)参数",
  "contents": "\n<div class=\"content\">\n<h1 id=\"subscribe-arguments\">Subscribe Arguments<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/subscribe-arguments#subscribe-arguments\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"subscribe订阅参数\">Subscribe(订阅)参数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/subscribe-arguments#subscribe订阅参数\"><i class=\"material-icons\">link</i></a></h1>\n<p>You might have seen that we deprecated some signatures of the <code>subscribe</code> method, which might have caused some confusion. The <code>subscribe</code> method itself is not deprecated. This deprecation also affects the <a href=\"../../api/operators/tap\"><code>tap</code> operator</a>, as tap supports the same signature as the <code>subscribe</code> method.</p>\n<p>你可能注意到我们弃用了 <code>subscribe</code> 方法的一些签名，这可能会引起一些混乱。<code>subscribe</code> 方法本身没有被弃用。这种弃用也会影响 <a href=\"../../api/operators/tap\"><code>tap</code> 操作符</a>，因为 tap 支持与 <code>subscribe</code> 方法相同的签名。</p>\n<p>This is to get ready for a future where we may allow configuration of <code>subscribe</code> via the second argument, for things like <code>AbortSignal</code> or the like (imagine <code>source$.subscribe(fn, { signal })</code>, etc). This deprecation is also because 2-3 function arguments can contribute to harder-to-read code. For example someone could name functions poorly and confuse the next reader: <code>source$.subscribe(doSomething, doSomethingElse, lol)</code> With that signature, you have to know unapparent details about <code>subscribe</code>, where\nusing a partial observer solves that neatly: <code>source$.subscribe({ next: doSomething, error: doSomethingElse, complete: lol })</code>.</p>\n<p>这是为将来我们可能允许通过第二个参数配置 <code>subscribe</code> 做准备，例如 <code>AbortSignal</code> 或其类似物（想象一下 <code>source$.subscribe(fn, { signal })</code> 等）。这种弃用也是因为 2-3 个函数参数可能会导致代码更难阅读。例如，有人可能会不恰当的命名函数并让下一位读者感到困惑：<code>source$.subscribe(doSomething, doSomethingElse, lol)</code>。使用该签名，你必须了解有关 <code>subscribe</code> 的隐晦细节，使用部分 Observer（partial observer）可以巧妙地解决此问题： <code>source$.subscribe({ next: doSomething, error: doSomethingElse, complete: lol })</code>。</p>\n<div class=\"alert is-important\">\n<p>This deprecation was introduced in RxJS 6.4.</p>\n<p>此弃用是在 RxJS 6.4 中引入的。</p>\n</div>\n<p>In short we deprecated all signatures where you specified an anonymous <code>error</code> or <code>complete</code> callback and passed an empty function to one of the callbacks before.</p>\n<p>简而言之，我们弃用了可指定匿名 <code>error</code> 或 <code>complete</code> 回调的所有签名，并将一个空函数传递给之前的回调之一。</p>\n<h2 id=\"what-signature-is-affected\">What Signature is affected<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/subscribe-arguments#what-signature-is-affected\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"什么签名会受到影响\">什么签名会受到影响<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/subscribe-arguments#什么签名会受到影响\"><i class=\"material-icons\">link</i></a></h2>\n<p><strong>We have deprecated all signatures of <code>subscribe</code> that take more than 1 argument.</strong></p>\n<p><strong>我们已弃用所有接受超过 1 个参数的 <code>subscribe</code> 签名。</strong></p>\n<p>We deprecated signatures for just passing the <code>complete</code> callback.</p>\n<p>我们弃用了仅传递 <code>complete</code> 回调的签名。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> } from 'rxjs';\n\n// deprecated\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>([1, 2, 3]).subscribe(null, null, console.info); // difficult to read\n// suggested change\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>([1, 2, 3]).subscribe({ complete: console.info });\n</code-example>\n<p>Similarly, we also deprecated signatures for solely passing the <code>error</code> callback.</p>\n<p>同样，我们也弃用了仅传递 <code>error</code> 回调的签名。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/throwError\" class=\"code-anchor\">throwError</a> } from 'rxjs';\n\n// deprecated\n<a href=\"api/index/function/throwError\" class=\"code-anchor\">throwError</a>('I am an error').subscribe(null, console.error);\n// suggested change\n<a href=\"api/index/function/throwError\" class=\"code-anchor\">throwError</a>('I am an error').subscribe({ error: console.error });\n</code-example>\n<p>Do notice, in general it is recommended only to use the anonymous function if you only specify the <code>next</code> callback otherwise we recommend to pass an <code><a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a></code></p>\n<p>请注意，一般来说，如果你只指定了 <code>next</code> 回调，则建议仅使用匿名函数，否则我们建议传递 <code><a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a></code></p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> } from 'rxjs';\n\n// recommended\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>([1, 2, 3]).subscribe((v) => console.info(v));\n// also recommended\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>([1, 2, 3]).subscribe({\n  next: (v) => console.log(v),\n  error: (e) => console.error(e),\n  complete: () => console.info('complete'),\n});\n</code-example>\n\n</div>\n<!-- links to this doc:\n - api/index/class/Observable\n-->\n<!-- links from this doc:\n - ../../api/operators/tap\n - api/index/function/of\n - api/index/function/throwError\n - api/index/interface/Observer\n - deprecations/subscribe-arguments#subscribe-arguments\n - deprecations/subscribe-arguments#subscribe订阅参数\n - deprecations/subscribe-arguments#what-signature-is-affected\n - deprecations/subscribe-arguments#什么签名会受到影响\n-->"
}