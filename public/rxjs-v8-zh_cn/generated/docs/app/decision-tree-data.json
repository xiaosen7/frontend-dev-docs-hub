{"1360":{"id":"1360","label":"throwError","path":"api/index/function/throwError","docType":"function"},"1431":{"id":"1431","label":"它在被订阅时才按需创建","options":["ad06"]},"1495":{"id":"1495","label":"windowToggle","path":"api/operators/windowToggle","docType":"function"},"2106":{"id":"2106","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"2214":{"id":"2214","label":"materialize","path":"api/operators/materialize","docType":"function"},"2411":{"id":"2411","label":"mergeMapTo"},"2981":{"id":"2981","label":"使用 BehaviorSubject","options":["a51a"]},"3351":{"id":"3351","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"3973":{"id":"3973","label":"基于根据已发送的值计算出的一个键","options":["2a32"]},"4505":{"id":"4505","label":"并且每当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable，同时取消对前一个嵌套 Observable 的订阅","options":["965c"]},"4783":{"id":"4783","label":"它会修改从调用到订阅之间的路由","options":["6837"]},"4967":{"id":"4967","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"5077":{"id":"5077","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["0865"]},"5429":{"id":"5429","label":"pipe","path":"api/index/function/pipe","docType":"function"},"5967":{"id":"5967","label":"直到另一个 Observable 发送了值","options":["934a"]},"6010":{"id":"6010","label":"如果它们精确的处于第 n 位","options":["4967"]},"6066":{"id":"6066","label":"它使用某个 API 来添加或移除事件处理器","options":["3351"]},"6245":{"id":"6245","label":"我要更改调度器（Scheduler）","options":["4783","e9ce"]},"6255":{"id":"6255","label":"直到此 Observable 完成","options":["943c","5cb5"]},"6425":{"id":"6425","label":"我要只允许部分值通过","options":["49a9","c785","6010","f06c","a111"]},"6455":{"id":"6455","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"6837":{"id":"6837","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"6952":{"id":"6952","label":"timer","path":"api/index/function/timer","docType":"function"},"6969":{"id":"6969","label":"我要重新订阅","options":["f761","71d9"]},"6973":{"id":"6973","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"7503":{"id":"7503","label":"multicast"},"7523":{"id":"7523","label":"并且把分好的组以数组的形式发送","options":["8306"]},"7596":{"id":"7596","label":"我要忽略某些值","options":["c848","8294","93db","5967","86d4","f8fb"]},"8065":{"id":"8065","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"8255":{"id":"8255","label":"我要用元数据包装它的各个消息","options":["a0e4","520f"]},"8294":{"id":"8294","label":"从此 Observable 的首部","options":["d6bc","a3bb"]},"8306":{"id":"8306","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"8804":{"id":"8804","label":"根据值是否相等","options":["472e","ec11"]},"8833":{"id":"8833","label":"支持常规的回调 API","options":["12f7"]},"9502":{"id":"9502","label":"这个时间窗口是根据某个时长来决定的","options":["aba3"]},"9589":{"id":"9589","label":"并且把分好的组以数组的形式发送","options":["8065"]},"4ce6":{"id":"4ce6","label":"mapTo"},"43f3":{"id":"43f3","label":"一个常量值","options":["4ce6"]},"28dc":{"id":"28dc","label":"map","path":"api/operators/map","docType":"function"},"7e11":{"id":"7e11","label":"一个通过公式算出来的值","options":["28dc"]},"73d6":{"id":"73d6","label":"我要把它发送的每个值改成","options":["43f3","7e11"]},"915c":{"id":"915c","label":"pluck"},"24b2":{"id":"24b2","label":"我要从它发送的每个值中取出一个属性","options":["915c"]},"f396":{"id":"f396","label":"tap","path":"api/operators/tap","docType":"function"},"ab57":{"id":"ab57","label":"我要监听即将发送的值，但不想影响它们","options":["f396"]},"83b7":{"id":"83b7","label":"filter","path":"api/operators/filter","docType":"function"},"49a9":{"id":"49a9","label":"基于自定义逻辑","options":["83b7"]},"589b":{"id":"589b","label":"first","path":"api/operators/first","docType":"function"},"84a5":{"id":"84a5","label":"并且只要第一个值","options":["589b"]},"e242":{"id":"e242","label":"take","path":"api/operators/take","docType":"function"},"f4e0":{"id":"f4e0","label":"基于给定的数量","options":["e242"]},"9b36":{"id":"9b36","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"2c30":{"id":"2c30","label":"基于自定义逻辑","options":["9b36"]},"c785":{"id":"c785","label":"如果它们位于此 Observable 的首部","options":["84a5","f4e0","2c30"]},"7c0f":{"id":"7c0f","label":"last","path":"api/operators/last","docType":"function"},"01dd":{"id":"01dd","label":"并且只要最后一个值","options":["7c0f"]},"54d0":{"id":"54d0","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"f3d6":{"id":"f3d6","label":"基于给定的数量","options":["54d0"]},"f06c":{"id":"f06c","label":"如果它们位于此 Observable 的尾部","options":["01dd","f3d6"]},"6bf6":{"id":"6bf6","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"a111":{"id":"a111","label":"直到另一个 Observable 发送了值","options":["6bf6"]},"bb52":{"id":"bb52","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"c848":{"id":"c848","label":"全部","options":["bb52"]},"649d":{"id":"649d","label":"skip","path":"api/operators/skip","docType":"function"},"d6bc":{"id":"d6bc","label":"基于给定的数量","options":["649d"]},"9cf2":{"id":"9cf2","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"a3bb":{"id":"a3bb","label":"基于自定义逻辑","options":["9cf2"]},"93db":{"id":"93db","label":"从此 Observable 的尾部","options":["6973"]},"934a":{"id":"934a","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"510a":{"id":"510a","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"472e":{"id":"472e","label":"发送恰好在当前值前面的那个","options":["510a"]},"ad06":{"id":"ad06","label":"defer","path":"api/index/function/defer","docType":"function"},"ec11":{"id":"ec11","label":"以前任何时候曾发送过","options":["ad06"]},"d540":{"id":"d540","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"0595":{"id":"0595","label":"发送恰好在当前值前面的那个","options":["d540"]},"831d":{"id":"831d","label":"根据一个某个键或对象属性","options":["0595"]},"86d4":{"id":"86d4","label":"与某些以前发送的值匹配","options":["8804","831d"]},"cb4b":{"id":"cb4b","label":"throttle","path":"api/operators/throttle","docType":"function"},"bd2b":{"id":"bd2b","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["cb4b"]},"5f72":{"id":"5f72","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"ab93":{"id":"ab93","label":"这个时间窗口是根据某个时长来决定的","options":["5f72"]},"9f13":{"id":"9f13","label":"发送每个时间窗口中的第一个值","options":["bd2b","ab93"]},"46aa":{"id":"46aa","label":"audit","path":"api/operators/audit","docType":"function"},"6c48":{"id":"6c48","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["46aa"]},"aba3":{"id":"aba3","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"13e5":{"id":"13e5","label":"发送每个时间窗口中的最后一个值","options":["6c48","9502"]},"b1c2":{"id":"b1c2","label":"debounce","path":"api/operators/debounce","docType":"function"},"9c3d":{"id":"9c3d","label":"此平静的间隔阈值由另一个 Observable 决定","options":["b1c2"]},"6e75":{"id":"6e75","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"e81d":{"id":"e81d","label":"此平静的间隔阈值是根据某个时长决定的","options":["6e75"]},"ed00":{"id":"ed00","label":"等足够平静时就发送最后一个值","options":["9c3d","e81d"]},"f8fb":{"id":"f8fb","label":"发生的过于频繁","options":["9f13","13e5","ed00"]},"7a66":{"id":"7a66","label":"reduce","path":"api/operators/reduce","docType":"function"},"8b50":{"id":"8b50","label":"并且只输出最终计算出的值","options":["7a66"]},"57f3":{"id":"57f3","label":"scan","path":"api/operators/scan","docType":"function"},"d6a4":{"id":"d6a4","label":"并且每当来源发送某个值时就输出计算好的值","options":["57f3"]},"549d":{"id":"549d","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"899d":{"id":"899d","label":"并且当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable","options":["549d"]},"965c":{"id":"965c","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"665c":{"id":"665c","label":"我要使用已发送的所有值做某种计算","options":["8b50","d6a4","899d","4505"]},"a0e4":{"id":"a0e4","label":"此元数据描述每个通知（next、error 或 complete）","options":["2214"]},"f26f":{"id":"f26f","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"520f":{"id":"520f","label":"次元数据包含从最后一次发送值开始已过去时间","options":["f26f"]},"0ca3":{"id":"0ca3","label":"timeout","path":"api/operators/timeout","docType":"function"},"33ee":{"id":"33ee","label":"我要抛出一个错误","options":["0ca3"]},"81a2":{"id":"81a2","label":"timeoutWith"},"dc71":{"id":"dc71","label":"我要切换到另一个 Observable","options":["81a2"]},"01cb":{"id":"01cb","label":"在某个非交互式间隔之后","options":["33ee","dc71"]},"c2c4":{"id":"c2c4","label":"single","path":"api/operators/single","docType":"function"},"fa38":{"id":"fa38","label":"我要确保只有一个值","options":["c2c4"]},"f4f1":{"id":"f4f1","label":"count","path":"api/operators/count","docType":"function"},"e254":{"id":"e254","label":"我要知道它发送了多少个值","options":["f4f1"]},"e9d5":{"id":"e9d5","label":"startWith","path":"api/operators/startWith","docType":"function"},"6a51":{"id":"6a51","label":"我要在开头放一个值","options":["e9d5"]},"38c7":{"id":"38c7","label":"delay","path":"api/operators/delay","docType":"function"},"00a8":{"id":"00a8","label":"基于给定的时间","options":["38c7"]},"26e5":{"id":"26e5","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"3eea":{"id":"3eea","label":"基于另一个 Observable 的发送情况","options":["26e5"]},"9b67":{"id":"9b67","label":"我要延迟后再发送","options":["00a8","3eea"]},"a210":{"id":"a210","label":"toArray","path":"api/operators/toArray","docType":"function"},"943c":{"id":"943c","label":"并转换为数组","options":["a210"]},"05d0":{"id":"05d0","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"5cb5":{"id":"5cb5","label":"并且转换为 Promise","options":["05d0"]},"110e":{"id":"110e","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"44d6":{"id":"44d6","label":"连续配对，作为数组","options":["110e"]},"48cd":{"id":"48cd","label":"partition","path":"api/index/function/partition","docType":"function"},"5cca":{"id":"5cca","label":"基于某种标准，并且输出两个 Observable：那些符合此标准的，和不符合此标准的","options":["48cd"]},"4da3":{"id":"4da3","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"d14d":{"id":"d14d","label":"并且把分好的组以数组形式发送","options":["4da3"]},"3a6b":{"id":"3a6b","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"0550":{"id":"0550","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["3a6b"]},"d330":{"id":"d330","label":"根据特定大小的批次","options":["d14d","0550"]},"f2df":{"id":"f2df","label":"bufferTime","path":"api/operators/bufferTime","docType":"function"},"1ec5":{"id":"1ec5","label":"并且把分好的组以数组的形式发送","options":["f2df"]},"c8ec":{"id":"c8ec","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"17ce":{"id":"17ce","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["c8ec"]},"b0c0":{"id":"b0c0","label":"基于时间","options":["1ec5","17ce"]},"c867":{"id":"c867","label":"buffer","path":"api/operators/buffer","docType":"function"},"8c1d":{"id":"8c1d","label":"并且把分好的组以数组的形式发送","options":["c867"]},"ef48":{"id":"ef48","label":"window","path":"api/operators/window","docType":"function"},"4a80":{"id":"4a80","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["ef48"]},"7c04":{"id":"7c04","label":"直到另一个 Observable 发送了值","options":["8c1d","4a80"]},"af3f":{"id":"af3f","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"0afa":{"id":"0afa","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["af3f"]},"df76":{"id":"df76","label":"基于某个按需创建的 Observable 的发送情况","options":["7523","0afa"]},"648c":{"id":"648c","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["1495"]},"321e":{"id":"321e","label":"基于另一个 Observable 开始一组，并基于第三个 Observable 结束这一组","options":["9589","648c"]},"2a32":{"id":"2a32","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"d999":{"id":"d999","label":"我要对这些值进行分组","options":["6255","44d6","5cca","d330","b0c0","7c04","df76","321e","3973"]},"75f6":{"id":"75f6","label":"这里的嵌套 Observable 对每个值都是一样的","options":["2411"]},"fe41":{"id":"fe41","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"fc9a":{"id":"fc9a","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["fe41"]},"97fa":{"id":"97fa","label":"并且并行发送全部嵌套 Observable 所发送的值","options":["75f6","fc9a"]},"4ccb":{"id":"4ccb","label":"concatMapTo"},"e1b7":{"id":"e1b7","label":"这里的嵌套 Observable 对每个值都是一样的","options":["4ccb"]},"e730":{"id":"e730","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["2106"]},"0bea":{"id":"0bea","label":"并且依次发送每个嵌套 Observable 所发送的值","options":["e1b7","e730"]},"892e":{"id":"892e","label":"switchMapTo"},"f453":{"id":"f453","label":"这里的嵌套 Observable 对每个值都是一样的","options":["892e"]},"b2a3":{"id":"b2a3","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"296a":{"id":"296a","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["b2a3"]},"7f14":{"id":"7f14","label":"并且当新值抵达时，取消前一个嵌套 Observable","options":["f453","296a"]},"99e2":{"id":"99e2","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"ac75":{"id":"ac75","label":"并且即使当前的嵌套 Observable 尚未完结，也要忽略进来的值","options":["99e2"]},"cabc":{"id":"cabc","label":"expand","path":"api/operators/expand","docType":"function"},"af2a":{"id":"af2a","label":"并且对每一个新值递归启动一个新的 Observable","options":["cabc"]},"dfb7":{"id":"dfb7","label":"我要为每个值开始一个新的 Observable","options":["97fa","0bea","7f14","ac75","af2a"]},"e409":{"id":"e409","label":"我要执行自定义操作","options":["5429"]},"2dba":{"id":"2dba","label":"share","path":"api/operators/share","docType":"function"},"6bc0":{"id":"6bc0","label":"并且在第一个订阅者抵达时尽快启动","options":["2dba"]},"c46c":{"id":"c46c","label":"publish"},"c816":{"id":"c816","label":"并且手动或用程序启动它","options":["c46c"]},"4c9e":{"id":"4c9e","label":"使用常规 Subject","options":["6bc0","c816"]},"a51a":{"id":"a51a","label":"publishBehavior"},"2d1c":{"id":"2d1c","label":"publishReplay"},"06dd":{"id":"06dd","label":"使用 ReplaySubject","options":["2d1c"]},"73eb":{"id":"73eb","label":"publishLast"},"3b5e":{"id":"3b5e","label":"使用 AsyncSubject","options":["73eb"]},"04b4":{"id":"04b4","label":"使用某种特殊的 Subject 实现","options":["7503"]},"3f82":{"id":"3f82","label":"我要在多个订阅者之间共享某个订阅","options":["4c9e","2981","06dd","3b5e","04b4"]},"36bb":{"id":"36bb","label":"catchError","path":"api/operators/catchError","docType":"function"},"99fb":{"id":"99fb","label":"我要启动一个新的 Observable","options":["36bb"]},"54e6":{"id":"54e6","label":"retry","path":"api/operators/retry","docType":"function"},"f761":{"id":"f761","label":"立即","options":["54e6"]},"03bb":{"id":"03bb","label":"retryWhen"},"71d9":{"id":"71d9","label":"当另一个 Observable 发送值的时候","options":["03bb"]},"0226":{"id":"0226","label":"当发生错误时","options":["99fb","6969"]},"7cea":{"id":"7cea","label":"repeat","path":"api/operators/repeat","docType":"function"},"425e":{"id":"425e","label":"立即","options":["7cea"]},"bebc":{"id":"bebc","label":"repeatWhen"},"75f3":{"id":"75f3","label":"当另一个 Observable 发送值的时候","options":["bebc"]},"a86a":{"id":"a86a","label":"我要重新订阅","options":["425e","75f3"]},"e022":{"id":"e022","label":"concat","path":"api/index/function/concat","docType":"function"},"9c40":{"id":"9c40","label":"我要启动一个新的 Observable","options":["e022"]},"2f37":{"id":"2f37","label":"当它完成时","options":["a86a","9c40"]},"9ab4":{"id":"9ab4","label":"finalize","path":"api/operators/finalize","docType":"function"},"4d27":{"id":"4d27","label":"当它完成、出错或退订时，我要执行某个函数","options":["9ab4"]},"d37f":{"id":"d37f","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"e9ce":{"id":"e9ce","label":"它会修改从发送值到 Observer 之间的路由","options":["d37f"]},"06bf":{"id":"06bf","label":"race","path":"api/index/function/race","docType":"function"},"4ce4":{"id":"4ce4","label":"我只想从首先发送值的 Observable 接收各个值","options":["06bf"]},"1d4e":{"id":"1d4e","label":"merge","path":"api/operators/merge","docType":"function"},"9d00":{"id":"9d00","label":"我要输出所有值，而不管是从哪一个发送的","options":["1d4e"]},"d07a":{"id":"d07a","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"c438":{"id":"c438","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["d07a"]},"96fd":{"id":"96fd","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"0258":{"id":"0258","label":"仅当主 Observable 发送值的时候，使用每个来源发送的最后一个值","options":["96fd"]},"83ef":{"id":"83ef","label":"zip","path":"api/index/function/zip","docType":"function"},"56f6":{"id":"56f6","label":"每个来源中的每个值仅使用一次","options":["83ef"]},"2bf2":{"id":"2bf2","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["c438","0258","56f6"]},"ad16":{"id":"ad16","label":"我要把这个 Observable 和其它的合并，并且","options":["4ce4","9d00","2bf2"]},"bc01":{"id":"bc01","label":"我已经有一个 Observable，并且","options":["73d6","24b2","ab57","6425","7596","665c","8255","01cb","fa38","e254","6a51","9b67","d999","dfb7","e409","3f82","0226","2f37","4d27","6245","ad16"]},"ba05":{"id":"ba05","label":"race","path":"api/index/function/race","docType":"function"},"7c33":{"id":"7c33","label":"我只想从首先发送值的 Observable 接收各个值","options":["ba05"]},"278d":{"id":"278d","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"496d":{"id":"496d","label":"我想在它们全都完成时得到通知","options":["278d"]},"d8dc":{"id":"d8dc","label":"merge","path":"api/operators/merge","docType":"function"},"e2a1":{"id":"e2a1","label":"我要输出所有值，而不管是从哪一个发送的","options":["d8dc"]},"0865":{"id":"0865","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"c549":{"id":"c549","label":"zip","path":"api/index/function/zip","docType":"function"},"90d3":{"id":"90d3","label":"每个来源中的每个值仅使用一次","options":["c549"]},"f1d7":{"id":"f1d7","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["5077","90d3"]},"4dc9":{"id":"4dc9","label":"concat","path":"api/index/function/concat","docType":"function"},"c762":{"id":"c762","label":"我要依次订阅它们","options":["4dc9"]},"aaf3":{"id":"aaf3","label":"我已经有了由某些 Observable 组合成的单一 Observable，并且","options":["7c33","496d","e2a1","f1d7","c762"]},"a6e3":{"id":"a6e3","label":"使用自定义逻辑","options":["6455"]},"3cd2":{"id":"3cd2","label":"generate","path":"api/index/function/generate","docType":"function"},"c0ac":{"id":"c0ac","label":"使用一个类似于 for 循环的状态机","options":["3cd2"]},"fb7b":{"id":"fb7b","label":"抛出一个错误","options":["1360"]},"c00f":{"id":"c00f","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"583b":{"id":"583b","label":"只完成它，而不发送任何值","options":["c00f"]},"b03a":{"id":"b03a","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"2c8e":{"id":"2c8e","label":"永远不会发送任何东西","options":["b03a"]},"f391":{"id":"f391","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"f215":{"id":"f215","label":"来自 DOM 或 Node.js 或类似的东西","options":["f391"]},"4d53":{"id":"4d53","label":"从一个现有的事件源","options":["f215","6066"]},"804b":{"id":"804b","label":"from","path":"api/index/function/from","docType":"function"},"9abe":{"id":"9abe","label":"来自某个 Promise 或事件源","options":["804b"]},"792f":{"id":"792f","label":"from","path":"api/index/function/from","docType":"function"},"206c":{"id":"206c","label":"针对某个数组中的那些值","options":["792f"]},"f10d":{"id":"f10d","label":"range","path":"api/index/function/range","docType":"function"},"e51c":{"id":"e51c","label":"针对某个数字范围内的那些值","options":["f10d"]},"fdbd":{"id":"fdbd","label":"of","path":"api/index/function/of","docType":"function"},"0013":{"id":"0013","label":"针对通过参数给出的那些值","options":["fdbd"]},"7e28":{"id":"7e28","label":"它是可迭代者","options":["206c","e51c","0013"]},"f636":{"id":"f636","label":"interval","path":"api/index/function/interval","docType":"function"},"b85b":{"id":"b85b","label":"均匀的","options":["f636"]},"a7ef":{"id":"a7ef","label":"带有一个可选的首次延迟","options":["6952"]},"be64":{"id":"be64","label":"它基于定时器发送一些值","options":["b85b","a7ef"]},"440f":{"id":"440f","label":"我要创建一个新的 Observable","options":["a6e3","c0ac","fb7b","583b","2c8e","4d53","9abe","7e28","be64","1431"]},"12f7":{"id":"12f7","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"a9be":{"id":"a9be","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"063a":{"id":"063a","label":"支持 Node.js 风格的回调 API","options":["a9be"]},"00d1":{"id":"00d1","label":"我要把某个回调函数转换为 Observable","options":["8833","063a"]},"9af9":{"id":"9af9","label":"我还没有任何 Observable，并且","options":["440f","00d1"]},"initial":{"id":"initial","options":["bc01","aaf3","9af9"]}}