{
  "id": "api/webSocket/WebSocketSubjectConfig",
  "title": "WebSocketSubjectConfig",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/dom/WebSocketSubject.ts?message=docs(webSocket)%3A%20describe%20your%20change...#L8-L198\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/dom/WebSocketSubject.ts#L8-L198\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/webSocket\", \"name\": \"rxjs/webSocket\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/webSocket/WebSocketSubjectConfig\", \"name\": \"WebSocketSubjectConfig\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/webSocket\">rxjs/webSocket</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"websocketsubjectconfig\">WebSocketSubjectConfig<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/webSocket/WebSocketSubjectConfig#websocketsubjectconfig\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>WebSocketSubjectConfig is a plain Object that allows us to make our\nwebSocket configurable.</p>\n<p>WebSocketSubjectConfig 是一个普通的对象，它可以让我们的 webSocket 变成可配置的。</p>\n<p><span class=\"informal\">Provides flexibility to <a href=\"api/webSocket/webSocket\"><code>webSocket</code></a></span></p>\n<p><span class=\"informal\">为 <a href=\"api/webSocket/webSocket\"><code>webSocket</code></a> 提供灵活性</span></p>\n<p>It defines a set of properties to provide custom behavior in specific\nmoments of the socket's lifecycle. When the connection opens we can\nuse <code>openObserver</code>, when the connection is closed <code>closeObserver</code>, if we\nare interested in listening for data coming from server: <code>deserializer</code>,\nwhich allows us to customize the deserialization strategy of data before passing it\nto the socket client. By default, <code>deserializer</code> is going to apply <code>JSON.parse</code> to each message coming\nfrom the Server.</p>\n<p>它定义了一组属性以在 Socket 生命周期的特定时刻提供自定义行为。当连接打开时我们可以使用 <code>openObserver</code>，当连接关闭时使用 <code>closeObserver</code>，如果我们有兴趣监听来自服务器的数据，则用 <code>deserializer</code>，它允许我们在将数据传给 Socket 客户端之前自定义数据的反序列化策略。默认情况下，<code>deserializer</code> 会用 <code>JSON.parse</code> 解析来自服务器的每条消息。</p>\n<h2 id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/webSocket/WebSocketSubjectConfig#examples\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/webSocket/WebSocketSubjectConfig#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p><strong>deserializer</strong>, the default for this property is <code>JSON.parse</code> but since there are just two options\nfor incoming data, either be text or binary data. We can apply a custom deserialization strategy\nor just simply skip the default behaviour.</p>\n<p><strong>deserializer（反序列化器）</strong>，此属性的默认值为 <code>JSON.parse</code>，但由于传入数据只有两个选项：文本或二进制数据。我们可以自定义反序列化策略，或者只是跳过默认行为。</p>\n<code-example language=\"ts\">\nimport { webSocket } from 'rxjs/webSocket';\n\nconst wsSubject = webSocket({\n  url: 'ws://localhost:8081',\n  //Apply any transformation <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> your choice.\n  deserializer: ({ data }) => data\n});\n\nwsSubject.subscribe(console.log);\n\n// Let's suppose we have this on the Server: ws.send('This is a msg <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> the server')\n//output\n//\n// This is a msg <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> the server\n</code-example>\n<p><strong>serializer</strong> allows us to apply custom serialization strategy but for the outgoing messages.</p>\n<p><strong>serializer（序列化器）</strong>允许我们应用自定义的序列化策略，不过这里是用于传出消息。</p>\n<code-example language=\"ts\">\nimport { webSocket } from 'rxjs/webSocket';\n\nconst wsSubject = webSocket({\n  url: 'ws://localhost:8081',\n  // Apply any transformation <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> your choice.\n  serializer: msg => JSON.stringify({ channel: 'webDevelopment', msg: msg })\n});\n\nwsSubject.subscribe(() => subject.next('msg to the server'));\n\n// Let's suppose we have this on the Server:\n//   ws.on('message', msg => console.log);\n//   ws.send('This is a msg <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> the server');\n// output at server side:\n//\n// {\"channel\":\"webDevelopment\",\"msg\":\"msg to the server\"}\n</code-example>\n<p><strong>closeObserver</strong> allows us to set a custom error when an error raises up.</p>\n<p><strong>closeObserver（关闭 Observer）</strong>允许我们在出现错误时设置自定义错误。</p>\n<code-example language=\"ts\">\nimport { webSocket } from 'rxjs/webSocket';\n\nconst wsSubject = webSocket({\n  url: 'ws://localhost:8081',\n  closeObserver: {\n    next() {\n      const customError = { code: 6666, reason: 'Custom evil reason' }\n      console.log(`code: ${ customError.code }, reason: ${ customError.reason }`);\n    }\n  }\n});\n\n// output\n// code: 6666, reason: Custom evil reason\n</code-example>\n<p><strong>openObserver</strong>, Let's say we need to make some kind of init task before sending/receiving msgs to the\nwebSocket or sending notification that the connection was successful, this is when\nopenObserver is useful for.</p>\n<p><strong>openObserver（开启 Observer）</strong>，假设我们需要在向 webSocket 发送/接收消息或发送连接成功的通知之前进行某种初始化任务，这就是 openObserver 的用武之地。</p>\n<code-example language=\"ts\">\nimport { webSocket } from 'rxjs/webSocket';\n\nconst wsSubject = webSocket({\n  url: 'ws://localhost:8081',\n  openObserver: {\n    next: () => {\n      console.log('Connection ok');\n    }\n  }\n});\n\n// output\n// Connection ok\n</code-example>\n<p></p>\n  \n\n  \n\n  <section class=\"interface-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/webSocket/WebSocketSubjectConfig\" class=\"code-anchor\">WebSocketSubjectConfig</a>&#x3C;T> {\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#url\">url: string</a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#protocol\">protocol?: string | Array&#x3C;string></a>\n  <a class=\"code-anchor deprecated-api-item\" href=\"api/webSocket/WebSocketSubjectConfig#resultSelector\">resultSelector?: (e: MessageEvent) => T</a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#serializer\">serializer?: (value: T) => WebSocketMessage</a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#deserializer\">deserializer?: (e: MessageEvent) => T</a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#openObserver\">openObserver?: NextObserver&#x3C;Event></a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#closeObserver\">closeObserver?: NextObserver&#x3C;CloseEvent></a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#closingObserver\">closingObserver?: NextObserver&#x3C;void></a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#WebSocketCtor\">WebSocketCtor?: {...}</a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#binaryType\">binaryType?: 'blob' | 'arraybuffer'</a>\n}\n</code-example>\n\n  \n  \n\n\n  \n  \n\n</section>\n\n  \n  \n\n  \n<section class=\"instance-properties\">\n  <h2 id=\"属性\">属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/webSocket/WebSocketSubjectConfig#属性\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table properties-table\">\n    <thead>\n      <tr><th>属性</th><th>类型</th><th>说明</th></tr>\n    </thead>\n    <tbody>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"url\"></a><code class=\"\">url</code></td>\n        <td><label class=\"property-type-label\"><code>string</code></label></td>\n        <td>\n          <p>The url of the socket server to connect to</p>\n<p>要连接的 Socket 服务器的 url</p>\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"protocol\"></a><code class=\"\">protocol</code></td>\n        <td><label class=\"property-type-label\"><code>string | Array&#x3C;string></code></label></td>\n        <td>\n          <p>The protocol to use to connect</p>\n<p>用于连接的协议</p>\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"resultSelector\"></a><code class=\"deprecated-api-item\">resultSelector</code></td>\n        <td><label class=\"property-type-label\"><code>(e: MessageEvent) => T</code></label></td>\n        <td>\n          \n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"serializer\"></a><code class=\"\">serializer</code></td>\n        <td><label class=\"property-type-label\"><code>(value: T) => WebSocketMessage</code></label></td>\n        <td>\n          <p>A serializer used to create messages from passed values before the\nmessages are sent to the server. Defaults to JSON.stringify.</p>\n<p>用于在将消息发送到服务器之前从传递的值创建消息的序列化器。默认为 JSON.stringify。</p>\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"deserializer\"></a><code class=\"\">deserializer</code></td>\n        <td><label class=\"property-type-label\"><code>(e: MessageEvent) => T</code></label></td>\n        <td>\n          <p>A deserializer used for messages arriving on the socket from the\nserver. Defaults to JSON.parse.</p>\n<p>用于处理从服务器抵达 Socket 的消息的反序列化器。默认为 JSON.parse。</p>\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"openObserver\"></a><code class=\"\">openObserver</code></td>\n        <td><label class=\"property-type-label\"><code><a href=\"api/index/interface/NextObserver\" class=\"code-anchor\">NextObserver</a>&#x3C;Event></code></label></td>\n        <td>\n          <p>An Observer that watches when open events occur on the underlying web socket.</p>\n<p>一个 Observer，当底层 Web Socket 上发生 open 事件时进行观察。</p>\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"closeObserver\"></a><code class=\"\">closeObserver</code></td>\n        <td><label class=\"property-type-label\"><code><a href=\"api/index/interface/NextObserver\" class=\"code-anchor\">NextObserver</a>&#x3C;CloseEvent></code></label></td>\n        <td>\n          <p>An Observer that watches when close events occur on the underlying web socket</p>\n<p>一个 Observer，当底层 Web Socket 上发生 close 事件时进行观察</p>\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"closingObserver\"></a><code class=\"\">closingObserver</code></td>\n        <td><label class=\"property-type-label\"><code><a href=\"api/index/interface/NextObserver\" class=\"code-anchor\">NextObserver</a>&#x3C;void></code></label></td>\n        <td>\n          <p>An Observer that watches when a close is about to occur due to\nunsubscription.</p>\n<p>一个 Observer，当由于退订而即将发生关闭时进行观察。</p>\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"WebSocketCtor\"></a><code class=\"\">WebSocketCtor</code></td>\n        <td><label class=\"property-type-label\"><code>{\n    new (url: string, protocols?: string | string[]): WebSocket;\n}</code></label></td>\n        <td>\n          <p>A WebSocket constructor to use. This is useful for situations like using a\nWebSocket impl in Node (WebSocket is a DOM API), or for mocking a WebSocket\nfor testing purposes</p>\n<p>要使用的 WebSocket 构造函数。这对于在 Node 中使用 WebSocket 实现（WebSocket 是一种 DOM API）或模拟 WebSocket 以进行测试等情况很有用</p>\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"binaryType\"></a><code class=\"\">binaryType</code></td>\n        <td><label class=\"property-type-label\"><code>'blob' | 'arraybuffer'</code></label></td>\n        <td>\n          <p>Sets the <code>binaryType</code> property of the underlying WebSocket.</p>\n<p>设置底层 WebSocket 的 <code>binaryType</code> 属性。</p>\n\n          \n          \n        </td>\n      </tr>\n    \n    </tbody>\n  </table>\n</section>\n  \n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/webSocket\n - api/webSocket/WebSocketSubject\n - api/webSocket/webSocket\n-->\n<!-- links from this doc:\n - /api\n - api/index/function/from\n - api/index/function/of\n - api/index/interface/NextObserver\n - api/webSocket\n - api/webSocket/WebSocketSubjectConfig#WebSocketCtor\n - api/webSocket/WebSocketSubjectConfig#binaryType\n - api/webSocket/WebSocketSubjectConfig#closeObserver\n - api/webSocket/WebSocketSubjectConfig#closingObserver\n - api/webSocket/WebSocketSubjectConfig#deserializer\n - api/webSocket/WebSocketSubjectConfig#examples\n - api/webSocket/WebSocketSubjectConfig#openObserver\n - api/webSocket/WebSocketSubjectConfig#protocol\n - api/webSocket/WebSocketSubjectConfig#resultSelector\n - api/webSocket/WebSocketSubjectConfig#serializer\n - api/webSocket/WebSocketSubjectConfig#url\n - api/webSocket/WebSocketSubjectConfig#websocketsubjectconfig\n - api/webSocket/WebSocketSubjectConfig#例子\n - api/webSocket/WebSocketSubjectConfig#属性\n - api/webSocket/webSocket\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/dom/WebSocketSubject.ts?message=docs(webSocket)%3A%20describe%20your%20change...#L8-L198\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/dom/WebSocketSubject.ts#L8-L198\n-->"
}