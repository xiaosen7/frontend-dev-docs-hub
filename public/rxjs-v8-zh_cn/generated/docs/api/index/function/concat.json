{
  "id": "api/index/function/concat",
  "title": "concat",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/concat.ts?message=docs(index)%3A%20describe%20your%20change...#L11-L138\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/concat.ts#L11-L138\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/concat\", \"name\": \"concat\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"concat\">concat<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/concat#concat\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Creates an output Observable which sequentially emits all values from the first given\nObservable and then moves on to the next.</p>\n<p>创建一个输出 Observable，它依次从第一个给定的 Observable 发出所有值，然后移动到下一个。</p>\n<p><span class=\"informal\">Concatenates multiple Observables together by\nsequentially emitting their values, one Observable after the other.</span></p>\n<p><span class=\"informal\">通过依次发出它们的值来挨个串联多个 Observable。</span></p>\n<p><img src=\"/assets/images/marble-diagrams/concat.png\" width=\"100%\" alt=\"concat marble diagram\"></p>\n<p><code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> joins multiple Observables together, by subscribing to them one at a time and\nmerging their results into the output Observable. You can pass either an array of\nObservables, or put them directly as arguments. Passing an empty array will result\nin Observable that completes immediately.</p>\n<p><code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> 会每次订阅一个 Observable 并将其结果合并到输出 Observable 中，来将多个 Observable 串联在一起。你可以传递一个 Observable 数组，也可以将它们直接作为参数。传递一个空数组将导致 Observable 立即完成。</p>\n<p><code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> will subscribe to first input Observable and emit all its values, without\nchanging or affecting them in any way. When that Observable completes, it will\nsubscribe to then next Observable passed and, again, emit its values. This will be\nrepeated, until the operator runs out of Observables. When last input Observable completes,\n<code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> will complete as well. At any given moment only one Observable passed to operator\nemits values. If you would like to emit values from passed Observables concurrently, check out\n<a href=\"api/index/function/merge\"><code>merge</code></a> instead, especially with optional <code>concurrent</code> parameter. As a matter of fact,\n<code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> is an equivalent of <code><a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a></code> operator with <code>concurrent</code> parameter set to <code>1</code>.</p>\n<p><code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> 会订阅第一个输入 Observable 并发出其所有值，而不会以任何方式更改或影响它们。当该 Observable 完成时，它将订阅下一个输入 Observable，并再次发出其值。如此往复，直到操作符用完 Observables。当最后一个输入 Observable 完成时，<code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> 也将完成。在任何给定时刻，只有一个传给操作符的 Observable 会发出值。如果你想同时从传递的 Observable 中发出值，请查看 <a href=\"api/index/function/merge\"><code>merge</code></a>，特别是它的可选参数 <code>concurrent</code>。事实上，<code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> 相当于将 <code>concurrent</code> 参数设置为 <code>1</code> 的 <code><a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a></code> 操作符。</p>\n<p>Note that if some input Observable never completes, <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> will also never complete\nand Observables following the one that did not complete will never be subscribed. On the other\nhand, if some Observable simply completes immediately after it is subscribed, it will be\ninvisible for <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code>, which will just move on to the next Observable.</p>\n<p>请注意，如果某些输入 Observable 永远不会完成，则 <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> 也永远不会完成，并且未完成的 Observable 将永远不会被订阅。另一方面，如果某个 Observable 在订阅后立即完成，那么它对于 <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> 将是不可见的，concat 只会移动到下一个 Observable。</p>\n<p>If any Observable in chain errors, instead of passing control to the next Observable,\n<code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> will error immediately as well. Observables that would be subscribed after\nthe one that emitted error, never will.</p>\n<p>如果此链中的任何一个 Observable 出错，而没有将控制权传给下一个 Observable，<code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> 也会立即出错。在发出错误之后订阅的 Observables 永远不会生效。</p>\n<p>If you pass to <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> the same Observable many times, its stream of values\nwill be \"replayed\" on every subscription, which means you can repeat given Observable\nas many times as you like. If passing the same Observable to <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> 1000 times becomes tedious,\nyou can always use <a href=\"api/index/function/repeat\"><code>repeat</code></a>.</p>\n<p>如果你多次给 <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> 传入同一个 Observable，它的值流将在每个订阅上“重播”，这意味着你可以重复给定的 Observable 任意多次。如果你觉得将同一个 Observable 传给 <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> 1000 次太乏味了，可以改用 <a href=\"api/index/function/repeat\"><code>repeat</code></a>。</p>\n<h2 id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/concat#examples\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/concat#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</p>\n<p>串联一个从 0 到 3 的计时器与从 1 到 10 的同步序列</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>, <a href=\"api/index/function/range\" class=\"code-anchor\">range</a>, <a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a> } from 'rxjs';\n\nconst <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a> = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000).pipe(<a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(4));\nconst sequence = <a href=\"api/index/function/range\" class=\"code-anchor\">range</a>(1, 10);\nconst result = <a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a>(<a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>, sequence);\nresult.subscribe(x => console.log(x));\n\n// results in:\n// 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n</code-example>\n<p>Concatenate 3 Observables</p>\n<p>串联 3 个 Observables</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>, <a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a> } from 'rxjs';\n\nconst timer1 = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000).pipe(<a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(10));\nconst timer2 = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(2000).pipe(<a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(6));\nconst timer3 = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(500).pipe(<a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(10));\n\nconst result = <a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a>(timer1, timer2, timer3);\nresult.subscribe(x => console.log(x));\n\n// results in the following:\n// (Prints to console sequentially)\n// -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n// -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n// -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n</code-example>\n<p>Concatenate the same Observable to repeat it</p>\n<p>串联同一个 Observable 以重复它</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>, <a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a> } from 'rxjs';\n\nconst <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a> = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000).pipe(<a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(2));\n\n<a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a>(<a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>, <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>) // concatenating the same <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>!\n  .subscribe({\n    next: value => console.log(value),\n    complete: () => console.log('...and it is done!')\n  });\n\n// Logs:\n// 0 after 1s\n// 1 after 2s\n// 0 after 3s\n// 1 after 4s\n// '...and it is done!' also after 4s\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a>(...args: any[]): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;unknown></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"args\"></a>\n        <code>args</code>\n      </td>\n      <td class=\"param-type\"><code>any[]</code></td>\n      <td class=\"param-description\">\n      <p>        Input Observables to concatenate.</p>\n<p>要串联的输入 Observables。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;unknown></code></p>\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/concat#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/concatAll\"><code>concatAll</code></a>\n</li>\n    <li><a href=\"api/index/function/concatMap\"><code>concatMap</code></a>\n</li>\n    <li><a href=\"api/index/function/concatMapTo\"><code>concatMapTo</code></a>\n</li>\n    <li><a href=\"api/index/function/startWith\"><code>startWith</code></a>\n</li>\n    <li><a href=\"api/index/function/endWith\"><code>endWith</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - 6-to-7-change-summary\n - api/index\n - api/index/function/concatAll\n - api/index/function/concatMap\n - api/index/function/concatMapTo\n - api/index/function/concatWith\n - api/index/function/endWith\n - api/index/function/onErrorResumeNext\n - api/index/function/onErrorResumeNextWith\n - api/index/function/startWith\n - api/operators/concat\n - api/operators/concatAll\n - api/operators/concatMap\n - api/operators/concatMapTo\n - api/operators/concatWith\n - api/operators/endWith\n - api/operators/startWith\n - deprecations/scheduler-argument\n - guide/core-semantics\n - guide/importing\n - guide/overview\n - guide/scheduler\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable\n - api/index/function/concat#concat\n - api/index/function/concat#examples\n - api/index/function/concat#see-also\n - api/index/function/concat#例子\n - api/index/function/concatAll\n - api/index/function/concatMap\n - api/index/function/concatMapTo\n - api/index/function/endWith\n - api/index/function/interval\n - api/index/function/merge\n - api/index/function/range\n - api/index/function/repeat\n - api/index/function/startWith\n - api/index/function/take\n - api/index/function/timer\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/concat.ts?message=docs(index)%3A%20describe%20your%20change...#L11-L138\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/concat.ts#L11-L138\n-->"
}