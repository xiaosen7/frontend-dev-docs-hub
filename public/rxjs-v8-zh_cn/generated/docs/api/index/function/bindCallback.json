{
  "id": "api/index/function/bindCallback",
  "title": "bindCallback",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/bindCallback.ts?message=docs(index)%3A%20describe%20your%20change...#L17-L186\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/bindCallback.ts#L17-L186\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/bindCallback\", \"name\": \"bindCallback\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"bindcallback\">bindCallback<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindCallback#bindcallback\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Converts a callback API to a function that returns an Observable.</p>\n<p>将回调 API 转换为返回 Observable 的函数。</p>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/bindCallback\" class=\"code-anchor\">bindCallback</a>(callbackFunc: (...args: [...any[], (...res: any) => void]) => void, resultSelector?: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a> | ((...args: any[]) => any), scheduler?: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a>): (...args: any[]) => <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;unknown></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"callbackFunc\"></a>\n        <code>callbackFunc</code>\n      </td>\n      <td class=\"param-type\"><code>(...args: [...any[], (...res: any) => void]) => void</code></td>\n      <td class=\"param-description\">\nn      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"resultSelector\"></a>\n        <code>resultSelector</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a> | ((...args: any[]) => any)</code></td>\n      <td class=\"param-description\">\n              <p>可选。默认值为 <code>undefined</code>。</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"scheduler\"></a>\n        <code>scheduler</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a></code></td>\n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code>undefined</code>。</p>\n<p>        The scheduler on which to schedule the\ncallbacks.</p>\n<p>将用于调度此回调函数的调度器</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code>(...args: any[]) => <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;unknown></code>: A function which returns the\nObservable that delivers the same values the callback would deliver.</p>\n<p>一个返回 Observable 的函数，该 Observable 将发出与回调函数的返回值相同的值。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindCallback#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p><span class=\"informal\">Give it a function <code>f</code> of type <code>f(x, callback)</code> and\nit will return a function <code>g</code> that when called as <code>g(x)</code> will output an\nObservable.</span></p>\n<p><span class=\"informal\">给它一个 <code>f(x, callback)</code> 类型的函数 <code>f</code>，它会返回一个函数 <code>g</code>，当调用 <code>g(x)</code> 时会输出一个 Observable。</span></p>\n<p><code><a href=\"api/index/function/bindCallback\" class=\"code-anchor\">bindCallback</a></code> is not an operator because its input and output are not\nObservables. The input is a function <code>func</code> with some parameters. The\nlast parameter must be a callback function that <code>func</code> calls when it is\ndone.</p>\n<p><code><a href=\"api/index/function/bindCallback\" class=\"code-anchor\">bindCallback</a></code> 不是操作符，因为它的输入和输出不是 Observable。输入是一个带有一些参数的函数 <code>func</code>。最后一个参数必须是供 <code>func</code> 在完成时调用的回调函数。</p>\n<p>The output of <code><a href=\"api/index/function/bindCallback\" class=\"code-anchor\">bindCallback</a></code> is a function that takes the same parameters\nas <code>func</code>, except the last one (the callback). When the output function\nis called with arguments it will return an Observable. If function <code>func</code>\ncalls its callback with one argument, the Observable will emit that value.\nIf on the other hand the callback is called with multiple values the resulting\nObservable will emit an array with said values as arguments.</p>\n<p><code><a href=\"api/index/function/bindCallback\" class=\"code-anchor\">bindCallback</a></code> 的输出是一个函数，它采用与 <code>func</code> 相同的参数，除了最后一个（回调函数）。当使用某些参数调用输出函数时，它将返回一个 Observable。如果函数 <code>func</code> 使用一个参数调用其回调，则 Observable 将发出该值。另一方面，如果使用多个值调用回调，则结果 Observable 将发出一个以所述值作为参数的数组。</p>\n<p>It is <strong>very important</strong> to remember that input function <code>func</code> is not called\nwhen the output function is, but rather when the Observable returned by the output\nfunction is subscribed. This means if <code>func</code> makes an AJAX request, that request\nwill be made every time someone subscribes to the resulting Observable, but not before.</p>\n<p><strong>非常重要</strong>的是要记住，输入函数 <code>func</code> 不是在输出函数时调用，而是在订阅输出函数返回的 Observable 时调用。这意味着如果 <code>func</code> 发出 AJAX 请求，则每当有人订阅生成的 Observable 时都会发出该请求，但之前不会。</p>\n<p>The last optional parameter - <code>scheduler</code> - can be used to control when the call\nto <code>func</code> happens after someone subscribes to Observable, as well as when results\npassed to callback will be emitted. By default, the subscription to an Observable calls <code>func</code>\nsynchronously, but using <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a> as the last parameter will defer the call to <code>func</code>,\njust like wrapping the call in <code>setTimeout</code> with a timeout of <code>0</code> would. If you were to use the async Scheduler\nand call <code>subscribe</code> on the output Observable, all function calls that are currently executing\nwill end before <code>func</code> is invoked.</p>\n<p>最后一个可选参数 - <code>scheduler</code> - 可用于控制当有人订阅 Observable 后何时调用 <code>func</code>，以及何时发出传给回调的结果。默认情况下，订阅 Observable 会同步调用 <code>func</code>，但使用 <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a> 作为最后一个参数将推迟对 <code>func</code> 的调用，就像将调用包装在 <code>setTimeout</code> 中并设置超时时间为 <code>0</code> 一样。如果你要使用异步调度器并在输出 Observable 上调用 <code>subscribe</code>，则当前正在执行的所有函数调用将在调用 <code>func</code> 之前结束。</p>\n<p>By default, results passed to the callback are emitted immediately after <code>func</code> invokes the callback.\nIn particular, if the callback is called synchronously, then the subscription of the resulting Observable\nwill call the <code>next</code> function synchronously as well.  If you want to defer that call,\nyou may use <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a> just as before.  This means that by using <code>Scheduler.async</code> you can\nensure that <code>func</code> always calls its callback asynchronously, thus avoiding terrifying Zalgo.</p>\n<p>默认情况下，传给回调的结果会在 <code>func</code> 调用了回调之后立即发出。特别是，如果同步调用回调，则生成的 Observable 的订阅也将同步调用 <code>next</code> 函数。如果你想推迟那个调用，你可以像以前一样使用 <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a>。这意味着通过使用 <code>Scheduler.async</code>，你可以确保 <code>func</code> 始终异步调用其回调，从而避免某些可怕的故障。</p>\n<p>Note that the Observable created by the output function will always emit a single value\nand then complete immediately. If <code>func</code> calls the callback multiple times, values from subsequent\ncalls will not appear in the stream. If you need to listen for multiple calls,\nyou probably want to use <a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a> or <a href=\"api/index/function/fromEventPattern\"><code>fromEventPattern</code></a> instead.</p>\n<p>请注意，由此输出函数创建的 Observable 将始终发出单个值，然后立即完成。如果 <code>func</code> 多次调用此回调，后续调用的值将不会出现在流中。如果你需要监听多个调用，你可能希望使用 <a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a> 或 <a href=\"api/index/function/fromEventPattern\"><code>fromEventPattern</code></a> 代替。</p>\n<p>If <code>func</code> depends on some context (<code>this</code> property) and is not already bound, the context of <code>func</code>\nwill be the context that the output function has at call time. In particular, if <code>func</code>\nis called as a method of some object and if <code>func</code> is not already bound, in order to preserve the context\nit is recommended that the context of the output function is set to that object as well.</p>\n<p>如果 <code>func</code> 依赖于某个上下文（<code>this</code> 属性）并且尚未绑定，则 <code>func</code> 的上下文将是输出函数在调用时具有的上下文。特别是，如果 <code>func</code> 作为某个对象的方法被调用并且如果 <code>func</code> 尚未绑定，为了保留上下文，建议也将输出函数的上下文设置为该对象。</p>\n<p>If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\noptional error parameter signaling whether the call failed or not), <a href=\"api/index/function/bindNodeCallback\"><code>bindNodeCallback</code></a>\nprovides convenient error handling and probably is a better choice.\n<code><a href=\"api/index/function/bindCallback\" class=\"code-anchor\">bindCallback</a></code> will treat such functions the same as any other and error parameters\n(whether passed or not) will always be interpreted as regular callback argument.</p>\n<p>如果输入函数以“node 风格”调用其回调（即回调的第一个参数是可选的错误参数，指示调用是否失败），<a href=\"api/index/function/bindNodeCallback\"><code>bindNodeCallback</code></a> 可以提供更便利的错误处理，它可能是更好的选择。<code><a href=\"api/index/function/bindCallback\" class=\"code-anchor\">bindCallback</a></code> 会将此类函数视为与任何其它函数相同，并且错误参数（无论是否传递）将始终被解释为常规回调参数。</p>\n<h2 id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindCallback#examples\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindCallback#例子\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"convert-jquerys-getjson-to-an-observable-api\">Convert jQuery's getJSON to an Observable API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindCallback#convert-jquerys-getjson-to-an-observable-api\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"将-jquery-的-getjson-转换为-observable-api\">将 jQuery 的 getJSON 转换为 Observable API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindCallback#将-jquery-的-getjson-转换为-observable-api\"><i class=\"material-icons\">link</i></a></h3>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/bindCallback\" class=\"code-anchor\">bindCallback</a> } from 'rxjs';\nimport * as jQuery <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'jquery';\n\n// Suppose we have jQuery.getJSON('/my/url', callback)\nconst getJSONAsObservable = <a href=\"api/index/function/bindCallback\" class=\"code-anchor\">bindCallback</a>(jQuery.getJSON);\nconst result = getJSONAsObservable('/my/url');\nresult.subscribe(x => console.log(x), e => console.error(e));\n</code-example>\n<h3 id=\"receive-an-array-of-arguments-passed-to-a-callback\">Receive an array of arguments passed to a callback<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindCallback#receive-an-array-of-arguments-passed-to-a-callback\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"接收传给回调的参数数组\">接收传给回调的参数数组<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindCallback#接收传给回调的参数数组\"><i class=\"material-icons\">link</i></a></h3>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/bindCallback\" class=\"code-anchor\">bindCallback</a> } from 'rxjs';\n\nconst someFunction = (cb) => {\n  cb(5, 'some string', {someProperty: 'someValue'})\n};\n\nconst boundSomeFunction = <a href=\"api/index/function/bindCallback\" class=\"code-anchor\">bindCallback</a>(someFunction);\nboundSomeFunction(12, 10).subscribe(values => {\n  console.log(values); // [22, 2]\n});\n</code-example>\n<h3 id=\"compare-behaviour-with-and-without-async-scheduler\">Compare behaviour with and without async Scheduler<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindCallback#compare-behaviour-with-and-without-async-scheduler\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"对比使用和不使用异步调度器的行为\">对比使用和不使用异步调度器的行为<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindCallback#对比使用和不使用异步调度器的行为\"><i class=\"material-icons\">link</i></a></h3>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/bindCallback\" class=\"code-anchor\">bindCallback</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a> } from 'rxjs';\n\nfunction iCallMyCallbackSynchronously(cb) {\n  cb();\n}\n\nconst boundSyncFn = <a href=\"api/index/function/bindCallback\" class=\"code-anchor\">bindCallback</a>(iCallMyCallbackSynchronously);\nconst boundAsyncFn = <a href=\"api/index/function/bindCallback\" class=\"code-anchor\">bindCallback</a>(iCallMyCallbackSynchronously, null, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>);\n\nboundSyncFn().subscribe(() => console.log('I was sync!'));\nboundAsyncFn().subscribe(() => console.log('I was async!'));\nconsole.log('This happened...');\n\n// Logs:\n// I was sync!\n// This happened...\n// I was async!\n</code-example>\n<h3 id=\"use-bindcallback-on-an-object-method\">Use bindCallback on an object method<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindCallback#use-bindcallback-on-an-object-method\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"在对象方法上使用-bindcallback\">在对象方法上使用 bindCallback<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindCallback#在对象方法上使用-bindcallback\"><i class=\"material-icons\">link</i></a></h3>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/bindCallback\" class=\"code-anchor\">bindCallback</a> } from 'rxjs';\n\nconst boundMethod = <a href=\"api/index/function/bindCallback\" class=\"code-anchor\">bindCallback</a>(someObject.methodWithCallback);\nboundMethod\n  .call(someObject) // make sure methodWithCallback has access to someObject\n  .subscribe(subscriber);\n</code-example>\n\n</section>\n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindCallback#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/bindNodeCallback\"><code>bindNodeCallback</code></a>\n</li>\n    <li><a href=\"api/index/function/from\"><code>from</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - api/index/function/bindNodeCallback\n - api/index/function/fromEvent\n - api/index/function/fromEventPattern\n - guide/scheduler\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable\n - api/index/const/asyncScheduler\n - api/index/function/bindCallback#bindcallback\n - api/index/function/bindCallback#compare-behaviour-with-and-without-async-scheduler\n - api/index/function/bindCallback#convert-jquerys-getjson-to-an-observable-api\n - api/index/function/bindCallback#description\n - api/index/function/bindCallback#examples\n - api/index/function/bindCallback#receive-an-array-of-arguments-passed-to-a-callback\n - api/index/function/bindCallback#see-also\n - api/index/function/bindCallback#use-bindcallback-on-an-object-method\n - api/index/function/bindCallback#例子\n - api/index/function/bindCallback#在对象方法上使用-bindcallback\n - api/index/function/bindCallback#对比使用和不使用异步调度器的行为\n - api/index/function/bindCallback#将-jquery-的-getjson-转换为-observable-api\n - api/index/function/bindCallback#接收传给回调的参数数组\n - api/index/function/bindNodeCallback\n - api/index/function/from\n - api/index/function/fromEvent\n - api/index/function/fromEventPattern\n - api/index/interface/SchedulerLike\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/bindCallback.ts?message=docs(index)%3A%20describe%20your%20change...#L17-L186\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/bindCallback.ts#L17-L186\n-->"
}