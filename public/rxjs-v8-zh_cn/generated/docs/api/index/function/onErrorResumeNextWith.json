{
  "id": "api/index/function/onErrorResumeNextWith",
  "title": "onErrorResumeNextWith",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/onErrorResumeNextWith.ts?message=docs(index)%3A%20describe%20your%20change...#L11-L113\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/onErrorResumeNextWith.ts#L11-L113\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/onErrorResumeNextWith\", \"name\": \"onErrorResumeNextWith\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"onerrorresumenextwith\">onErrorResumeNextWith<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/onErrorResumeNextWith#onerrorresumenextwith\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\nthat was passed.</p>\n<p>当所提供的任何 Observable 发出了完成或错误通知时，它会立即订阅下一个传入的通知。</p>\n<p><span class=\"informal\">Execute series of Observables, subscribes to next one on error or complete.</span></p>\n<p><span class=\"informal\">执行一系列 Observable，当出错或完成时订阅下一个。</span></p>\n<p><img src=\"/assets/images/marble-diagrams/onErrorResumeNext.png\" width=\"100%\" alt=\"onErrorResumeNext marble diagram\"></p>\n<p><code><a href=\"api/index/function/onErrorResumeNext\" class=\"code-anchor\">onErrorResumeNext</a></code> is an operator that accepts a series of Observables, provided either directly as\narguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\nas the source.</p>\n<p><code><a href=\"api/index/function/onErrorResumeNext\" class=\"code-anchor\">onErrorResumeNext</a></code> 是一个接受一系列 Observable 的操作符，这些 Observable 可以直接作为参数提供，也可以作为数组提供。如果只提供了一个 Observable，则返回的 Observable 将与源的行为完全相同。</p>\n<p><code><a href=\"api/index/function/onErrorResumeNext\" class=\"code-anchor\">onErrorResumeNext</a></code> returns an Observable that starts by subscribing and re-emitting values from the source Observable.\nWhen its stream of values ends - no matter if Observable completed or emitted an error - <code><a href=\"api/index/function/onErrorResumeNext\" class=\"code-anchor\">onErrorResumeNext</a></code>\nwill subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\nits values as well and - again - when that stream ends, <code><a href=\"api/index/function/onErrorResumeNext\" class=\"code-anchor\">onErrorResumeNext</a></code> will proceed to subscribing yet another\nObservable in provided series, no matter if previous Observable completed or ended with an error. This will\nbe happening until there is no more Observables left in the series, at which point returned Observable will\ncomplete - even if the last subscribed stream ended with an error.</p>\n<p><code><a href=\"api/index/function/onErrorResumeNext\" class=\"code-anchor\">onErrorResumeNext</a></code> 会返回一个 Observable，它从订阅源 Observable 并再次发送其值开始。当它的值流结束时（无论 Observable 是否完成或出错）<code><a href=\"api/index/function/onErrorResumeNext\" class=\"code-anchor\">onErrorResumeNext</a></code> 都将订阅作为参数传给该方法的第一个 Observable。它也将开始重新发送其值，并且当该流结束时，<code><a href=\"api/index/function/onErrorResumeNext\" class=\"code-anchor\">onErrorResumeNext</a></code> 同样会继续订阅提供的系列 Observable 中的下一个，而不管之前的 Observable 是否完成或出错。以此类推，直到系列中没有更多的 Observable 了，结果 Observable 才会完成 —— 即使最后订阅的流是因为出错而结束的。</p>\n<p><code><a href=\"api/index/function/onErrorResumeNext\" class=\"code-anchor\">onErrorResumeNext</a></code> can be therefore thought of as version of <a href=\"api/index/function/concat\"><code>concat</code></a> operator, which is more permissive\nwhen it comes to the errors emitted by its input Observables. While <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> subscribes to the next Observable\nin series only if previous one successfully completed, <code><a href=\"api/index/function/onErrorResumeNext\" class=\"code-anchor\">onErrorResumeNext</a></code> subscribes even if it ended with\nan error.</p>\n<p>因此 <code><a href=\"api/index/function/onErrorResumeNext\" class=\"code-anchor\">onErrorResumeNext</a></code> 可以被认为是 <a href=\"api/index/function/concat\"><code>concat</code></a> 操作符的兄弟版本，不过当其输入 Observables 发送了错误时，它会更加宽容。<code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code> 仅在前一个 Observable 成功完成时才会订阅系列中的下一个 Observable，而 <code><a href=\"api/index/function/onErrorResumeNext\" class=\"code-anchor\">onErrorResumeNext</a></code> 即使它因为出错而结束也会继续订阅。</p>\n<p>Note that you do not get any access to errors emitted by the Observables. In particular do not\nexpect these errors to appear in error callback passed to <a href=\"api/index/class/Observable#subscribe\"><code>Observable</code></a>. If you want to take\nspecific actions based on what error was emitted by an Observable, you should try out <a href=\"api/index/function/catchError\"><code>catchError</code></a> instead.</p>\n<p>请注意，你无法访问这些 Observables 发送的错误。特别是不要期望这些错误出现在传给 <a href=\"api/index/class/Observable#subscribe\"><code>Observable</code></a> 的错误回调中。如果你想根据 Observable 发送的错误采取特定的行动，你应该尝试用 <a href=\"api/index/function/catchError\"><code>catchError</code></a> 来代替。</p>\n<h2 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/onErrorResumeNextWith#example\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/onErrorResumeNextWith#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Subscribe to the next Observable after map fails</p>\n<p>map 失败后订阅下一个 Observable</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/onErrorResumeNext\" class=\"code-anchor\">onErrorResumeNext</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a> } from 'rxjs';\n\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3, 0)\n  .pipe(\n    <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(x => {\n      if (x === 0) {\n        throw Error();\n      }\n\n      return 10 / x;\n    }),\n    <a href=\"api/index/function/onErrorResumeNext\" class=\"code-anchor\">onErrorResumeNext</a>(<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3))\n  )\n  .subscribe({\n    next: val => console.log(val),\n    error: err => console.log(err),          // Will never be called.\n    complete: () => console.log('that\\'s it!')\n  });\n\n// Logs:\n// 10\n// 5\n// 3.3333333333333335\n// 1\n// 2\n// 3\n// 'that's it!'\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/onErrorResumeNextWith\" class=\"code-anchor\">onErrorResumeNextWith</a>&#x3C;T, A extends readonly unknown[]>(...sources: [...ObservableInputTuple&#x3C;A>] | [[...ObservableInputTuple&#x3C;A>]]): <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, T | A[number]></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"sources\"></a>\n        <code>sources</code>\n      </td>\n      <td class=\"param-type\"><code>[...ObservableInputTuple&#x3C;A>] | [[...ObservableInputTuple&#x3C;A>]]</code></td>\n      <td class=\"param-description\">\n      <p>        Observables passed either directly or as an array.</p>\n<p>直接传入或作为数组传入的一些 Observables 。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, T | A[number]></code>: A function that returns an Observable that emits values from source\nObservable, but - if it errors - subscribes to the next passed Observable\nand so on, until it completes or runs out of Observables.</p>\n<p>一个返回 Observable 的函数，该 Observable 会从源 Observable 中发送值，但即使源出错了，它也会订阅传入的下一个 Observable，以此类推，直到它完成或用完这些 Observables。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/onErrorResumeNextWith#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/concat\"><code>concat</code></a>\n</li>\n    <li><a href=\"api/index/function/catchError\"><code>catchError</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/deprecations\n - api/index\n - api/operators/onErrorResumeNext\n - guide/importing\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable#subscribe\n - api/index/function/catchError\n - api/index/function/concat\n - api/index/function/map\n - api/index/function/of\n - api/index/function/onErrorResumeNext\n - api/index/function/onErrorResumeNextWith#example\n - api/index/function/onErrorResumeNextWith#onerrorresumenextwith\n - api/index/function/onErrorResumeNextWith#see-also\n - api/index/function/onErrorResumeNextWith#例子\n - api/index/interface/OperatorFunction\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/onErrorResumeNextWith.ts?message=docs(index)%3A%20describe%20your%20change...#L11-L113\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/onErrorResumeNextWith.ts#L11-L113\n-->"
}