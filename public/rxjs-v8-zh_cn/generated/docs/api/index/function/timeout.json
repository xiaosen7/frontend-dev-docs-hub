{
  "id": "api/index/function/timeout",
  "title": "timeout",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/timeout.ts?message=docs(index)%3A%20describe%20your%20change...#L390-L503\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/timeout.ts#L390-L503\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/timeout\", \"name\": \"timeout\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"timeout\">timeout<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/timeout#timeout\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Errors if Observable does not emit a value in given time span.</p>\n<p>如果 Observable 在给定的时间范围内没有发送值，则会出错。</p>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>&#x3C;T, O extends <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;any>, M>(<a href=\"api/index/const/config\" class=\"code-anchor\">config</a>: number | Date | <a href=\"api/index/interface/TimeoutConfig\" class=\"code-anchor\">TimeoutConfig</a>&#x3C;T, O, M>, schedulerArg?: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a>): <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, T | <a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;O>></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"config\"></a>\n        <code><a href=\"api/index/const/config\" class=\"code-anchor\">config</a></code>\n      </td>\n      <td class=\"param-type\"><code>number | Date | <a href=\"api/index/interface/TimeoutConfig\" class=\"code-anchor\">TimeoutConfig</a>&#x3C;T, O, M></code></td>\n      <td class=\"param-description\">\nn      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"schedulerArg\"></a>\n        <code>schedulerArg</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a></code></td>\n      <td class=\"param-description\">\n              <p>可选。默认值为 <code>undefined</code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, T | <a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;O>></code>: A function that returns an Observable that mirrors behaviour of the\nsource Observable, unless timeout happens when it throws an error.</p>\n<p>返回一个反映源 Observable 行为的 Observable 的函数，除非在抛出错误时发生超时。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/timeout#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p><span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span></p>\n<p><span class=\"informal\">Observable 上的超时不会足够快地发送值。</span></p>\n<p><img src=\"/assets/images/marble-diagrams/timeout.png\" width=\"100%\" alt=\"timeout marble diagram\"></p>\n\n</section>\n\n\n\n<section class=\"overloads\">\n  <h2 id=\"overloads\">重载形式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/timeout#overloads\"><i class=\"material-icons\">link</i></a></h2>\n  <table>\n  \n  <tbody><tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>(<a href=\"api/index/const/config\" class=\"code-anchor\">config</a>: <a href=\"api/index/interface/TimeoutConfig\" class=\"code-anchor\">TimeoutConfig</a>&#x3C;T, O, M> &#x26; { with: (info: <a href=\"api/index/interface/TimeoutInfo\" class=\"code-anchor\">TimeoutInfo</a>&#x3C;T, M>) => O; }): <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, T | <a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;O>></code-example>\n\n\n  <div class=\"short-description\">\n    <p>If <code>with</code> is provided, this will return an observable that will switch to a different observable if the source\ndoes not push values within the specified time parameters.</p>\n<p>如果提供 <code>with</code>，这将返回一个 observable，如果源没有在指定的时间参数内推送值，它将切换到不同的 observable。</p>\n<p><span class=\"informal\">The most flexible option for creating a timeout behavior.</span></p>\n<p><span class=\"informal\">创建超时行为的最灵活选项。</span></p>\n<p>The first thing to know about the configuration is if you do not provide a <code>with</code> property to the configuration,\nwhen timeout conditions are met, this operator will emit a <a href=\"api/index/interface/TimeoutError\"><code>TimeoutError</code></a>. Otherwise, it will use the factory\nfunction provided by <code>with</code>, and switch your subscription to the result of that. Timeout conditions are provided by\nthe settings in <code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code> and <code>each</code>.</p>\n<p>关于配置首先要知道的是，如果你没有为配置提供 <code>with</code> 属性，当满足超时条件时，这个操作符会发送一个 <a href=\"api/index/interface/TimeoutError\"><code>TimeoutError</code></a>。否则，它将使用 <code>with</code> 提供的工厂函数，并将你的订阅切换到该结果。超时条件由 <code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code> 和 <code>each</code> 中的设置提供。</p>\n<p>The <code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code> property can be either a <code>Date</code> for a specific time, a <code>number</code> for a time period relative to the\npoint of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\nthe first value from the source <em>only</em>. The timings of all subsequent values  from the source will be checked\nagainst the time period provided by <code>each</code>, if it was provided.</p>\n<p>第 <code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code> 属性可以是特定时间的 <code>Date</code>、相对于订阅点的时间段的 <code>number</code>，也可以被跳过。此属性<em>仅</em>用于检查来自源的第一个值抵达的超时条件。来自源的所有后续值的时间将根据 <code>each</code> 提供的时间段进行检查（如果提供的话）。</p>\n<p>The <code>each</code> property can be either a <code>number</code> or skipped. If a value for <code>each</code> is provided, it represents the amount of\ntime the resulting observable will wait between the arrival of values from the source before timing out. Note that if\n<code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code> is <em>not</em> provided, the value from <code>each</code> will be used to check timeout conditions for the arrival of the first\nvalue and all subsequent values. If <code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code> <em>is</em> provided, <code>each</code> will only be use to check all values after the first.</p>\n<p><code>each</code> 属性可以是 <code>number</code> 或跳过。如果为 <code>each</code> 提供了一个值，则它表示生成的 observable 在超时之前在源值抵达之间等待的时间量。请注意，如果<em>未</em>提供 <code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code>，则 <code>each</code> 中的值将用于检查第一个值和所有后续值抵达的超时条件。如果提供了 <code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code>，<em> 则 </em><code>each</code> 将仅用于检查第一个之后的所有值。</p>\n<h2 id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/timeout#examples\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/timeout#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Emit a custom error if there is too much time between values</p>\n<p>如果值之间的时间过长，则发送自定义错误</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>, <a href=\"api/index/function/throwError\" class=\"code-anchor\">throwError</a> } from 'rxjs';\n\nclass CustomTimeoutError extends Error {\n  constructor() {\n    super('It was too slow');\n    this.name = 'CustomTimeoutError';\n  }\n}\n\nconst slow$ = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(900);\n\nslow$.pipe(\n  <a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>({\n    each: 1000,\n    with: () => <a href=\"api/index/function/throwError\" class=\"code-anchor\">throwError</a>(() => new CustomTimeoutError())\n  })\n)\n.subscribe({\n  error: console.error\n});\n</code-example>\n<p>Switch to a faster observable if your source is slow.</p>\n<p>如果你的来源很慢，请切换到更快的 observable。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a> } from 'rxjs';\n\nconst slow$ = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(900);\nconst fast$ = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(500);\n\nslow$.pipe(\n  <a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>({\n    each: 1000,\n    with: () => fast$,\n  })\n)\n.subscribe(console.log);\n</code-example>\n\n</div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"config\"></a>\n        <code><a href=\"api/index/const/config\" class=\"code-anchor\">config</a></code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/TimeoutConfig\" class=\"code-anchor\">TimeoutConfig</a>&#x3C;T, O, M> &#x26; { with: (info: <a href=\"api/index/interface/TimeoutInfo\" class=\"code-anchor\">TimeoutInfo</a>&#x3C;T, M>) => O; }</code></td>\n      <td class=\"param-description\">\n      <p>        The configuration for the timeout.</p>\n<p>超时配置。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值-1\">返回值</h4>\n  <p><code><a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, T | <a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;O>></code></p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>(<a href=\"api/index/const/config\" class=\"code-anchor\">config</a>: Omit&#x3C;<a href=\"api/index/interface/TimeoutConfig\" class=\"code-anchor\">TimeoutConfig</a>&#x3C;T, any, M>, \"with\">): <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, T></code-example>\n\n\n  <div class=\"short-description\">\n    <p>Returns an observable that will error or switch to a different observable if the source does not push values\nwithin the specified time parameters.</p>\n<p>如果源没有在指定的时间参数内推送值，则返回一个将出错或切换到不同的 observable 的 observable。</p>\n<p><span class=\"informal\">The most flexible option for creating a timeout behavior.</span></p>\n<p><span class=\"informal\">创建超时行为的最灵活选项。</span></p>\n<p>The first thing to know about the configuration is if you do not provide a <code>with</code> property to the configuration,\nwhen timeout conditions are met, this operator will emit a <a href=\"api/index/interface/TimeoutError\"><code>TimeoutError</code></a>. Otherwise, it will use the factory\nfunction provided by <code>with</code>, and switch your subscription to the result of that. Timeout conditions are provided by\nthe settings in <code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code> and <code>each</code>.</p>\n<p>关于配置首先要知道的是，如果你没有为配置提供 <code>with</code> 属性，当满足超时条件时，这个操作符会发送一个 <a href=\"api/index/interface/TimeoutError\"><code>TimeoutError</code></a>。否则，它将使用 <code>with</code> 提供的工厂函数，并将你的订阅切换到该结果。超时条件由 <code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code> 和 <code>each</code> 中的设置提供。</p>\n<p>The <code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code> property can be either a <code>Date</code> for a specific time, a <code>number</code> for a time period relative to the\npoint of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\nthe first value from the source <em>only</em>. The timings of all subsequent values  from the source will be checked\nagainst the time period provided by <code>each</code>, if it was provided.</p>\n<p>第 <code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code> 属性可以是特定时间的 <code>Date</code>、相对于订阅点的时间段的 <code>number</code>，也可以被跳过。此属性<em>仅</em>用于检查来自源的第一个值抵达的超时条件。来自源的所有后续值的时间将根据 <code>each</code> 提供的时间段进行检查（如果提供的话）。</p>\n<p>The <code>each</code> property can be either a <code>number</code> or skipped. If a value for <code>each</code> is provided, it represents the amount of\ntime the resulting observable will wait between the arrival of values from the source before timing out. Note that if\n<code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code> is <em>not</em> provided, the value from <code>each</code> will be used to check timeout conditions for the arrival of the first\nvalue and all subsequent values. If <code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code> <em>is</em> provided, <code>each</code> will only be use to check all values after the first.</p>\n<p><code>each</code> 属性可以是 <code>number</code> 或跳过。如果为 <code>each</code> 提供了一个值，则它表示生成的 observable 在超时之前在源值抵达之间等待的时间量。请注意，如果<em>未</em>提供 <code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code>，则 <code>each</code> 中的值将用于检查第一个值和所有后续值抵达的超时条件。如果提供了 <code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code>，<em> 则 </em><code>each</code> 将仅用于检查第一个之后的所有值。</p>\n<h3 id=\"handling-timeouterrors\">Handling TimeoutErrors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/timeout#handling-timeouterrors\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"处理超时错误\">处理超时错误<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/timeout#处理超时错误\"><i class=\"material-icons\">link</i></a></h3>\n<p>If no <code>with</code> property was provided, subscriptions to the resulting observable may emit an error of <a href=\"api/index/interface/TimeoutError\"><code>TimeoutError</code></a>.\nThe timeout error provides useful information you can examine when you're handling the error. The most common way to handle\nthe error would be with <a href=\"api/index/function/catchError\"><code>catchError</code></a>, although you could use <a href=\"api/index/function/tap\"><code>tap</code></a> or just the error handler in your <code>subscribe</code> call\ndirectly, if your error handling is only a side effect (such as notifying the user, or logging).</p>\n<p>如果没有 <code>with</code> 属性，订阅结果 observable 可能会发送 <a href=\"api/index/interface/TimeoutError\"><code>TimeoutError</code></a> 错误。超时错误提供了你在处理错误时可以检查的有用信息。处理错误的最常见方法是使用 <a href=\"api/index/function/catchError\"><code>catchError</code></a>，尽管你可以使用 <a href=\"api/index/function/tap\"><code>tap</code></a> 或直接在 <code>subscribe</code> 调用中使用错误处理器，如果你的错误处理只是一个副作用（例如通知用户或日志记录）。</p>\n<p>In this case, you would check the error for <code>instanceof <a href=\"api/index/interface/TimeoutError\" class=\"code-anchor\">TimeoutError</a></code> to validate that the error was indeed from <code><a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a></code>, and\nnot from some other source. If it's not from <code><a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a></code>, you should probably rethrow it if you're in a <code><a href=\"api/index/function/catchError\" class=\"code-anchor\">catchError</a></code>.</p>\n<p>在这种情况下，你将检查 <code>instanceof <a href=\"api/index/interface/TimeoutError\" class=\"code-anchor\">TimeoutError</a></code> 的错误，以验证该错误确实来自 <code><a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a></code>，而不是来自其它来源。如果它不是来自 <code><a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a></code>，那么如果你处于 <code><a href=\"api/index/function/catchError\" class=\"code-anchor\">catchError</a></code> 中，你可能应该重新抛出它。</p>\n<h2 id=\"examples-1\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/timeout#examples-1\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子-1\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/timeout#例子-1\"><i class=\"material-icons\">link</i></a></h2>\n<p>Emit a <a href=\"api/index/interface/TimeoutError\"><code>TimeoutError</code></a> if the first value, and <em>only</em> the first value, does not arrive within 5 seconds</p>\n<p>如果第一个值（并且<em>只有</em>第一个值）在 5 秒内未抵达，则发送 <a href=\"api/index/interface/TimeoutError\"><code>TimeoutError</code></a></p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a> } from 'rxjs';\n\n// A random <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a> that lasts between 0 and 10 seconds per tick\nconst source$ = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(Math.round(Math.random() * 10_000));\n\nsource$.pipe(\n  <a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>({ <a href=\"api/index/function/first\" class=\"code-anchor\">first</a>: 5_000 })\n)\n.subscribe({\n  next: console.log,\n  error: console.error\n});\n</code-example>\n<p>Emit a <a href=\"api/index/interface/TimeoutError\"><code>TimeoutError</code></a> if the source waits longer than 5 seconds between any two values or the first value\nand subscription.</p>\n<p>如果源在任意两个值或第一个值和订阅之间等待超过 5 秒，则发送 <a href=\"api/index/interface/TimeoutError\"><code>TimeoutError</code></a>。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>, <a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>, <a href=\"api/index/function/expand\" class=\"code-anchor\">expand</a> } from 'rxjs';\n\nconst getRandomTime = () => Math.round(Math.random() * 10_000);\n\n// An <a href=\"api/index/const/observable\" class=\"code-anchor\">observable</a> that waits a random amount <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> time between each delivered value\nconst source$ = <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>(getRandomTime())\n  .pipe(<a href=\"api/index/function/expand\" class=\"code-anchor\">expand</a>(() => <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>(getRandomTime())));\n\nsource$\n  .pipe(<a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>({ each: 5_000 }))\n  .subscribe({\n    next: console.log,\n    error: console.error\n  });\n</code-example>\n<p>Emit a <a href=\"api/index/interface/TimeoutError\"><code>TimeoutError</code></a> if the source does not emit before 7 seconds, <em>or</em> if the source waits longer than\n5 seconds between any two values after the first.</p>\n<p>如果源在 7 秒之前没有发送，<em> 或者 </em> 源在第一个值之后的任意两个值之间等待超过 5 秒，则发送 <a href=\"api/index/interface/TimeoutError\"><code>TimeoutError</code></a>。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>, <a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>, <a href=\"api/index/function/expand\" class=\"code-anchor\">expand</a> } from 'rxjs';\n\nconst getRandomTime = () => Math.round(Math.random() * 10_000);\n\n// An <a href=\"api/index/const/observable\" class=\"code-anchor\">observable</a> that waits a random amount <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> time between each delivered value\nconst source$ = <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>(getRandomTime())\n  .pipe(<a href=\"api/index/function/expand\" class=\"code-anchor\">expand</a>(() => <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>(getRandomTime())));\n\nsource$\n  .pipe(<a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>({ <a href=\"api/index/function/first\" class=\"code-anchor\">first</a>: 7_000, each: 5_000 }))\n  .subscribe({\n    next: console.log,\n    error: console.error\n  });\n</code-example>\n\n</div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"config\"></a>\n        <code><a href=\"api/index/const/config\" class=\"code-anchor\">config</a></code>\n      </td>\n      <td class=\"param-type\"><code>Omit&#x3C;<a href=\"api/index/interface/TimeoutConfig\" class=\"code-anchor\">TimeoutConfig</a>&#x3C;T, any, M>, \"with\"></code></td>\n      <td class=\"param-description\">\nn      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值-2\">返回值</h4>\n  <p><code><a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, T></code></p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>(<a href=\"api/index/function/first\" class=\"code-anchor\">first</a>: Date, scheduler?: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a>): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n  <div class=\"short-description\">\n    <p>Returns an observable that will error if the source does not push its first value before the specified time passed as a <code>Date</code>.\nThis is functionally the same as <code><a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>({ <a href=\"api/index/function/first\" class=\"code-anchor\">first</a>: someDate })</code>.</p>\n<p>如果源在作为 <code>Date</code> 传递的指定时间之前未推送其第一个值，则返回一个 observable 将出错。这在功能上与 <code><a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>({ <a href=\"api/index/function/first\" class=\"code-anchor\">first</a>: someDate })</code> 相同。</p>\n<p><span class=\"informal\">Errors if the first value doesn't show up before the given date and time</span></p>\n<p><span class=\"informal\">如果第一个值在给定的日期和时间之前没有出现，则会出错</span></p>\n<p><img src=\"/assets/images/marble-diagrams/timeout.png\" width=\"100%\" alt=\"timeout marble diagram\"></p>\n\n</div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"first\"></a>\n        <code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code>\n      </td>\n      <td class=\"param-type\"><code>Date</code></td>\n      <td class=\"param-description\">\n      <p>        The date to at which the resulting observable will timeout if the source observable\ndoes not emit at least one value.</p>\n<p>如果源 observable 没有发送至少一个值，则结果 observable 将超时的日期。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"scheduler\"></a>\n        <code>scheduler</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a></code></td>\n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code>undefined</code>。</p>\n<p>        The scheduler to use. Defaults to <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a>.</p>\n<p>要使用的调度器。默认为 <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a>。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值-3\">返回值</h4>\n  <p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code></p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>(each: number, scheduler?: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a>): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n  <div class=\"short-description\">\n    <p>Returns an observable that will error if the source does not push a value within the specified time in milliseconds.\nThis is functionally the same as <code><a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>({ each: milliseconds })</code>.</p>\n<p>如果源没有在指定时间内以毫秒为单位推送值，则返回一个将出错的 observable。这在功能上与 <code><a href=\"api/index/function/timeout\" class=\"code-anchor\">timeout</a>({ each: milliseconds })</code> 相同。</p>\n<p><span class=\"informal\">Errors if it waits too long between any value</span></p>\n<p><span class=\"informal\">如果在任何值之间等待太久，则会出错</span></p>\n<p><img src=\"/assets/images/marble-diagrams/timeout.png\" width=\"100%\" alt=\"timeout marble diagram\"></p>\n\n</div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"each\"></a>\n        <code>each</code>\n      </td>\n      <td class=\"param-type\"><code>number</code></td>\n      <td class=\"param-description\">\n      <p>        The time allowed between each pushed value from the source before the resulting observable\nwill timeout.</p>\n<p>在结果 observable 超时之前从源推送的每个值之间允许的时间。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"scheduler\"></a>\n        <code>scheduler</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a></code></td>\n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code>undefined</code>。</p>\n<p>        The scheduler to use. Defaults to <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a>.</p>\n<p>要使用的调度器。默认为 <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a>。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值-4\">返回值</h4>\n  <p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code></p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  </tbody></table>\n</section>\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/timeout#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/timeoutWith\"><code>timeoutWith</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - 6-to-7-change-summary\n - api/ajax/AjaxConfig\n - api/ajax/AjaxRequest\n - api/deprecations\n - api/index\n - api/index/class/Observable\n - api/index/function/firstValueFrom\n - api/index/function/lastValueFrom\n - api/index/function/timeoutWith\n - api/index/interface/TimeoutError\n - api/operators/timeout\n - api/operators/timeoutWith\n - deprecations/to-promise\n - guide/scheduler\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/const/asyncScheduler\n - api/index/const/config\n - api/index/const/observable\n - api/index/function/catchError\n - api/index/function/expand\n - api/index/function/first\n - api/index/function/interval\n - api/index/function/of\n - api/index/function/tap\n - api/index/function/throwError\n - api/index/function/timeout#description\n - api/index/function/timeout#examples\n - api/index/function/timeout#examples-1\n - api/index/function/timeout#handling-timeouterrors\n - api/index/function/timeout#overloads\n - api/index/function/timeout#see-also\n - api/index/function/timeout#timeout\n - api/index/function/timeout#例子\n - api/index/function/timeout#例子-1\n - api/index/function/timeout#处理超时错误\n - api/index/function/timeoutWith\n - api/index/function/timer\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/interface/OperatorFunction\n - api/index/interface/SchedulerLike\n - api/index/interface/TimeoutConfig\n - api/index/interface/TimeoutError\n - api/index/interface/TimeoutInfo\n - api/index/type-alias/ObservableInput\n - api/index/type-alias/ObservedValueOf\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/timeout.ts?message=docs(index)%3A%20describe%20your%20change...#L390-L503\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/timeout.ts#L390-L503\n-->"
}