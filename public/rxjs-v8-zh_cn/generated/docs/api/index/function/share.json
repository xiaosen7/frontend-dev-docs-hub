{
  "id": "api/index/function/share",
  "title": "share",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/share.ts?message=docs(index)%3A%20describe%20your%20change...#L63-L266\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/share.ts#L63-L266\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/share\", \"name\": \"share\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"share\">share<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/share#share\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\nSubscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\nunsubscribe from the source Observable. Because the Observable is multicasting it makes the stream <code>hot</code>.\nThis is an alias for <code><a href=\"api/index/function/multicast\" class=\"code-anchor\">multicast</a>(() => new <a href=\"api/index/class/Subject\" class=\"code-anchor\">Subject</a>()), refCount()</code>.</p>\n<p>返回一个多播（共享）原始 Observable 的新 Observable。只要至少有一个订阅者，这个 Observable 就会被订阅并发送数据。当所有订阅者都退订后，它将退订源 Observable。因为 Observable 正在多播，所以它会使流变热 <code>hot</code>。这是 <code><a href=\"api/index/function/multicast\" class=\"code-anchor\">multicast</a>(() => new <a href=\"api/index/class/Subject\" class=\"code-anchor\">Subject</a>()), refCount()</code> 的别名。</p>\n<p>The subscription to the underlying source Observable can be reset (unsubscribe and resubscribe for new subscribers),\nif the subscriber count to the shared observable drops to 0, or if the source Observable errors or completes. It is\npossible to use notifier factories for the resets to allow for behaviors like conditional or delayed resets. Please\nnote that resetting on error or complete of the source Observable does not behave like a transparent retry or restart\nof the source because the error or complete will be forwarded to all subscribers and their subscription will be\nclosed. Only new subscribers after a reset on error or complete happened will cause a fresh subscription to the\nsource. To achieve transparent retries or restarts pipe the source through appropriate operators before sharing.</p>\n<p>如果共享 observable 的订阅者计数降至 0，或者源 Observable 已出错或完成，则会重置对底层源 Observable 的订阅（退订并为新的订阅者重新订阅）。可以使用通知工厂进行重置，以支持有条件重置或延迟重置等行为。请注意，当源 Observable 出错或完成时进行重置的行为和透明重试或重新启动源是不同的，因为出错或完成将被转发给所有订阅者并且他们的订阅将被关闭。只有在出错或完成引起的重置后出现的新订阅者才会重新订阅此源。为了实现透明的重试或重启动，在共享之前要通过适当的操作符对源进行管道传输。</p>\n<p><img src=\"/assets/images/marble-diagrams/share.png\" width=\"100%\" alt=\"share marble diagram\"></p>\n<h2 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/share#example\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/share#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Generate new multicast Observable from the <code>source</code> Observable value</p>\n<p>从 <code>source</code> Observable 值生成新的多播 Observable</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>, <a href=\"api/index/function/share\" class=\"code-anchor\">share</a> } from 'rxjs';\n\nconst source = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000).pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(x => console.log('Processing: ', x)),\n  <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(x => x * x),\n  <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(6),\n  <a href=\"api/index/function/share\" class=\"code-anchor\">share</a>()\n);\n\nsource.subscribe(x => console.log('subscription 1: ', x));\nsource.subscribe(x => console.log('subscription 2: ', x));\n\n// Logs:\n// Processing: 0\n// subscription 1: 0\n// subscription 2: 0\n// Processing: 1\n// subscription 1: 1\n// subscription 2: 1\n// Processing: 2\n// subscription 1: 4\n// subscription 2: 4\n// Processing: 3\n// subscription 1: 9\n// subscription 2: 9\n// Processing: 4\n// subscription 1: 16\n// subscription 2: 16\n// Processing: 5\n// subscription 1: 25\n// subscription 2: 25\n</code-example>\n<h2 id=\"example-with-notifier-factory-delayed-reset\">Example with notifier factory: Delayed reset<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/share#example-with-notifier-factory-delayed-reset\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"通知器工厂示例延迟重置\">通知器工厂示例：延迟重置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/share#通知器工厂示例延迟重置\"><i class=\"material-icons\">link</i></a></h2>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>, <a href=\"api/index/function/share\" class=\"code-anchor\">share</a>, <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a> } from 'rxjs';\n\nconst source = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000).pipe(\n  <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(3),\n  <a href=\"api/index/function/share\" class=\"code-anchor\">share</a>({\n    resetOnRefCountZero: () => <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>(1000)\n  })\n);\n\nconst subscriptionOne = source.subscribe(x => console.log('subscription 1: ', x));\nsetTimeout(() => subscriptionOne.unsubscribe(), 1300);\n\nsetTimeout(() => source.subscribe(x => console.log('subscription 2: ', x)), 1700);\n\nsetTimeout(() => source.subscribe(x => console.log('subscription 3: ', x)), 5000);\n\n// Logs:\n// subscription 1:  0\n// (subscription 1 unsubscribes here)\n// (subscription 2 subscribes here ~400ms later, source was not reset)\n// subscription 2:  1\n// subscription 2:  2\n// (subscription 2 unsubscribes here)\n// (subscription 3 subscribes here ~2000ms later, source did reset before)\n// subscription 3:  0\n// subscription 3:  1\n// subscription 3:  2\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/share\" class=\"code-anchor\">share</a>&#x3C;T>(options: <a href=\"api/index/interface/ShareConfig\" class=\"code-anchor\">ShareConfig</a>&#x3C;T> = {}): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"options\"></a>\n        <code>options</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/ShareConfig\" class=\"code-anchor\">ShareConfig&#x3C;T></a></code></td>\n      <td class=\"param-description\">\n              <p>可选。默认值为 <code>{}</code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable that mirrors the source.</p>\n<p>一个函数，会返回源的镜像 Observable。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/share#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/shareReplay\"><code>shareReplay</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/deprecations\n - api/index\n - api/index/class/ConnectableObservable\n - api/index/function/animationFrames\n - api/index/function/connect\n - api/index/function/multicast\n - api/index/function/publish\n - api/index/function/publishBehavior\n - api/index/function/publishLast\n - api/index/function/publishReplay\n - api/index/function/refCount\n - api/index/function/shareReplay\n - api/operators/publishBehavior\n - api/operators/publishLast\n - api/operators/refCount\n - api/operators/share\n - deprecations/multicasting\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Subject\n - api/index/function/interval\n - api/index/function/map\n - api/index/function/multicast\n - api/index/function/share#example\n - api/index/function/share#example-with-notifier-factory-delayed-reset\n - api/index/function/share#see-also\n - api/index/function/share#share\n - api/index/function/share#例子\n - api/index/function/share#通知器工厂示例延迟重置\n - api/index/function/shareReplay\n - api/index/function/take\n - api/index/function/tap\n - api/index/function/timer\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/interface/ShareConfig\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/share.ts?message=docs(index)%3A%20describe%20your%20change...#L63-L266\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/share.ts#L63-L266\n-->"
}