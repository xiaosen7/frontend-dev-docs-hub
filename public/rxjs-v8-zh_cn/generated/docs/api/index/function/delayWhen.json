{
  "id": "api/index/function/delayWhen",
  "title": "delayWhen",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/delayWhen.ts?message=docs(index)%3A%20describe%20your%20change...#L21-L127\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/delayWhen.ts#L21-L127\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/delayWhen\", \"name\": \"delayWhen\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"delaywhen\">delayWhen<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/delayWhen#delaywhen\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Delays the emission of items from the source Observable by a given time span\ndetermined by the emissions of another Observable.</p>\n<p>将源 Observable 中条目的发送时机延迟给定的时间跨度，该时间跨度取决于另一个 Observable 的发送时间。</p>\n<p><span class=\"informal\">It's like <a href=\"api/index/function/delay\"><code>delay</code></a>, but the time span of the\ndelay duration is determined by a second Observable.</span></p>\n<p><span class=\"informal\">类似于 <a href=\"api/index/function/delay\"><code>delay</code></a>，但延迟持续时间的时间跨度由第二个 Observable 决定。</span></p>\n<p><img src=\"/assets/images/marble-diagrams/delayWhen.png\" width=\"100%\" alt=\"delayWhen marble diagram\"></p>\n<p><code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> operator shifts each emitted value from the source Observable by\na time span determined by another Observable. When the source emits a value,\nthe <code>delayDurationSelector</code> function is called with the value emitted from\nthe source Observable as the first argument to the <code>delayDurationSelector</code>.\nThe <code>delayDurationSelector</code> function should return an <a href=\"api/index/type-alias/ObservableInput\"><code>ObservableInput</code></a>,\nthat is internally converted to an Observable that is called the \"duration\"\nObservable.</p>\n<p>The source value is emitted on the output Observable only when the \"duration\"\nObservable emits (<a href=\"guide/glossary-and-semantics#next\">next</a>s) any value.\nUpon that, the \"duration\" Observable gets unsubscribed.</p>\n<p>Before RxJS V7, the <a href=\"guide/glossary-and-semantics#complete\">completion</a>\nof the \"duration\" Observable would have been triggering the emission of the\nsource value to the output Observable, but with RxJS V7, this is not the case\nanymore.</p>\n<p>Only next notifications (from the \"duration\" Observable) trigger values from\nthe source Observable to be passed to the output Observable. If the \"duration\"\nObservable only emits the complete notification (without next), the value\nemitted by the source Observable will never get to the output Observable - it\nwill be swallowed. If the \"duration\" Observable errors, the error will be\npropagated to the output Observable.</p>\n<p><code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> 将每个从源 Observable 发送的值延迟一段时间，这个时间跨度由另一个 Observable 决定。当源发送一个值时，就会以源值作为参数调用 <code>delayDurationSelector</code> 函数，并返回一个 Observable，即 “duration”（持续时间） Observable。只有当持续时间 Observable 发出一个值或完成通知时，源值才会在输出 Observable 上发送。以通知器的完成来触发源值的发送是已弃用的行为，将在未来的版本中删除。</p>\n<p>Optionally, <code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> takes a second argument, <code>subscriptionDelay</code>, which\nis an Observable. When <code>subscriptionDelay</code> emits its first value or\ncompletes, the source Observable is subscribed to and starts behaving like\ndescribed in the previous paragraph. If <code>subscriptionDelay</code> is not provided,\n<code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> will subscribe to the source Observable as soon as the output\nObservable is subscribed.</p>\n<p><code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> 接受第二个可选参数 <code>subscriptionDelay</code>，它是一个 Observable。当 <code>subscriptionDelay</code> 发出它的第一个值或完成通知时，源 Observable 就会被订阅并开始像上一段中描述的那样行动。如果未提供 <code>subscriptionDelay</code>，则 <code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> 将在输出 Observable 被订阅后立即订阅源 Observable。</p>\n<h2 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/delayWhen#example\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/delayWhen#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Delay each click by a random amount of time, between 0 and 5 seconds</p>\n<p>将每次点击延迟随机的时间量，介于 0 到 5 秒之间</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a>, <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a> } from 'rxjs';\n\nconst clicks = <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click');\nconst delayedClicks = clicks.pipe(\n  <a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a>(() => <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(Math.random() * 5000))\n);\ndelayedClicks.subscribe(x => console.log(x));\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a>&#x3C;T>(delayDurationSelector: (value: T, index: number) => <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;any>, subscriptionDelay?: <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;any>): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"delayDurationSelector\"></a>\n        <code>delayDurationSelector</code>\n      </td>\n      <td class=\"param-type\"><code>(value: T, index: number) => <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;any></code></td>\n      <td class=\"param-description\">\n      <p>        A function that returns an <code><a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a></code> for\neach <code>value</code> emitted by the source Observable, which is then used to delay the\nemission of that <code>value</code> on the output Observable until the <code><a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a></code>\nreturned from this function emits a next value. When called, beside <code>value</code>,\nthis function receives a zero-based <code>index</code> of the emission order.</p>\n<p>一个函数，它会为源 Observable 发送的每个值返回一个 Observable，然后用于推迟该条目在输出 Observable 上的发送，直到从该函数返回的 Observable 发送一个值。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"subscriptionDelay\"></a>\n        <code>subscriptionDelay</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;any></code></td>\n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code>undefined</code>。</p>\n<p>        An Observable that triggers the subscription to the\nsource Observable once it emits any value.</p>\n<p>一个 Observable，一旦它发送任何值，就会触发对源 Observable 的订阅。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable that delays the emissions of\nthe source Observable by an amount of time specified by the Observable\nreturned by <code>delayDurationSelector</code>.</p>\n<p>一个返回 Observable 的函数，该 Observable 会将源 Observable 发出的值进行延迟，其时长由 <code>delayDurationSelector</code> 返回的 Observable 决定。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/delayWhen#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/delay\"><code>delay</code></a>\n</li>\n    <li><a href=\"api/index/function/throttle\"><code>throttle</code></a>\n</li>\n    <li><a href=\"api/index/function/throttleTime\"><code>throttleTime</code></a>\n</li>\n    <li><a href=\"api/index/function/debounce\"><code>debounce</code></a>\n</li>\n    <li><a href=\"api/index/function/debounceTime\"><code>debounceTime</code></a>\n</li>\n    <li><a href=\"api/index/function/sample\"><code>sample</code></a>\n</li>\n    <li><a href=\"api/index/function/sampleTime\"><code>sampleTime</code></a>\n</li>\n    <li><a href=\"api/index/function/audit\"><code>audit</code></a>\n</li>\n    <li><a href=\"api/index/function/auditTime\"><code>auditTime</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - 6-to-7-change-summary\n - api/index\n - api/index/function/audit\n - api/index/function/delay\n - api/index/function/retryWhen\n - api/index/function/throttle\n - api/operators/delayWhen\n - api/operators/retryWhen\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable\n - api/index/function/audit\n - api/index/function/auditTime\n - api/index/function/debounce\n - api/index/function/debounceTime\n - api/index/function/delay\n - api/index/function/delayWhen#delaywhen\n - api/index/function/delayWhen#example\n - api/index/function/delayWhen#see-also\n - api/index/function/delayWhen#例子\n - api/index/function/fromEvent\n - api/index/function/interval\n - api/index/function/sample\n - api/index/function/sampleTime\n - api/index/function/throttle\n - api/index/function/throttleTime\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/type-alias/ObservableInput\n - guide/glossary-and-semantics#complete\n - guide/glossary-and-semantics#next\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/delayWhen.ts?message=docs(index)%3A%20describe%20your%20change...#L21-L127\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/delayWhen.ts#L21-L127\n-->"
}