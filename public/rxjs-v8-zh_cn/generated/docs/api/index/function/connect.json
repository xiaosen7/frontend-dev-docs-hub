{
  "id": "api/index/function/connect",
  "title": "connect",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/connect.ts?message=docs(index)%3A%20describe%20your%20change...#L34-L137\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/connect.ts#L34-L137\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/connect\", \"name\": \"connect\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"connect\">connect<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/connect#connect\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Creates an observable by multicasting the source within a function that\nallows the developer to define the usage of the multicast prior to connection.</p>\n<p>在一个函数中创建多播源，以创建 Observable。该函数能让开发人员在连接之前定义多播的用法。</p>\n<p>This is particularly useful if the observable source you wish to multicast could\nbe synchronous or asynchronous. This sets it apart from <a href=\"api/index/function/share\"><code>share</code></a>, which, in the\ncase of totally synchronous sources will fail to share a single subscription with\nmultiple consumers, as by the time the subscription to the result of <a href=\"api/index/function/share\"><code>share</code></a>\nhas returned, if the source is synchronous its internal reference count will jump from\n0 to 1 back to 0 and reset.</p>\n<p>如果你要进行多播的可观察源既可能是同步也可能是异步的，这就特别有用。这让它有别于 <a href=\"api/index/function/share\"><code>share</code></a>，后者在完全同步源的情况下，将无法让多个消费者共享单个订阅，因为当对 <a href=\"api/index/function/share\"><code>share</code></a> 结果的订阅已返回时，如果源是同步的，它的内部引用计数就会从 0 跳到 1 再回到 0 并复位。</p>\n<p>To use <code><a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a></code>, you provide a <code>selector</code> function that will give you\na multicast observable that is not yet connected. You then use that multicast observable\nto create a resulting observable that, when subscribed, will set up your multicast. This is\ngenerally, but not always, accomplished with <a href=\"api/index/function/merge\"><code>merge</code></a>.</p>\n<p>要使用 <code><a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a></code>，你需要提供一个 <code>selector</code> 函数，该函数将为你提供一个尚未连接的多播 observable。然后，你使用该多播 observable 创建一个结果 observable，当订阅它时，将建立多播。这通常会（但并非总是）通过 <a href=\"api/index/function/merge\"><code>merge</code></a> 来完成。</p>\n<p>Note that using a <a href=\"api/index/function/takeUntil\"><code>takeUntil</code></a> inside of <code><a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a></code>'s <code>selector</code> <em>might</em> mean you were looking\nto use the <a href=\"api/index/function/takeWhile\"><code>takeWhile</code></a> operator instead.</p>\n<p>请注意，在 <code><a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a></code> 的 <code>selector</code> 中使用 <a href=\"api/index/function/takeUntil\"><code>takeUntil</code></a> <em>可能</em> 意味着你该使用 <a href=\"api/index/function/takeWhile\"><code>takeWhile</code></a> 操作符。</p>\n<p>When you subscribe to the result of <code><a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a></code>, the <code>selector</code> function will be called. After\nthe <code>selector</code> function returns, the observable it returns will be subscribed to, <em>then</em> the\nmulticast will be connected to the source.</p>\n<p>当你订阅 <code><a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a></code> 的结果时，将调用 <code>selector</code> 函数。<code>selector</code> 函数返回后，它返回的 observable 将被订阅，<em>然后</em>就会把多播连接到源。</p>\n<h2 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/connect#example\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/connect#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Sharing a totally synchronous observable</p>\n<p>共享一个完全同步的 observable</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>, <a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a>, <a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>, <a href=\"api/index/function/filter\" class=\"code-anchor\">filter</a> } from 'rxjs';\n\nconst source$ = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3, 4, 5).pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>({\n    subscribe: () => console.log('subscription started'),\n    next: n => console.log(`source emitted ${ n }`)\n  })\n);\n\nsource$.pipe(\n  // Notice in here we're merging 3 subscriptions to `shared$`.\n  <a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a>(shared$ => <a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a>(\n    shared$.pipe(<a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(n => `all ${ n }`)),\n    shared$.pipe(<a href=\"api/index/function/filter\" class=\"code-anchor\">filter</a>(n => n % 2 === 0), <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(n => `even ${ n }`)),\n    shared$.pipe(<a href=\"api/index/function/filter\" class=\"code-anchor\">filter</a>(n => n % 2 === 1), <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(n => `odd ${ n }`))\n  ))\n)\n.subscribe(console.log);\n\n// Expected output: (notice only one subscription)\n'subscription started'\n'source emitted 1'\n'all 1'\n'odd 1'\n'source emitted 2'\n'all 2'\n'even 2'\n'source emitted 3'\n'all 3'\n'odd 3'\n'source emitted 4'\n'all 4'\n'even 4'\n'source emitted 5'\n'all 5'\n'odd 5'\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a>&#x3C;T, O extends <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;unknown>>(selector: (shared: <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T>) => O, <a href=\"api/index/const/config\" class=\"code-anchor\">config</a>: <a href=\"api/index/interface/ConnectConfig\" class=\"code-anchor\">ConnectConfig</a>&#x3C;T> = DEFAULT_CONFIG): <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, <a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;O>></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"selector\"></a>\n        <code>selector</code>\n      </td>\n      <td class=\"param-type\"><code>(shared: <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T>) => O</code></td>\n      <td class=\"param-description\">\n      <p>        A function used to set up the multicast. Gives you a multicast observable\nthat is not yet connected. With that, you're expected to create and return\nand Observable, that when subscribed to, will utilize the multicast observable.\nAfter this function is executed -- and its return value subscribed to -- the\noperator will subscribe to the source, and the connection will be made.</p>\n<p>用于建立多播的函数。它会为你提供尚未连接的多播 observable。有了它，你应该创建并返回 Observable，当订阅它时，它将使用多播 observable。在这个函数被执行之后（并且它的返回值已被订阅），该操作符将订阅源，并且建立连接。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"config\"></a>\n        <code><a href=\"api/index/const/config\" class=\"code-anchor\">config</a></code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/ConnectConfig\" class=\"code-anchor\">ConnectConfig&#x3C;T></a></code></td>\n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code>DEFAULT_CONFIG</code>。</p>\n<p>        The configuration object for <code><a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a></code>.</p>\n<p><code><a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a></code> 的配置对象。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, <a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;O>></code></p>\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/deprecations\n - api/index\n - api/index/class/ConnectableObservable\n - api/index/function/connectable\n - api/index/function/multicast\n - api/index/function/publish\n - api/index/function/publishReplay\n - api/index/interface/ConnectConfig\n - api/index/interface/Connectable\n - api/operators/connect\n - api/operators/multicast\n - deprecations/multicasting\n - guide/subject\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable\n - api/index/const/config\n - api/index/function/connect#connect\n - api/index/function/connect#example\n - api/index/function/connect#例子\n - api/index/function/filter\n - api/index/function/map\n - api/index/function/merge\n - api/index/function/of\n - api/index/function/share\n - api/index/function/takeUntil\n - api/index/function/takeWhile\n - api/index/function/tap\n - api/index/interface/ConnectConfig\n - api/index/interface/OperatorFunction\n - api/index/type-alias/ObservableInput\n - api/index/type-alias/ObservedValueOf\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/connect.ts?message=docs(index)%3A%20describe%20your%20change...#L34-L137\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/connect.ts#L34-L137\n-->"
}