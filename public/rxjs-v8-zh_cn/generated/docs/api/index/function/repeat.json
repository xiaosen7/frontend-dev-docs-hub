{
  "id": "api/index/function/repeat",
  "title": "repeat",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/repeat.ts?message=docs(index)%3A%20describe%20your%20change...#L29-L211\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/repeat.ts#L29-L211\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/repeat\", \"name\": \"repeat\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"repeat\">repeat<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/repeat#repeat\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Returns an Observable that will resubscribe to the source stream when the source stream completes.</p>\n<p>返回一个 Observable，它将在源流完成时重新订阅源流。</p>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a>&#x3C;T>(countOrConfig?: number | <a href=\"api/index/interface/RepeatConfig\" class=\"code-anchor\">RepeatConfig</a>): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"countOrConfig\"></a>\n        <code>countOrConfig</code>\n      </td>\n      <td class=\"param-type\"><code>number | <a href=\"api/index/interface/RepeatConfig\" class=\"code-anchor\">RepeatConfig</a></code></td>\n      <td class=\"param-description\">\n              <p>可选。默认值为 <code>undefined</code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code></p>\n\n  \n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/repeat#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p><span class=\"informal\">Repeats all values emitted on the source. It's like <a href=\"api/index/function/retry\"><code>retry</code></a>, but for non error cases.</span></p>\n<p><span class=\"informal\">重复源上发送的所有值。这就像 <a href=\"api/index/function/retry\"><code>retry</code></a>，但只针对无错的情况。</span></p>\n<p><img src=\"/assets/images/marble-diagrams/repeat.png\" width=\"100%\" alt=\"repeat marble diagram\"></p>\n<p>Repeat will output values from a source until the source completes, then it will resubscribe to the\nsource a specified number of times, with a specified delay. Repeat can be particularly useful in\ncombination with closing operators like <a href=\"api/index/function/take\"><code>take</code></a>, <a href=\"api/index/function/takeUntil\"><code>takeUntil</code></a>, <a href=\"api/index/function/first\"><code>first</code></a>, or <a href=\"api/index/function/takeWhile\"><code>takeWhile</code></a>,\nas it can be used to restart a source again from scratch.</p>\n<p>repeat 将从源输出一些值，直到源完成，然后它将按指定的次数重新订阅源，并具有指定的延迟。repeat 一般会与 <a href=\"api/index/function/take\"><code>take</code></a>、<a href=\"api/index/function/takeUntil\"><code>takeUntil</code></a>、<a href=\"api/index/function/first\"><code>first</code></a> 或 <a href=\"api/index/function/takeWhile\"><code>takeWhile</code></a> 等关闭操作符结合使用，因为它可用于从头开始重新启动源。</p>\n<p>Repeat is very similar to <a href=\"api/index/function/retry\"><code>retry</code></a>, where <a href=\"api/index/function/retry\"><code>retry</code></a> will resubscribe to the source in the error case, but\n<code><a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a></code> will resubscribe if the source completes.</p>\n<p>repeat 与 <a href=\"api/index/function/retry\"><code>retry</code></a> 非常相似，不过 <a href=\"api/index/function/retry\"><code>retry</code></a> 会在出错的情况下重新订阅源，而 <code><a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a></code> 会在源完成的情况下重新订阅。</p>\n<p>Note that <code><a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a></code> will <em>not</em> catch errors. Use <a href=\"api/index/function/retry\"><code>retry</code></a> for that.</p>\n<p>请注意，<code><a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a></code> <em>不会</em> 捕获错误。如果要捕获，请使用 <a href=\"api/index/function/retry\"><code>retry</code></a>。</p>\n<ul>\n<li>\n<p><code><a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a>(0)</code> returns an empty observable</p>\n<p><code><a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a>(0)</code> 返回一个空的 observable</p>\n</li>\n<li>\n<p><code><a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a>()</code> will repeat forever</p>\n<p><code><a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a>()</code> 将永远重复</p>\n</li>\n<li>\n<p><code><a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a>({ <a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>: 200 })</code> will repeat forever, with a delay of 200ms between repetitions.</p>\n<p><code><a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a>({ <a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>: 200 })</code> 将永远重复，每次重复之间有 200ms 的延迟。</p>\n</li>\n<li>\n<p><code><a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a>({ <a href=\"api/index/function/count\" class=\"code-anchor\">count</a>: 2, <a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>: 400 })</code> will repeat twice, with a delay of 400ms between repetitions.</p>\n<p><code><a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a>({ <a href=\"api/index/function/count\" class=\"code-anchor\">count</a>: 2, <a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>: 400 })</code> 将重复两次，每次重复之间有 400ms 的延迟。</p>\n</li>\n<li>\n<p><code><a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a>({ <a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>: (<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>) => <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>(<a href=\"api/index/function/count\" class=\"code-anchor\">count</a> * 1000) })</code> will repeat forever, but will have a delay that grows by one second for each repetition.</p>\n<p><code><a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a>({ <a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>: (<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>) => <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>(<a href=\"api/index/function/count\" class=\"code-anchor\">count</a> * 1000) })</code> 将永远重复，但每次重复都会增加一秒的延迟。</p>\n</li>\n</ul>\n<h2 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/repeat#example\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/repeat#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Repeat a message stream</p>\n<p>重复某个消息流</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a> } from 'rxjs';\n\nconst source = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('Repeat message');\nconst result = source.pipe(<a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a>(3));\n\nresult.subscribe(x => console.log(x));\n\n// Results\n// 'Repeat message'\n// 'Repeat message'\n// 'Repeat message'\n</code-example>\n<p>Repeat 3 values, 2 times</p>\n<p>重复 3 个值，2 次</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>, <a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a> } from 'rxjs';\n\nconst source = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000);\nconst result = source.pipe(<a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(3), <a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a>(2));\n\nresult.subscribe(x => console.log(x));\n\n// Results <a href=\"api/index/function/every\" class=\"code-anchor\">every</a> second\n// 0\n// 1\n// 2\n// 0\n// 1\n// 2\n</code-example>\n<p>Defining two complex repeats with delays on the same source.\nNote that the second repeat cannot be called until the first\nrepeat as exhausted it's count.</p>\n<p>在同一个源上定义两个自带延迟的复杂重复。请注意，在第一次重复用尽它的计数之前，不会调用第二次重复。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/defer\" class=\"code-anchor\">defer</a>, <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a> } from 'rxjs';\n\nconst source = <a href=\"api/index/function/defer\" class=\"code-anchor\">defer</a>(() => {\n   return <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(`Hello, it is ${new Date()}`)\n});\n\nsource.pipe(\n   // Repeat 3 times with a <a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a> <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> 1 second between repetitions\n   <a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a>({\n     <a href=\"api/index/function/count\" class=\"code-anchor\">count</a>: 3,\n     <a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>: 1000,\n   }),\n\n   // *Then* <a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a> forever, but with an exponential step-back\n   // maxing out at 1 minute.\n   <a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a>({\n     <a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>: (<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>) => <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>(Math.min(60000, 2 ^ <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> * 1000))\n   })\n)\n</code-example>\n\n</section>\n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/repeat#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/repeatWhen\"><code>repeatWhen</code></a>\n</li>\n    <li><a href=\"api/index/function/retry\"><code>retry</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/deprecations\n - api/index\n - api/index/function/catchError\n - api/index/function/concat\n - api/index/function/repeatWhen\n - api/index/function/retryWhen\n - api/operators/repeat\n - api/operators/repeatWhen\n - api/operators/retryWhen\n - deprecations/breaking-changes\n - guide/testing/marble-testing\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/function/count\n - api/index/function/defer\n - api/index/function/delay\n - api/index/function/every\n - api/index/function/first\n - api/index/function/interval\n - api/index/function/of\n - api/index/function/repeat#description\n - api/index/function/repeat#example\n - api/index/function/repeat#repeat\n - api/index/function/repeat#see-also\n - api/index/function/repeat#例子\n - api/index/function/repeatWhen\n - api/index/function/retry\n - api/index/function/take\n - api/index/function/takeUntil\n - api/index/function/takeWhile\n - api/index/function/timer\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/interface/RepeatConfig\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/repeat.ts?message=docs(index)%3A%20describe%20your%20change...#L29-L211\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/repeat.ts#L29-L211\n-->"
}