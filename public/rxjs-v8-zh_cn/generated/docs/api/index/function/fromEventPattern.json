{
  "id": "api/index/function/fromEventPattern",
  "title": "fromEventPattern",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/fromEventPattern.ts?message=docs(index)%3A%20describe%20your%20change...#L16-L189\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/fromEventPattern.ts#L16-L189\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/fromEventPattern\", \"name\": \"fromEventPattern\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"fromeventpattern\">fromEventPattern<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/fromEventPattern#fromeventpattern\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Creates an Observable from an arbitrary API for registering event handlers.</p>\n<p>从要注册事件处理器的任意 API 创建一个 Observable。</p>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a>&#x3C;T>(addHandler: (handler: NodeEventHandler) => any, removeHandler?: (handler: NodeEventHandler, signal?: any) => void, resultSelector?: (...args: any[]) => T): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T | T[]></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"addHandler\"></a>\n        <code>addHandler</code>\n      </td>\n      <td class=\"param-type\"><code>(handler: NodeEventHandler) => any</code></td>\n      <td class=\"param-description\">\n      <p>        A function that takes\na <code>handler</code> function as argument and attaches it somehow to the actual\nsource of events.</p>\n<p>以 <code>handler</code> 函数为参数并以某种方式将其附加到实际事件源的函数。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"removeHandler\"></a>\n        <code>removeHandler</code>\n      </td>\n      <td class=\"param-type\"><code>(handler: NodeEventHandler, signal?: any) => void</code></td>\n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code>undefined</code>。</p>\n<p>        A function that\ntakes a <code>handler</code> function as an argument and removes it from the event source. If <code>addHandler</code>\nreturns some kind of token, <code>removeHandler</code> function will have it as a second parameter.</p>\n<p>一个以 <code>handler</code> 函数为参数的函数，用于将其从事件源中删除。如果 <code>addHandler</code> 返回了某种令牌，则 <code>removeHandler</code> 函数会将它作为第二个参数。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"resultSelector\"></a>\n        <code>resultSelector</code>\n      </td>\n      <td class=\"param-type\"><code>(...args: any[]) => T</code></td>\n      <td class=\"param-description\">\n              <p>可选。默认值为 <code>undefined</code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T | T[]></code>: Observable which, when an event happens, emits first parameter\npassed to registered event handler. Alternatively it emits whatever project function returns\nat that moment.</p>\n<p>一个 Observable，当事件发生时，它会发送第一个参数传给注册的事件处理器。或者，它会发送当时任何投影函数的返回值。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/fromEventPattern#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p><span class=\"informal\">When that method for adding event handler was something <a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a>\nwas not prepared for.</span></p>\n<p><span class=\"informal\">当要用 <a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a> 尚未支持的某个方法添加事件处理器时。</span></p>\n<p><img src=\"/assets/images/marble-diagrams/fromEventPattern.png\" width=\"100%\" alt=\"fromEventPattern marble diagram\"></p>\n<p><code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> allows you to convert into an Observable any API that supports registering handler functions\nfor events. It is similar to <a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a>, but far\nmore flexible. In fact, all use cases of <a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a> could be easily handled by\n<code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> (although in slightly more verbose way).</p>\n<p><code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> 允许你将任何支持注册事件处理函数的 API 转换为 Observable。它类似于 <a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a>，但更加灵活。事实上，<a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a> 的所有用例都可以通过 <code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> 轻松处理（尽管此方式稍微啰嗦一些）。</p>\n<p>This operator accepts as a first argument an <code>addHandler</code> function, which will be injected with\nhandler parameter. That handler is actually an event handler function that you now can pass\nto API expecting it. <code>addHandler</code> will be called whenever Observable\nreturned by the operator is subscribed, so registering handler in API will not\nnecessarily happen when <code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> is called.</p>\n<p>该操作符会接受 <code>addHandler</code> 函数作为第一个参数，处理器的参数会传给该函数。该处理器实际上是一个事件处理器函数，你现在可以将其传给想要它的 API。<code>addHandler</code> 会在操作符返回的 Observable 被订阅时调用，因此当调用 <code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> 时不一定会在 API 中注册处理器。</p>\n<p>After registration, every time an event that we listen to happens,\nObservable returned by <code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> will emit value that event handler\nfunction was called with. Note that if event handler was called with more\nthan one argument, second and following arguments will not appear in the Observable.</p>\n<p>注册后，每当发生了我们要监听的事件时，<code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> 返回的 Observable 都会发送事件处理函数收到的参数值。请注意，如果使用多个参数调用事件处理器，则第二个和后续参数将不会出现在 Observable 中。</p>\n<p>If API you are using allows to unregister event handlers as well, you can pass to <code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code>\nanother function - <code>removeHandler</code> - as a second parameter. It will be injected\nwith the same handler function as before, which now you can use to unregister\nit from the API. <code>removeHandler</code> will be called when consumer of resulting Observable\nunsubscribes from it.</p>\n<p>如果你使用的 API 也允许取消注册事件处理器，你可以将另一个函数 - <code>removeHandler</code> - 作为第二个参数传给 <code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code>。它将注入到与以前相同的处理器函数中，现在你可以用此 API 取消注册它。当结果 Observable 的消费者退订时，就会调用 <code>removeHandler</code>。</p>\n<p>In some APIs unregistering is actually handled differently. Method registering an event handler\nreturns some kind of token, which is later used to identify which function should\nbe unregistered or it itself has method that unregisters event handler.\nIf that is the case with your API, make sure token returned\nby registering method is returned by <code>addHandler</code>. Then it will be passed\nas a second argument to <code>removeHandler</code>, where you will be able to use it.</p>\n<p>在某些 API 中，取消注册的处理方式实际上有所不同。注册事件处理器的方法返回某种标记，该标记稍后用于识别应该取消注册的函数，或者它本身具有取消注册事件处理器的方法。如果你的 API 是这种情况，请确保注册方法返回的令牌会由 <code>addHandler</code> 返回。然后它将作为第二个参数传给 <code>removeHandler</code>，这样就可以了。</p>\n<p>If you need access to all event handler parameters (not only the first one),\nor you need to transform them in any way, you can call <code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> with optional\nthird parameter - project function which will accept all arguments passed to\nevent handler when it is called. Whatever is returned from project function will appear on\nresulting stream instead of usual event handlers first argument. This means\nthat default project can be thought of as function that takes its first parameter\nand ignores the rest.</p>\n<p>如果你需要访问所有事件处理器参数（不仅是第一个），或者你需要以任何方式转换它们，你可以使用可选的第三个参数调用 <code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> - 投影函数，它将接受传给事件处理器的所有参数。从投影函数返回的任何内容都将出现在结果流上，而不是通常的事件处理器的第一个参数。这意味着可以将默认投影函数视为接受其第一个参数并忽略其余参数的函数。</p>\n<h2 id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/fromEventPattern#examples\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/fromEventPattern#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Emits clicks happening on the DOM document</p>\n<p>发送在 DOM 文档上发生的点击</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a> } from 'rxjs';\n\nfunction addClickHandler(handler) {\n  document.addEventListener('click', handler);\n}\n\nfunction removeClickHandler(handler) {\n  document.removeEventListener('click', handler);\n}\n\nconst clicks = <a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a>(\n  addClickHandler,\n  removeClickHandler\n);\nclicks.subscribe(x => console.log(x));\n\n// Whenever you click anywhere in the browser, DOM MouseEvent\n// object will be logged.\n</code-example>\n<p>Use with API that returns cancellation token</p>\n<p>与返回取消令牌的 API 一起使用</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a> } from 'rxjs';\n\nconst token = someAPI.registerEventHandler(function() {});\nsomeAPI.unregisterEventHandler(token); // this APIs cancellation method accepts\n                                       // not handler itself, but special token.\n\nconst someAPIObservable = <a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a>(\n  function(handler) { return someAPI.registerEventHandler(handler); }, // Note that we return the token here...\n  function(handler, token) { someAPI.unregisterEventHandler(token); }  // ...to then use it here.\n);\n</code-example>\n<p>Use with project function</p>\n<p>与投影函数一起使用</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a> } from 'rxjs';\n\nsomeAPI.registerEventHandler((eventType, eventMessage) => {\n  console.log(eventType, eventMessage); // Logs 'EVENT_TYPE' 'EVENT_MESSAGE' to console.\n});\n\nconst someAPIObservable = <a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a>(\n  handler => someAPI.registerEventHandler(handler),\n  handler => someAPI.unregisterEventHandler(handler)\n  (eventType, eventMessage) => eventType + ' --- ' + eventMessage // without that function only 'EVENT_TYPE'\n);                                                                // would be emitted by the <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>\n\nsomeAPIObservable.subscribe(value => console.log(value));\n\n// Logs:\n// 'EVENT_TYPE --- EVENT_MESSAGE'\n</code-example>\n\n</section>\n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/fromEventPattern#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a>\n</li>\n    <li><a href=\"api/index/function/bindCallback\"><code>bindCallback</code></a>\n</li>\n    <li><a href=\"api/index/function/bindNodeCallback\"><code>bindNodeCallback</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - api/index/function/bindCallback\n - api/index/function/bindNodeCallback\n - api/index/function/from\n - api/index/function/fromEvent\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable\n - api/index/function/bindCallback\n - api/index/function/bindNodeCallback\n - api/index/function/fromEvent\n - api/index/function/fromEventPattern#description\n - api/index/function/fromEventPattern#examples\n - api/index/function/fromEventPattern#fromeventpattern\n - api/index/function/fromEventPattern#see-also\n - api/index/function/fromEventPattern#例子\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/fromEventPattern.ts?message=docs(index)%3A%20describe%20your%20change...#L16-L189\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/fromEventPattern.ts#L16-L189\n-->"
}