{
  "id": "api/index/function/generate",
  "title": "generate",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/generate.ts?message=docs(index)%3A%20describe%20your%20change...#L436-L488\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/generate.ts#L436-L488\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/generate\", \"name\": \"generate\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"generate\">generate<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/generate#generate\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a>&#x3C;T, S>(initialStateOrOptions: S | GenerateOptions&#x3C;T, S>, condition?: ConditionFunc&#x3C;S>, iterate?: IterateFunc&#x3C;S>, resultSelectorOrScheduler?: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a> | ResultFunc&#x3C;S, T>, scheduler?: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a>): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"initialStateOrOptions\"></a>\n        <code>initialStateOrOptions</code>\n      </td>\n      <td class=\"param-type\"><code>S | GenerateOptions&#x3C;T, S></code></td>\n      <td class=\"param-description\">\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"condition\"></a>\n        <code>condition</code>\n      </td>\n      <td class=\"param-type\"><code>ConditionFunc&#x3C;S></code></td>\n      <td class=\"param-description\">\n              <p>可选。默认值为 <code>undefined</code>。</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"iterate\"></a>\n        <code>iterate</code>\n      </td>\n      <td class=\"param-type\"><code>IterateFunc&#x3C;S></code></td>\n      <td class=\"param-description\">\n              <p>可选。默认值为 <code>undefined</code>。</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"resultSelectorOrScheduler\"></a>\n        <code>resultSelectorOrScheduler</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a> | ResultFunc&#x3C;S, T></code></td>\n      <td class=\"param-description\">\n              <p>可选。默认值为 <code>undefined</code>。</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"scheduler\"></a>\n        <code>scheduler</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a></code></td>\n      <td class=\"param-description\">\n              <p>可选。默认值为 <code>undefined</code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable&#x3C;T></a></code></p>\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n<section class=\"overloads\">\n  <h2 id=\"overloads\">重载形式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/generate#overloads\"><i class=\"material-icons\">link</i></a></h2>\n  <table>\n  \n  <tbody><tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading deprecated-api-item\"> <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a>(initialState: S, condition: ConditionFunc&#x3C;S>, iterate: IterateFunc&#x3C;S>, resultSelector: ResultFunc&#x3C;S, T>, scheduler?: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a>): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T></code-example>\n\n\n  <div class=\"short-description\">\n    <p>Generates an observable sequence by running a state-driven loop\nproducing the sequence's elements, using the specified scheduler\nto send out observer messages.</p>\n<p>通过运行一个状态驱动的循环来生成一个 Observable 序列，该循环会使用指定的调度器向 Observer 发送消息来产生序列元素。</p>\n<p><img src=\"/assets/images/marble-diagrams/generate.png\" width=\"100%\" alt=\"generate marble diagram\"></p>\n<h2 id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/generate#examples\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/generate#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Produces sequence of numbers</p>\n<p>产生数字序列</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a> } from 'rxjs';\n\nconst result = <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a>(0, x => x &#x3C; 3, x => x + 1, x => x);\n\nresult.subscribe(x => console.log(x));\n\n// Logs:\n// 0\n// 1\n// 2\n</code-example>\n<p>Use <code><a href=\"api/index/const/asapScheduler\" class=\"code-anchor\">asapScheduler</a></code></p>\n<p>使用 <code><a href=\"api/index/const/asapScheduler\" class=\"code-anchor\">asapScheduler</a></code></p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a>, <a href=\"api/index/const/asapScheduler\" class=\"code-anchor\">asapScheduler</a> } from 'rxjs';\n\nconst result = <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a>(1, x => x &#x3C; 5, x => x * 2, x => x + 1, <a href=\"api/index/const/asapScheduler\" class=\"code-anchor\">asapScheduler</a>);\n\nresult.subscribe(x => console.log(x));\n\n// Logs:\n// 2\n// 3\n// 5\n</code-example>\n\n</div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"initialState\"></a>\n        <code>initialState</code>\n      </td>\n      <td class=\"param-type\"><code>S</code></td>\n      <td class=\"param-description\">\n      <p>        Initial state.</p>\n<p>初始状态。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"condition\"></a>\n        <code>condition</code>\n      </td>\n      <td class=\"param-type\"><code>ConditionFunc&#x3C;S></code></td>\n      <td class=\"param-description\">\n      <p>        Condition to terminate generation (upon returning false).</p>\n<p>终止生成的条件（返回 false 时）。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"iterate\"></a>\n        <code>iterate</code>\n      </td>\n      <td class=\"param-type\"><code>IterateFunc&#x3C;S></code></td>\n      <td class=\"param-description\">\n      <p>        Iteration step function.</p>\n<p>迭代阶跃（step）函数。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"resultSelector\"></a>\n        <code>resultSelector</code>\n      </td>\n      <td class=\"param-type\"><code>ResultFunc&#x3C;S, T></code></td>\n      <td class=\"param-description\">\n      <p>        Selector function for results produced in the sequence. (deprecated)</p>\n<p>序列中产生的结果的选择器函数。（已弃用）</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"scheduler\"></a>\n        <code>scheduler</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a></code></td>\n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code>undefined</code>。</p>\n<p>        A <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> on which to run the generator loop. If not provided, defaults to emit immediately.</p>\n<p>用来运行生成器循环的调度器类似物。如果未提供，则默认立即发送。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值-1\">返回值</h4>\n  <p><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable&#x3C;T></a></code>: The generated sequence.</p>\n<p>已生成的序列。</p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading deprecated-api-item\"> <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a>(initialState: S, condition: ConditionFunc&#x3C;S>, iterate: IterateFunc&#x3C;S>, scheduler?: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a>): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;S></code-example>\n\n\n  <div class=\"short-description\">\n    <p>Generates an Observable by running a state-driven loop\nthat emits an element on each iteration.</p>\n<p>通过运行一个状态驱动的循环来生成一个 Observable，该循环会在每次迭代时发送一个元素。</p>\n<p><span class=\"informal\">Use it instead of nexting values in a for loop.</span></p>\n<p><span class=\"informal\">使用它代替 for 循环中的下一个值。</span></p>\n<p><img src=\"/assets/images/marble-diagrams/generate.png\" width=\"100%\" alt=\"generate marble diagram\"></p>\n<p><code><a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a></code> allows you to create a stream of values generated with a loop very similar to\na traditional for loop. The first argument of <code><a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a></code> is a beginning value. The second argument\nis a function that accepts this value and tests if some condition still holds. If it does,\nthen the loop continues, if not, it stops. The third value is a function which takes the\npreviously defined value and modifies it in some way on each iteration. Note how these three parameters\nare direct equivalents of three expressions in a traditional for loop: the first expression\ninitializes some state (for example, a numeric index), the second tests if the loop can perform the next\niteration (for example, if the index is lower than 10) and the third states how the defined value\nwill be modified on every step (for example, the index will be incremented by one).</p>\n<p><code><a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a></code> 允许你创建一个由和传统 for 循环非常相似的循环生成的值流。<code><a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a></code> 的第一个参数是一个初始值。第二个参数是一个接受此值并测试某些条件是否仍然成立的函数。如果是，则循环继续，如果不是，则停止。第三个值是一个函数，它采用先前定义的值并在每次迭代时以某种方式对其进行修改。请注意，这三个参数直接等价于传统 for 循环中的三个表达式：第一个表达式初始化某个状态（例如，数字序号），第二个表达式测试循环是否可以执行下一次迭代（例如，如果序号小于 10），第三个说明如何在每一步修改定义的值（例如，序号将增加 1）。</p>\n<p>Return value of a <code><a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a></code> operator is an Observable that on each loop iteration\nemits a value. First of all, the condition function is ran. If it returns true, then the Observable\nemits the currently stored value (initial value at the first iteration) and finally updates\nthat value with iterate function. If at some point the condition returns false, then the Observable\ncompletes at that moment.</p>\n<p><code><a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a></code> 操作符的返回值是一个 Observable，它会在每次循环迭代时发送一个值。首先，运行条件函数。如果它返回 true，那么 Observable 会发送当前存储的值（第一次迭代时的初始值），最后使用迭代函数更新该值。如果在某个时候条件返回 false，则 Observable 就会在那一刻完成。</p>\n<p>Optionally you can pass a fourth parameter to <code><a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a></code> - a result selector function which allows you\nto immediately map the value that would normally be emitted by an Observable.</p>\n<p>你可以给 <code><a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a></code> 传递第四个可选参数 - 结果选择器函数，它允许你立即映射通常由 Observable 发送的值。</p>\n<p>If you find three anonymous functions in <code><a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a></code> call hard to read, you can provide\na single object to the operator instead where the object has the properties: <code>initialState</code>,\n<code>condition</code>, <code>iterate</code> and <code>resultSelector</code>, which should have respective values that you\nwould normally pass to <code><a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a></code>. <code>resultSelector</code> is still optional, but that form\nof calling <code><a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a></code> allows you to omit <code>condition</code> as well. If you omit it, that means\ncondition always holds, or in other words the resulting Observable will never complete.</p>\n<p>如果你在 <code><a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a></code> 调用中发现三个匿名函数难以阅读，你可以改为向操作符提供一个对象，该对象具有以下属性： <code>initialState</code>、<code>condition</code>、<code>iterate</code> 和 <code>resultSelector</code>，它们应该具有你通常传给 <code><a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a></code> 的相应值. <code>resultSelector</code> 仍然是可选的，但调用 <code><a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a></code> 的这种形式也允许你省略 <code>condition</code>。如果省略它，则意味着条件始终成立，换言之，生成的 Observable 永远不会完成。</p>\n<p>Both forms of <code><a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a></code> can optionally accept a scheduler. In case of a multi-parameter call,\nscheduler simply comes as a last argument (no matter if there is a <code>resultSelector</code>\nfunction or not). In case of a single-parameter call, you can provide it as a\n<code>scheduler</code> property on the object passed to the operator. In both cases, a scheduler decides when\nthe next iteration of the loop will happen and therefore when the next value will be emitted\nby the Observable. For example, to ensure that each value is pushed to the Observer\non a separate task in the event loop, you could use the <code>async</code> scheduler. Note that\nby default (when no scheduler is passed) values are simply emitted synchronously.</p>\n<p>这两种形式的 <code><a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a></code> 都可以选择接受一个调度器。在多参数调用的情况下，调度器只能作为最后一个参数出现（无论是否有 <code>resultSelector</code> 函数）。在单参数调用的情况下，你可以将其作为参数对象的 <code>scheduler</code> 属性传给操作符。在这两种情况下，调度器都会决定下一次循环迭代何时发生，也就是下一个值将何时由 Observable 发送。例如，要确保在事件循环中的单独任务上把每个值推送到 Observer，你可以使用 <code>async</code> 调度器。请注意，默认情况下（当没有传递调度器时）这些值只会同步发送。</p>\n<h2 id=\"examples-1\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/generate#examples-1\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子-1\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/generate#例子-1\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use with condition and iterate functions</p>\n<p>与条件和迭代函数一起使用</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a> } from 'rxjs';\n\nconst result = <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a>(0, x => x &#x3C; 3, x => x + 1);\n\nresult.subscribe({\n  next: value => console.log(value),\n  complete: () => console.log('Complete!')\n});\n\n// Logs:\n// 0\n// 1\n// 2\n// 'Complete!'\n</code-example>\n<p>Use with condition, iterate and resultSelector functions</p>\n<p>与条件、迭代和结果选择函数一起使用</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a> } from 'rxjs';\n\nconst result = <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a>(0, x => x &#x3C; 3, x => x + 1, x => x * 1000);\n\nresult.subscribe({\n  next: value => console.log(value),\n  complete: () => console.log('Complete!')\n});\n\n// Logs:\n// 0\n// 1000\n// 2000\n// 'Complete!'\n</code-example>\n<p>Use with options object</p>\n<p>与选项对象一起使用</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a> } from 'rxjs';\n\nconst result = <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a>({\n  initialState: 0,\n  condition(value) { return value &#x3C; 3; },\n  iterate(value) { return value + 1; },\n  resultSelector(value) { return value * 1000; }\n});\n\nresult.subscribe({\n  next: value => console.log(value),\n  complete: () => console.log('Complete!')\n});\n\n// Logs:\n// 0\n// 1000\n// 2000\n// 'Complete!'\n</code-example>\n<p>Use options object without condition function</p>\n<p>使用不带条件函数的选项对象</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a> } from 'rxjs';\n\nconst result = <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a>({\n  initialState: 0,\n  iterate(value) { return value + 1; },\n  resultSelector(value) { return value * 1000; }\n});\n\nresult.subscribe({\n  next: value => console.log(value),\n  complete: () => console.log('Complete!') // This will never run\n});\n\n// Logs:\n// 0\n// 1000\n// 2000\n// 3000\n// ...and never stops.\n</code-example>\n\n</div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"initialState\"></a>\n        <code>initialState</code>\n      </td>\n      <td class=\"param-type\"><code>S</code></td>\n      <td class=\"param-description\">\n      <p>        Initial state.</p>\n<p>初始状态。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"condition\"></a>\n        <code>condition</code>\n      </td>\n      <td class=\"param-type\"><code>ConditionFunc&#x3C;S></code></td>\n      <td class=\"param-description\">\n      <p>        Condition to terminate generation (upon returning false).</p>\n<p>终止生成的条件（返回 false 时）。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"iterate\"></a>\n        <code>iterate</code>\n      </td>\n      <td class=\"param-type\"><code>IterateFunc&#x3C;S></code></td>\n      <td class=\"param-description\">\n      <p>        Iteration step function.</p>\n<p>迭代阶跃（step）函数。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"scheduler\"></a>\n        <code>scheduler</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a></code></td>\n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code>undefined</code>。</p>\n<p>        A <a href=\"api/index/class/Scheduler\"><code>Scheduler</code></a> on which to run the generator loop. If not provided, defaults to emitting immediately.</p>\n<p>用来运行生成器循环的调度器类似物。如果未提供，则默认为立即发送。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值-2\">返回值</h4>\n  <p><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;S></code>: The generated sequence.</p>\n<p>已生成的序列。</p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a>(options: GenerateBaseOptions&#x3C;S>): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;S></code-example>\n\n\n  <div class=\"short-description\">\n    <p>Generates an observable sequence by running a state-driven loop\nproducing the sequence's elements, using the specified scheduler\nto send out observer messages.\nThe overload accepts options object that might contain initial state, iterate,\ncondition and scheduler.</p>\n<p>通过运行一个状态驱动的循环来生成 Observable 序列，该循环会产生元素序列，并使用指定的调度器向 Observer 发送消息。此重载接受可能包含初始状态、迭代、条件和调度器的选项对象。</p>\n<p><img src=\"/assets/images/marble-diagrams/generate.png\" width=\"100%\" alt=\"generate marble diagram\"></p>\n<h2 id=\"examples-2\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/generate#examples-2\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子-2\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/generate#例子-2\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use options object with condition function</p>\n<p>使用带有条件函数的选项对象</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a> } from 'rxjs';\n\nconst result = <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a>({\n  initialState: 0,\n  condition: x => x &#x3C; 3,\n  iterate: x => x + 1\n});\n\nresult.subscribe({\n  next: value => console.log(value),\n  complete: () => console.log('Complete!')\n});\n\n// Logs:\n// 0\n// 1\n// 2\n// 'Complete!'\n</code-example>\n\n</div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"options\"></a>\n        <code>options</code>\n      </td>\n      <td class=\"param-type\"><code>GenerateBaseOptions&#x3C;S></code></td>\n      <td class=\"param-description\">\n      <p>        Object that must contain initialState, iterate and might contain condition and scheduler.</p>\n<p>必须包含初始状态、迭代，并可能包含条件和调度器的对象。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值-3\">返回值</h4>\n  <p><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;S></code>: The generated sequence.</p>\n<p>已生成的序列。</p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a>(options: GenerateOptions&#x3C;T, S>): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T></code-example>\n\n\n  <div class=\"short-description\">\n    <p>Generates an observable sequence by running a state-driven loop\nproducing the sequence's elements, using the specified scheduler\nto send out observer messages.\nThe overload accepts options object that might contain initial state, iterate,\ncondition, result selector and scheduler.</p>\n<p>通过运行一个状态驱动的循环来生成一个 Observable 序列，该循环会产生元素序列，使用指定的调度器发送 Observer 消息。重载接受可能包含初始状态、迭代、条件、结果选择器和调度器的选项对象。</p>\n<p><img src=\"/assets/images/marble-diagrams/generate.png\" width=\"100%\" alt=\"generate marble diagram\"></p>\n<h2 id=\"examples-3\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/generate#examples-3\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子-3\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/generate#例子-3\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use options object with condition and iterate function</p>\n<p>使用带有条件和迭代功能的选项对象</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a> } from 'rxjs';\n\nconst result = <a href=\"api/index/function/generate\" class=\"code-anchor\">generate</a>({\n  initialState: 0,\n  condition: x => x &#x3C; 3,\n  iterate: x => x + 1,\n  resultSelector: x => x\n});\n\nresult.subscribe({\n  next: value => console.log(value),\n  complete: () => console.log('Complete!')\n});\n\n// Logs:\n// 0\n// 1\n// 2\n// 'Complete!'\n</code-example>\n\n</div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"options\"></a>\n        <code>options</code>\n      </td>\n      <td class=\"param-type\"><code>GenerateOptions&#x3C;T, S></code></td>\n      <td class=\"param-description\">\n      <p>        Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.</p>\n<p>必须包含 initialState、iterate、resultSelector 并且可能包含条件和调度器的对象。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值-4\">返回值</h4>\n  <p><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable&#x3C;T></a></code>: The generated sequence.</p>\n<p>已生成的序列。</p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  </tbody></table>\n</section>\n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable\n - api/index/class/Scheduler\n - api/index/const/asapScheduler\n - api/index/function/generate#examples\n - api/index/function/generate#examples-1\n - api/index/function/generate#examples-2\n - api/index/function/generate#examples-3\n - api/index/function/generate#generate\n - api/index/function/generate#overloads\n - api/index/function/generate#例子\n - api/index/function/generate#例子-1\n - api/index/function/generate#例子-2\n - api/index/function/generate#例子-3\n - api/index/interface/SchedulerLike\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/generate.ts?message=docs(index)%3A%20describe%20your%20change...#L436-L488\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/generate.ts#L436-L488\n-->"
}