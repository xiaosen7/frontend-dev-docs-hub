{
  "id": "api/index/function/using",
  "title": "using",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/using.ts?message=docs(index)%3A%20describe%20your%20change...#L5-L67\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/using.ts#L5-L67\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/using\", \"name\": \"using\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"using\">using<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/using#using\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Creates an Observable that uses a resource which will be disposed at the same time as the Observable.</p>\n<p>创建一个使用资源的 Observable，该资源将与 Observable 同时释放。</p>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/using\" class=\"code-anchor\">using</a>&#x3C;T extends <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;any>>(resourceFactory: () => void | <a href=\"api/index/interface/Unsubscribable\" class=\"code-anchor\">Unsubscribable</a>, observableFactory: (resource: void | <a href=\"api/index/interface/Unsubscribable\" class=\"code-anchor\">Unsubscribable</a>) => void | T): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;<a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;T>></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"resourceFactory\"></a>\n        <code>resourceFactory</code>\n      </td>\n      <td class=\"param-type\"><code>() => void | <a href=\"api/index/interface/Unsubscribable\" class=\"code-anchor\">Unsubscribable</a></code></td>\n      <td class=\"param-description\">\n      <p>        A function which creates any resource object\nthat implements <code>unsubscribe</code> method.</p>\n<p>创建任何实现了 <code>unsubscribe</code> 方法的资源对象的函数。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"observableFactory\"></a>\n        <code>observableFactory</code>\n      </td>\n      <td class=\"param-type\"><code>(resource: void | <a href=\"api/index/interface/Unsubscribable\" class=\"code-anchor\">Unsubscribable</a>) => void | T</code></td>\n      <td class=\"param-description\">\n      <p>        A function which\ncreates an Observable, that can use injected resource object.</p>\n<p>一个创建 Observable 的函数，它可以使用注入的资源对象。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;<a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;T>></code>: An Observable that behaves the same as Observable returned by <code>observableFactory</code>, but\nwhich - when completed, errored or unsubscribed - will also call <code>unsubscribe</code> on created resource object.</p>\n<p>一个行为与 <code>observableFactory</code> 返回的 Observable 相同的 Observable，但是当它完成、出错或退订时，也会在所创建的资源对象上调用 <code>unsubscribe</code>。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/using#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p><span class=\"informal\">Use it when you catch yourself cleaning up after an Observable.</span></p>\n<p><span class=\"informal\">当你发现自己要在 Observable 之后进行清理时使用它。</span></p>\n<p><code><a href=\"api/index/function/using\" class=\"code-anchor\">using</a></code> is a factory operator, which accepts two functions. First function returns a disposable resource.\nIt can be an arbitrary object that implements <code>unsubscribe</code> method. Second function will be injected with\nthat object and should return an Observable. That Observable can use resource object during its execution.\nBoth functions passed to <code><a href=\"api/index/function/using\" class=\"code-anchor\">using</a></code> will be called every time someone subscribes - neither an Observable nor\nresource object will be shared in any way between subscriptions.</p>\n<p><code><a href=\"api/index/function/using\" class=\"code-anchor\">using</a></code> 是一个工厂操作符，它接受两个函数。第一个函数返回一个可释放资源。它可以是实现了 <code>unsubscribe</code> 方法的任意对象。该对象将传给第二个函数，并且该函数要返回一个 Observable。该 Observable 可以在执行期间使用此资源对象。每次有人订阅时，都将调用传给 <code><a href=\"api/index/function/using\" class=\"code-anchor\">using</a></code> 的两个函数 - Observable 和资源对象都不会在订阅之间以任何方式共享。</p>\n<p>When Observable returned by <code><a href=\"api/index/function/using\" class=\"code-anchor\">using</a></code> is subscribed, Observable returned from the second function will be subscribed\nas well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output\nObservable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,\nthe <code>unsubscribe</code> method on resource object will be called. This can be used to do any necessary clean up, which\notherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone\ncancels subscription to an Observable via <code>unsubscribe</code>, so <code><a href=\"api/index/function/using\" class=\"code-anchor\">using</a></code> can be used as a hook, allowing you to make\nsure that all resources which need to exist during an Observable execution will be disposed at appropriate time.</p>\n<p>当 <code><a href=\"api/index/function/using\" class=\"code-anchor\">using</a></code> 返回的 Observable 被订阅时，第二个函数返回的 Observable 也会被订阅。它的所有通知（下一个值、完成和错误事件）都将由输出 Observable 发送而不会发生什么变化。但是，如果有人退订 Observable，或者源 Observable 本身已完成或出错，则将调用资源对象上的 <code>unsubscribe</code> 方法。这可用于进行任何必要的清理，否则必须手动处理。请注意，当有人通过 <code>unsubscribe</code> 退订 Observable 时，不会发送完成或错误通知，因此 <code><a href=\"api/index/function/using\" class=\"code-anchor\">using</a></code> 可以用作挂钩，让你可以确保在 Observable 执行期间需要存在的所有资源都能在适当的时机释放.</p>\n\n</section>\n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/using#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/defer\"><code>defer</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - guide/testing/marble-testing\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable\n - api/index/function/defer\n - api/index/function/using#description\n - api/index/function/using#see-also\n - api/index/function/using#using\n - api/index/interface/Unsubscribable\n - api/index/type-alias/ObservableInput\n - api/index/type-alias/ObservedValueOf\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/using.ts?message=docs(index)%3A%20describe%20your%20change...#L5-L67\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/using.ts#L5-L67\n-->"
}