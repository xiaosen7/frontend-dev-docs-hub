{
  "id": "api/index/function/bindNodeCallback",
  "title": "bindNodeCallback",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/bindNodeCallback.ts?message=docs(index)%3A%20describe%20your%20change...#L17-L167\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/bindNodeCallback.ts#L17-L167\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/bindNodeCallback\", \"name\": \"bindNodeCallback\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"bindnodecallback\">bindNodeCallback<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindNodeCallback#bindnodecallback\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Converts a Node.js-style callback API to a function that returns an\nObservable.</p>\n<p>将 Node.js 风格的回调 API 转换为返回 Observable 的函数。</p>\n<p><span class=\"informal\">It's just like <a href=\"api/index/function/bindCallback\"><code>bindCallback</code></a>, but the\ncallback is expected to be of type <code>callback(error, result)</code>.</span></p>\n<p><span class=\"informal\">就像 <a href=\"api/index/function/bindCallback\"><code>bindCallback</code></a> 一样，但是回调的类型应该是 <code>callback(error, result)</code>。</span></p>\n<p><code><a href=\"api/index/function/bindNodeCallback\" class=\"code-anchor\">bindNodeCallback</a></code> is not an operator because its input and output are not\nObservables. The input is a function <code>func</code> with some parameters, but the\nlast parameter must be a callback function that <code>func</code> calls when it is\ndone. The callback function is expected to follow Node.js conventions,\nwhere the first argument to the callback is an error object, signaling\nwhether call was successful. If that object is passed to callback, it means\nsomething went wrong.</p>\n<p><code><a href=\"api/index/function/bindNodeCallback\" class=\"code-anchor\">bindNodeCallback</a></code> 不是操作符，因为它的输入和输出不是 Observables。输入是一个带有一些参数的函数 <code>func</code>，但最后一个参数必须是当 <code>func</code> 完成时要调用的回调函数。回调函数应遵循 Node.js 约定，其中回调的第一个参数是一个错误对象，表示调用是否成功。如果该对象被传给了此回调，则意味着出现了问题。</p>\n<p>The output of <code><a href=\"api/index/function/bindNodeCallback\" class=\"code-anchor\">bindNodeCallback</a></code> is a function that takes the same\nparameters as <code>func</code>, except the last one (the callback). When the output\nfunction is called with arguments, it will return an Observable.\nIf <code>func</code> calls its callback with error parameter present, Observable will\nerror with that value as well. If error parameter is not passed, Observable will emit\nsecond parameter. If there are more parameters (third and so on),\nObservable will emit an array with all arguments, except first error argument.</p>\n<p><code><a href=\"api/index/function/bindNodeCallback\" class=\"code-anchor\">bindNodeCallback</a></code> 的输出是一个函数，它采用与 <code>func</code> 相同的参数，除了最后一个（回调函数）。当使用参数调用输出函数时，它将返回一个 Observable。如果 <code>func</code> 在有错误参数的情况下调用其回调，则 Observable 也会使用该值进行报错。如果没有传递错误参数，Observable 将发出第二个参数。如果有更多参数（第三个等等），Observable 将发出一个包含所有参数的数组，除了第一个错误参数。</p>\n<p>Note that <code>func</code> will not be called at the same time output function is,\nbut rather whenever resulting Observable is subscribed. By default call to\n<code>func</code> will happen synchronously after subscription, but that can be changed\nwith proper <code>scheduler</code> provided as optional third parameter. <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a>\ncan also control when values from callback will be emitted by Observable.\nTo find out more, check out documentation for <a href=\"api/index/function/bindCallback\"><code>bindCallback</code></a>, where\n<a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> works exactly the same.</p>\n<p>请注意，<code>func</code> 不会在输出函数被调用的同时被调用，而是在订阅结果 Observable 时被调用。默认情况下，对 <code>func</code> 的调用将在订阅后同步发生，但可以通过可选的第三个参数提供的适当 <code>scheduler</code> 来更改。<a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> 还可以控制 Observable 何时发出回调中的值。要了解更多信息，请查看 <a href=\"api/index/function/bindCallback\"><code>bindCallback</code></a> 的文档，其中 <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> 的工作方式完全相同。</p>\n<p>As in <a href=\"api/index/function/bindCallback\"><code>bindCallback</code></a>, context (<code>this</code> property) of input function will be set to context\nof returned function, when it is called.</p>\n<p>如在 <a href=\"api/index/function/bindCallback\"><code>bindCallback</code></a> 中，输入函数的上下文（<code>this</code> 属性）将在调用时设置为所返回函数的上下文。</p>\n<p>After Observable emits value, it will complete immediately. This means\neven if <code>func</code> calls callback again, values from second and consecutive\ncalls will never appear on the stream. If you need to handle functions\nthat call callbacks multiple times, check out <a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a> or\n<a href=\"api/index/function/fromEventPattern\"><code>fromEventPattern</code></a> instead.</p>\n<p>Observable 发出值后，会立即完成。这意味着即使 <code>func</code> 再次调用回调，来自第二次和后续调用的值也永远不会出现在流中。如果你需要能处理多次调用回调的函数，请改用 <a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a> 或 <a href=\"api/index/function/fromEventPattern\"><code>fromEventPattern</code></a>。</p>\n<p>Note that <code><a href=\"api/index/function/bindNodeCallback\" class=\"code-anchor\">bindNodeCallback</a></code> can be used in non-Node.js environments as well.\n\"Node.js-style\" callbacks are just a convention, so if you write for\nbrowsers or any other environment and API you use implements that callback style,\n<code><a href=\"api/index/function/bindNodeCallback\" class=\"code-anchor\">bindNodeCallback</a></code> can be safely used on that API functions as well.</p>\n<p>请注意，<code><a href=\"api/index/function/bindNodeCallback\" class=\"code-anchor\">bindNodeCallback</a></code> 也可以在非 Node.js 环境中使用。“Node.js 风格”的回调只是一种约定，因此如果你为浏览器或任何其它环境编写，并且你使用的 API 实现了这种回调风格，<code><a href=\"api/index/function/bindNodeCallback\" class=\"code-anchor\">bindNodeCallback</a></code> 也可以安全地用于该 API 函数。</p>\n<p>Remember that Error object passed to callback does not have to be an instance\nof JavaScript built-in <code>Error</code> object. In fact, it does not even have to an object.\nError parameter of callback function is interpreted as \"present\", when value\nof that parameter is truthy. It could be, for example, non-zero number, non-empty\nstring or boolean <code>true</code>. In all of these cases resulting Observable would error\nwith that value. This means usually regular style callbacks will fail very often when\n<code><a href=\"api/index/function/bindNodeCallback\" class=\"code-anchor\">bindNodeCallback</a></code> is used. If your Observable errors much more often then you\nwould expect, check if callback really is called in Node.js-style and, if not,\nswitch to <a href=\"api/index/function/bindCallback\"><code>bindCallback</code></a> instead.</p>\n<p>请记住，传给回调的 Error 对象不必是 JavaScript 内置 <code>Error</code> 对象的实例。事实上，它甚至不需要是一个对象。当该参数的值为真值时，回调函数的错误参数被解释为“存在”。例如，它可以是非零数字、非空字符串或布尔值 <code>true</code>。在所有这些情况下，结果 Observable 都会用该值进行报错。这意味着当使用 <code><a href=\"api/index/function/bindNodeCallback\" class=\"code-anchor\">bindNodeCallback</a></code> 时，常规风格的回调会经常失败。如果你的 Observable 错误比你预期的要频繁得多，请检查是否真的以 Node.js 风格调用了回调，如果没有，请改用 <a href=\"api/index/function/bindCallback\"><code>bindCallback</code></a>。</p>\n<p>Note that even if error parameter is technically present in callback, but its value\nis falsy, it still won't appear in array emitted by Observable.</p>\n<p>请注意，即使错误参数从技术上看存在于回调中，但它的值是假值，它仍然不会出现在 Observable 发出的数组中。</p>\n<h2 id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindNodeCallback#examples\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindNodeCallback#例子\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"read-a-file-from-the-filesystem-and-get-the-data-as-an-observable\">Read a file from the filesystem and get the data as an Observable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindNodeCallback#read-a-file-from-the-filesystem-and-get-the-data-as-an-observable\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"从文件系统读取文件并将数据作为-observable-获取\">从文件系统读取文件并将数据作为 Observable 获取<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindNodeCallback#从文件系统读取文件并将数据作为-observable-获取\"><i class=\"material-icons\">link</i></a></h3>\n<code-example language=\"ts\">\nimport * as fs <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'fs';\nconst readFileAsObservable = <a href=\"api/index/function/bindNodeCallback\" class=\"code-anchor\">bindNodeCallback</a>(fs.readFile);\nconst result = readFileAsObservable('./roadNames.txt', 'utf8');\nresult.subscribe(x => console.log(x), e => console.error(e));\n</code-example>\n<h3 id=\"use-on-function-calling-callback-with-multiple-arguments\">Use on function calling callback with multiple arguments<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindNodeCallback#use-on-function-calling-callback-with-multiple-arguments\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"用于函数调用具有多个参数的回调时\">用于函数调用具有多个参数的回调时<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindNodeCallback#用于函数调用具有多个参数的回调时\"><i class=\"material-icons\">link</i></a></h3>\n<code-example language=\"ts\">\nsomeFunction((err, a, b) => {\n  console.log(err); // null\n  console.log(a); // 5\n  console.log(b); // \"some string\"\n});\nconst boundSomeFunction = <a href=\"api/index/function/bindNodeCallback\" class=\"code-anchor\">bindNodeCallback</a>(someFunction);\nboundSomeFunction()\n.subscribe(value => {\n  console.log(value); // [5, \"some string\"]\n});\n</code-example>\n<h3 id=\"use-on-function-calling-callback-in-regular-style\">Use on function calling callback in regular style<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindNodeCallback#use-on-function-calling-callback-in-regular-style\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"用于函数调用常规风格的回调时\">用于函数调用常规风格的回调时<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindNodeCallback#用于函数调用常规风格的回调时\"><i class=\"material-icons\">link</i></a></h3>\n<code-example language=\"ts\">\nsomeFunction(a => {\n  console.log(a); // 5\n});\nconst boundSomeFunction = <a href=\"api/index/function/bindNodeCallback\" class=\"code-anchor\">bindNodeCallback</a>(someFunction);\nboundSomeFunction()\n.subscribe(\n  value => {}             // never gets called\n  err => console.log(err) // 5\n);\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/bindNodeCallback\" class=\"code-anchor\">bindNodeCallback</a>(callbackFunc: (...args: [...any[], (err: any, ...res: any) => void]) => void, resultSelector?: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a> | ((...args: any[]) => any), scheduler?: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a>): (...args: any[]) => <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;any></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"callbackFunc\"></a>\n        <code>callbackFunc</code>\n      </td>\n      <td class=\"param-type\"><code>(...args: [...any[], (err: any, ...res: any) => void]) => void</code></td>\n      <td class=\"param-description\">\nn      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"resultSelector\"></a>\n        <code>resultSelector</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a> | ((...args: any[]) => any)</code></td>\n      <td class=\"param-description\">\n              <p>可选。默认值为 <code>undefined</code>。</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"scheduler\"></a>\n        <code>scheduler</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a></code></td>\n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code>undefined</code>。</p>\n<p>        The scheduler on which to schedule the\ncallbacks.</p>\n<p>用于调度各个回调的调度器。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code>(...args: any[]) => <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;any></code>: A function which returns the\nObservable that delivers the same values the Node.js callback would\ndeliver.</p>\n<p>一个返回 Observable 的函数，该 Observable 将发出与回调函数的返回值相同的值</p>\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/bindNodeCallback#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/bindCallback\"><code>bindCallback</code></a>\n</li>\n    <li><a href=\"api/index/function/from\"><code>from</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - api/index/function/bindCallback\n - api/index/function/fromEvent\n - api/index/function/fromEventPattern\n - guide/scheduler\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable\n - api/index/function/bindCallback\n - api/index/function/bindNodeCallback#bindnodecallback\n - api/index/function/bindNodeCallback#examples\n - api/index/function/bindNodeCallback#read-a-file-from-the-filesystem-and-get-the-data-as-an-observable\n - api/index/function/bindNodeCallback#see-also\n - api/index/function/bindNodeCallback#use-on-function-calling-callback-in-regular-style\n - api/index/function/bindNodeCallback#use-on-function-calling-callback-with-multiple-arguments\n - api/index/function/bindNodeCallback#从文件系统读取文件并将数据作为-observable-获取\n - api/index/function/bindNodeCallback#例子\n - api/index/function/bindNodeCallback#用于函数调用具有多个参数的回调时\n - api/index/function/bindNodeCallback#用于函数调用常规风格的回调时\n - api/index/function/from\n - api/index/function/fromEvent\n - api/index/function/fromEventPattern\n - api/index/interface/SchedulerLike\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/bindNodeCallback.ts?message=docs(index)%3A%20describe%20your%20change...#L17-L167\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/bindNodeCallback.ts#L17-L167\n-->"
}