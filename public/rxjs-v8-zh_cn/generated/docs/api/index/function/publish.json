{
  "id": "api/index/function/publish",
  "title": "publish",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/publish.ts?message=docs(index)%3A%20describe%20your%20change...#L47-L120\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/publish.ts#L47-L120\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/publish\", \"name\": \"publish\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"publish\">publish<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/publish#publish\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    <label class=\"api-status-label deprecated\">已弃用</label>\n    \n    \n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\nbefore it begins emitting items to those Observers that have subscribed to it.</p>\n<p>返回一个 ConnectableObservable，它是一个 Observable 的变体，它会一直等到其 connect 方法被调用，才开始向订阅了它的 Observer 发送条目。</p>\n<p><span class=\"informal\">Makes a cold Observable hot</span></p>\n<p><span class=\"informal\">使冷 Observable 变成热的</span></p>\n<p><img src=\"/assets/images/marble-diagrams/publish.png\" width=\"100%\" alt=\"publish marble diagram\"></p>\n<h2 id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/publish#examples\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/publish#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Make <code>source$</code> hot by applying <code><a href=\"api/index/function/publish\" class=\"code-anchor\">publish</a></code> operator, then merge each inner observable into a single one\nand subscribe</p>\n<p>可以使用 <code><a href=\"api/index/function/publish\" class=\"code-anchor\">publish</a></code> 操作符使 <code>source$</code> 变热，然后将每个内部 observable 合并为一个并订阅</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/zip\" class=\"code-anchor\">zip</a>, <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>, <a href=\"api/index/function/publish\" class=\"code-anchor\">publish</a>, <a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a> } from 'rxjs';\n\nconst source$ = <a href=\"api/index/function/zip\" class=\"code-anchor\">zip</a>(<a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(2000), <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3, 4, 5, 6, 7, 8, 9))\n  .pipe(<a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(([, number]) => number));\n\nsource$\n  .pipe(\n    <a href=\"api/index/function/publish\" class=\"code-anchor\">publish</a>(multicasted$ =>\n      <a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a>(\n        multicasted$.pipe(<a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(x => console.log('Stream 1:', x))),\n        multicasted$.pipe(<a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(x => console.log('Stream 2:', x))),\n        multicasted$.pipe(<a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(x => console.log('Stream 3:', x)))\n      )\n    )\n  )\n  .subscribe();\n\n// Results <a href=\"api/index/function/every\" class=\"code-anchor\">every</a> two seconds\n// Stream 1: 1\n// Stream 2: 1\n// Stream 3: 1\n// ...\n// Stream 1: 9\n// Stream 2: 9\n// Stream 3: 9\n</code-example>\n<p></p>\n  \n\n  \n<section class=\"deprecated\">\n  <h2 id=\"deprecation-notes\">弃用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/publish#deprecation-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <p>Will be removed in v8. Use the <a href=\"api/index/function/connectable\"><code>connectable</code></a> observable, the <a href=\"api/index/function/connect\"><code>connect</code></a> operator or the\n<a href=\"api/index/function/share\"><code>share</code></a> operator instead. See the overloads below for equivalent replacement examples of this operator's\nbehaviors.\nDetails: <a href=\"https://rxjs.dev/deprecations/multicasting\">https://rxjs.dev/deprecations/multicasting</a></p>\n<p>将在 v8 中删除。请改用 <a href=\"api/index/function/connectable\"><code>connectable</code></a> observable、<a href=\"api/index/function/connect\"><code>connect</code></a> 操作符或 <a href=\"api/index/function/share\"><code>share</code></a> 操作符。有关此操作符行为的等效替换示例，请参见其它的重载。详细信息： <a href=\"https://rxjs.dev/deprecations/multicasting\">https://rxjs.dev/deprecations/multicasting</a></p>\n\n</section>\n\n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading deprecated-api-item\"> <a href=\"api/index/function/publish\" class=\"code-anchor\">publish</a>&#x3C;T, R>(selector?: <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, R>): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T> | <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, R></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"selector\"></a>\n        <code>selector</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction&#x3C;T, R></a></code></td>\n      <td class=\"param-description\">\n        <p>      可选。默认值为 <code>undefined</code>。</p>\n  <p>      Optional selector function which can use the multicasted source sequence as many times\n  as needed, without causing multiple subscriptions to the source sequence.\n  Subscribers to the given source will receive all notifications of the source from the time of the subscription on.</p>\n  <p>可选的选择器函数，可以根据需要多次使用多播的源序列，而不会导致对源序列的多次订阅。此源的订阅者将从订阅之时起收到该源的所有通知。</p>\n  \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T> | <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, R></code>: A function that returns a ConnectableObservable that upon connection\ncauses the source Observable to emit items to its Observers.</p>\n<p>一个返回 ConnectableObservable 的函数，在连接该 Observable 时会导致源 Observable 向其 Observers 发送条目。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/publish#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/publishLast\"><code>publishLast</code></a>\n</li>\n    <li><a href=\"api/index/function/publishReplay\"><code>publishReplay</code></a>\n</li>\n    <li><a href=\"api/index/function/publishBehavior\"><code>publishBehavior</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - 6-to-7-change-summary\n - api/deprecations\n - api/index\n - api/index/function/publishLast\n - api/index/function/refCount\n - api/index/function/shareReplay\n - api/operators/publish\n - api/operators/refCount\n - api/webSocket/webSocket\n - deprecations/multicasting\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/function/connect\n - api/index/function/connectable\n - api/index/function/every\n - api/index/function/interval\n - api/index/function/map\n - api/index/function/merge\n - api/index/function/of\n - api/index/function/publish#deprecation-notes\n - api/index/function/publish#examples\n - api/index/function/publish#publish\n - api/index/function/publish#see-also\n - api/index/function/publish#例子\n - api/index/function/publishBehavior\n - api/index/function/publishLast\n - api/index/function/publishReplay\n - api/index/function/share\n - api/index/function/tap\n - api/index/function/zip\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/interface/OperatorFunction\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/publish.ts?message=docs(index)%3A%20describe%20your%20change...#L47-L120\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/publish.ts#L47-L120\n - https://rxjs.dev/deprecations/multicasting\n-->"
}