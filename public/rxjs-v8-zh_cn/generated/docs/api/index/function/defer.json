{
  "id": "api/index/function/defer",
  "title": "defer",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/defer.ts?message=docs(index)%3A%20describe%20your%20change...#L4-L71\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/defer.ts#L4-L71\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/defer\", \"name\": \"defer\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"defer\">defer<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/defer#defer\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Creates an Observable that, on subscribe, calls an Observable factory to\nmake an Observable for each new Observer.</p>\n<p>创建一个 Observable。在订阅时会调用 Observable 工厂为来每个新的 Observer 创建一个 Observable。</p>\n<p><span class=\"informal\">Creates the Observable lazily, that is, only when it\nis subscribed.\n</span></p>\n<p><span class=\"informal\">推迟创建 Observable，即仅在订阅时创建。</span></p>\n<p><img src=\"/assets/images/marble-diagrams/defer.png\" width=\"100%\" alt=\"defer marble diagram\"></p>\n<p><code><a href=\"api/index/function/defer\" class=\"code-anchor\">defer</a></code> allows you to create an Observable only when the Observer\nsubscribes. It waits until an Observer subscribes to it, calls the given\nfactory function to get an Observable -- where a factory function typically\ngenerates a new Observable -- and subscribes the Observer to this Observable.\nIn case the factory function returns a falsy value, then EMPTY is used as\nObservable instead. Last but not least, an exception during the factory\nfunction call is transferred to the Observer by calling <code>error</code>.</p>\n<p><code><a href=\"api/index/function/defer\" class=\"code-anchor\">defer</a></code> 能让你仅当有 Observer 订阅时才创建 Observable。它会等待 Observer 订阅它，并调用给定的工厂函数来获取 Observable —— 工厂函数通常会生成一个新的 Observable —— 然后将 Observer 订阅到这个 Observable。如果工厂函数返回了一个假值，则会改用 EMPTY 作为结果 Observable。最后，但仍然很重要的一点是，工厂函数调用期间抛出的异常会通过调用 <code>error</code> 传递给 Observer。</p>\n<h2 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/defer#example\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/defer#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Subscribe to either an Observable of clicks or an Observable of interval, at random</p>\n<p>随机订阅点击事件的 Observable 或定时发送的 Observable</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/defer\" class=\"code-anchor\">defer</a>, <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a> } from 'rxjs';\n\nconst clicksOrInterval = <a href=\"api/index/function/defer\" class=\"code-anchor\">defer</a>(() => {\n  return Math.random() > 0.5\n    ? <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click')\n    : <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000);\n});\nclicksOrInterval.subscribe(x => console.log(x));\n\n// Results in the following behavior:\n// If the result <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> Math.random() is greater than 0.5 it will listen\n// for clicks anywhere on the \"document\"; when document is clicked it\n// will log a MouseEvent object to the console. If the result is less\n// than 0.5 it will emit ascending numbers, one <a href=\"api/index/function/every\" class=\"code-anchor\">every</a> second(1000ms).\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/defer\" class=\"code-anchor\">defer</a>&#x3C;R extends <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;any>>(observableFactory: () => R): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;<a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;R>></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"observableFactory\"></a>\n        <code>observableFactory</code>\n      </td>\n      <td class=\"param-type\"><code>() => R</code></td>\n      <td class=\"param-description\">\n      <p>        The Observable\nfactory function to invoke for each Observer that subscribes to the output\nObservable. May also return a Promise, which will be converted on the fly\nto an Observable.</p>\n<p>为订阅了输出 Observable 的每个 Observer 调用的 Observable 工厂函数。也可以返回一个 Promise，它将在运行期间转换为 Observable。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;<a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;R>></code>: An Observable whose Observers' subscriptions trigger\nan invocation of the given Observable factory function.</p>\n<p>一个 Observable，其 Observer 的订阅会触发对给定 Observable 工厂函数的调用。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/defer#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/class/Observable\"><code>Observable</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - 6-to-7-change-summary\n - api/index\n - api/index/function/iif\n - api/index/function/repeat\n - api/index/function/throwError\n - api/index/function/using\n - api/operators/repeat\n - deprecations/breaking-changes\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable\n - api/index/function/defer#defer\n - api/index/function/defer#example\n - api/index/function/defer#see-also\n - api/index/function/defer#例子\n - api/index/function/every\n - api/index/function/fromEvent\n - api/index/function/interval\n - api/index/function/of\n - api/index/type-alias/ObservableInput\n - api/index/type-alias/ObservedValueOf\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/defer.ts?message=docs(index)%3A%20describe%20your%20change...#L4-L71\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/defer.ts#L4-L71\n-->"
}