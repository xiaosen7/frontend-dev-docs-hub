{
  "id": "api/index/function/takeLast",
  "title": "takeLast",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/takeLast.ts?message=docs(index)%3A%20describe%20your%20change...#L5-L97\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/takeLast.ts#L5-L97\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/takeLast\", \"name\": \"takeLast\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"takelast\">takeLast<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/takeLast#takelast\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Waits for the source to complete, then emits the last N values from the source,\nas specified by the <code><a href=\"api/index/function/count\" class=\"code-anchor\">count</a></code> argument.</p>\n<p>等待源完成，然后从源发送最后 N 个值，由 <code><a href=\"api/index/function/count\" class=\"code-anchor\">count</a></code> 参数指定。</p>\n<p><img src=\"/assets/images/marble-diagrams/takeLast.png\" width=\"100%\" alt=\"takeLast marble diagram\"></p>\n<p><code><a href=\"api/index/function/takeLast\" class=\"code-anchor\">takeLast</a></code> results in an observable that will hold values up to <code><a href=\"api/index/function/count\" class=\"code-anchor\">count</a></code> values in memory,\nuntil the source completes. It then pushes all values in memory to the consumer, in the\norder they were received from the source, then notifies the consumer that it is\ncomplete.</p>\n<p><code><a href=\"api/index/function/takeLast\" class=\"code-anchor\">takeLast</a></code> 产生一个 observable，它将在内存中保存最多 <code><a href=\"api/index/function/count\" class=\"code-anchor\">count</a></code> 个值，直到源完成。然后它会将内存中的所有值按从源接收到的顺序推送给消费者，然后通知消费者它已完成。</p>\n<p>If for some reason the source completes before the <code><a href=\"api/index/function/count\" class=\"code-anchor\">count</a></code> supplied to <code><a href=\"api/index/function/takeLast\" class=\"code-anchor\">takeLast</a></code> is reached,\nall values received until that point are emitted, and then completion is notified.</p>\n<p>如果由于某种原因，源在达到提供给 <code><a href=\"api/index/function/takeLast\" class=\"code-anchor\">takeLast</a></code> 的 <code><a href=\"api/index/function/count\" class=\"code-anchor\">count</a></code> 个之前就已完成，则会发送到此时间点为止接收到的所有值，然后通知完成。</p>\n<p><strong>Warning</strong>: Using <code><a href=\"api/index/function/takeLast\" class=\"code-anchor\">takeLast</a></code> with an observable that never completes will result\nin an observable that never emits a value.</p>\n<p><strong>警告</strong>：将 <code><a href=\"api/index/function/takeLast\" class=\"code-anchor\">takeLast</a></code> 与永远不会完成的 Observable 一起使用将导致一个永远不会发送值的 Observable。</p>\n<h2 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/takeLast#example\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/takeLast#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Take the last 3 values of an Observable with many values</p>\n<p>取具有多个值的 Observable 的最后 3 个值</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/range\" class=\"code-anchor\">range</a>, <a href=\"api/index/function/takeLast\" class=\"code-anchor\">takeLast</a> } from 'rxjs';\n\nconst many = <a href=\"api/index/function/range\" class=\"code-anchor\">range</a>(1, 100);\nconst lastThree = many.pipe(<a href=\"api/index/function/takeLast\" class=\"code-anchor\">takeLast</a>(3));\nlastThree.subscribe(x => console.log(x));\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/takeLast\" class=\"code-anchor\">takeLast</a>&#x3C;T>(<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>: number): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"count\"></a>\n        <code><a href=\"api/index/function/count\" class=\"code-anchor\">count</a></code>\n      </td>\n      <td class=\"param-type\"><code>number</code></td>\n      <td class=\"param-description\">\n      <p>        The maximum number of values to emit from the end of\nthe sequence of values emitted by the source Observable.</p>\n<p>要从源 Observable 的值序列的末尾处发送的最大数量。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable that emits at most the last\n<code><a href=\"api/index/function/count\" class=\"code-anchor\">count</a></code> values emitted by the source Observable.</p>\n<p>一个返回 Observable 的函数，该 Observable 最多发送源 Observable 发送的最后 <code><a href=\"api/index/function/count\" class=\"code-anchor\">count</a></code> 个值。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/takeLast#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/take\"><code>take</code></a>\n</li>\n    <li><a href=\"api/index/function/takeUntil\"><code>takeUntil</code></a>\n</li>\n    <li><a href=\"api/index/function/takeWhile\"><code>takeWhile</code></a>\n</li>\n    <li><a href=\"api/index/function/skip\"><code>skip</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - 6-to-7-change-summary\n - api/index\n - api/index/function/take\n - api/index/function/takeUntil\n - api/index/function/takeWhile\n - api/index/interface/ArgumentOutOfRangeError\n - api/operators/takeLast\n - deprecations/breaking-changes\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/function/count\n - api/index/function/range\n - api/index/function/skip\n - api/index/function/take\n - api/index/function/takeLast#example\n - api/index/function/takeLast#see-also\n - api/index/function/takeLast#takelast\n - api/index/function/takeLast#例子\n - api/index/function/takeUntil\n - api/index/function/takeWhile\n - api/index/interface/MonoTypeOperatorFunction\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/takeLast.ts?message=docs(index)%3A%20describe%20your%20change...#L5-L97\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/takeLast.ts#L5-L97\n-->"
}