{
  "id": "api/index/interface/ShareConfig",
  "title": "ShareConfig",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/share.ts?message=docs(index)%3A%20describe%20your%20change...#L7-L58\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/share.ts#L7-L58\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/interface/ShareConfig\", \"name\": \"ShareConfig\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"shareconfig\">ShareConfig<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/interface/ShareConfig#shareconfig\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p>\n  \n\n  \n\n  <section class=\"interface-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/index/interface/ShareConfig\" class=\"code-anchor\">ShareConfig</a>&#x3C;T> {\n  <a class=\"code-anchor\" href=\"api/index/interface/ShareConfig#connector\">connector?: () => SubjectLike&#x3C;T></a>\n  <a class=\"code-anchor\" href=\"api/index/interface/ShareConfig#resetOnError\">resetOnError?: boolean | ((error: any) => ObservableInput&#x3C;any>)</a>\n  <a class=\"code-anchor\" href=\"api/index/interface/ShareConfig#resetOnComplete\">resetOnComplete?: boolean | (() => ObservableInput&#x3C;any>)</a>\n  <a class=\"code-anchor\" href=\"api/index/interface/ShareConfig#resetOnRefCountZero\">resetOnRefCountZero?: boolean | (() => ObservableInput&#x3C;any>)</a>\n}\n</code-example>\n\n  \n  \n\n\n  \n  \n\n</section>\n\n  \n  \n\n  \n<section class=\"instance-properties\">\n  <h2 id=\"属性\">属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/interface/ShareConfig#属性\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table properties-table\">\n    <thead>\n      <tr><th>属性</th><th>类型</th><th>说明</th></tr>\n    </thead>\n    <tbody>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"connector\"></a><code class=\"\">connector</code></td>\n        <td><label class=\"property-type-label\"><code>() => <a href=\"api/index/interface/SubjectLike\" class=\"code-anchor\">SubjectLike</a>&#x3C;T></code></label></td>\n        <td>\n          <p>The factory used to create the subject that will connect the source observable to\nmulticast consumers.</p>\n<p>本工厂用于创建将源 observable 连接到多播消费者的主体。</p>\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"resetOnError\"></a><code class=\"\">resetOnError</code></td>\n        <td><label class=\"property-type-label\"><code>boolean | ((error: any) => <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;any>)</code></label></td>\n        <td>\n          <p>If <code>true</code>, the resulting observable will reset internal state on error from source and return to a \"cold\" state. This\nallows the resulting observable to be \"retried\" in the event of an error.\nIf <code>false</code>, when an error comes from the source it will push the error into the connecting subject, and the subject\nwill remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent retries\nor resubscriptions will resubscribe to that same subject. In all cases, RxJS subjects will emit the same error again, however\n<a href=\"api/index/class/ReplaySubject\"><code>ReplaySubject</code></a> will also push its buffered values before pushing the error.\nIt is also possible to pass a notifier factory returning an <code><a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a></code> instead which grants more fine-grained\ncontrol over how and when the reset should happen. This allows behaviors like conditional or delayed resets.</p>\n<p>如果为真，则结果 observable 会在源出错时重置内部状态并返回一个“冷”状态。这允许在发生错误时“重试”结果 observable。如果为 false，当源发来错误时，它会将错误推送到所连接的主体，并且此主体将保持连接，这意味着结果 observable 不会再次变“冷”，随后的重试或重新订阅将重新订阅同一个主体。在所有情况下，RxJS 主体都会再次发送相同的错误，但是 <a href=\"api/index/class/ReplaySubject\"><code>ReplaySubject</code></a> 还会在推送错误之前推送其缓冲值。这还可以改为用通知工厂返回一个 observable，它可以对重置的方式和时间进行更细粒度的控制。这样可以支持有条件重置或延迟重置等行为。</p>\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"resetOnComplete\"></a><code class=\"\">resetOnComplete</code></td>\n        <td><label class=\"property-type-label\"><code>boolean | (() => <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;any>)</code></label></td>\n        <td>\n          <p>If <code>true</code>, the resulting observable will reset internal state on completion from source and return to a \"cold\" state. This\nallows the resulting observable to be \"repeated\" after it is done.\nIf <code>false</code>, when the source completes, it will push the completion through the connecting subject, and the subject\nwill remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent repeats\nor resubscriptions will resubscribe to that same subject.\nIt is also possible to pass a notifier factory returning an <code><a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a></code> instead which grants more fine-grained\ncontrol over how and when the reset should happen. This allows behaviors like conditional or delayed resets.</p>\n<p>如果为真，则结果 observable 将在源完成时重置内部状态并返回“冷”状态。这允许在完成后“重复”此结果 observable。如果为 false，则当源完成时，它将通过所连接的主体推送完成通知，此主体将保持连接，这意味着结果 observable 不会再次变“冷”，后续重复或重新订阅将重新订阅同一个主体。这还可以改为用通知工厂返回一个 observable，它可以对重置的方式和时间进行更细粒度的控制。这样可以支持有条件重置或延迟重置等行为。</p>\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"resetOnRefCountZero\"></a><code class=\"\">resetOnRefCountZero</code></td>\n        <td><label class=\"property-type-label\"><code>boolean | (() => <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;any>)</code></label></td>\n        <td>\n          <p>If <code>true</code>, when the number of subscribers to the resulting observable reaches zero due to those subscribers unsubscribing, the\ninternal state will be reset and the resulting observable will return to a \"cold\" state. This means that the next\ntime the resulting observable is subscribed to, a new subject will be created and the source will be subscribed to\nagain.\nIf <code>false</code>, when the number of subscribers to the resulting observable reaches zero due to unsubscription, the subject\nwill remain connected to the source, and new subscriptions to the result will be connected through that same subject.\nIt is also possible to pass a notifier factory returning an <code><a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a></code> instead which grants more fine-grained\ncontrol over how and when the reset should happen. This allows behaviors like conditional or delayed resets.</p>\n<p>如果为 true，则当结果 observable 的订阅者的数量由于订阅者退订而达到零时，内部状态将被重置，而结果 observable 将返回“冷”的状态。这意味着下一次订阅结果 observable 时，将创建一个新的主体并再次订阅源。如果为 false，则当结果 observable 的订阅者数量由于退订而达到零时，主体将保持与源的连接，并且对结果的新订阅将通过同一主体进行连接。这还可以改为用通知工厂返回一个 observable，它可以对重置的方式和时间进行更细粒度的控制。这样可以支持有条件重置或延迟重置等行为。</p>\n\n          \n          \n        </td>\n      </tr>\n    \n    </tbody>\n  </table>\n</section>\n  \n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - api/index/function/share\n - api/operators/ShareConfig\n - api/operators/share\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/ReplaySubject\n - api/index/interface/ShareConfig#connector\n - api/index/interface/ShareConfig#resetOnComplete\n - api/index/interface/ShareConfig#resetOnError\n - api/index/interface/ShareConfig#resetOnRefCountZero\n - api/index/interface/ShareConfig#shareconfig\n - api/index/interface/ShareConfig#属性\n - api/index/interface/SubjectLike\n - api/index/type-alias/ObservableInput\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/share.ts?message=docs(index)%3A%20describe%20your%20change...#L7-L58\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/share.ts#L7-L58\n-->"
}