{
  "id": "api/operators/auditTime",
  "title": "auditTime",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/auditTime.ts?message=docs(operators)%3A%20describe%20your%20change...#L5-L72\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/auditTime.ts#L5-L72\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/auditTime\", \"name\": \"auditTime\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"audittime\">auditTime<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/auditTime#audittime\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Ignores source values for <code>duration</code> milliseconds, then emits the most recent\nvalue from the source Observable, then repeats this process.</p>\n<p>在 <code>duration</code> 毫秒内忽略源值，然后从源 Observable 发送最新值，然后重复此过程。</p>\n<p><span class=\"informal\">When it sees a source value, it ignores that plus\nthe next ones for <code>duration</code> milliseconds, and then it emits the most recent\nvalue from the source.</span></p>\n<p><span class=\"informal\">当它看到一个源值时，它会在 <code>duration</code> 毫秒内忽略这些后续值，之后它再从源中发送最新的值。</span></p>\n<p><img src=\"/assets/images/marble-diagrams/auditTime.png\" width=\"100%\" alt=\"auditTime marble diagram\"></p>\n<p><code><a href=\"api/index/function/auditTime\" class=\"code-anchor\">auditTime</a></code> is similar to <code><a href=\"api/index/function/throttleTime\" class=\"code-anchor\">throttleTime</a></code>, but emits the last value from the\nsilenced time window, instead of the first value. <code><a href=\"api/index/function/auditTime\" class=\"code-anchor\">auditTime</a></code> emits the most\nrecent value from the source Observable on the output Observable as soon as\nits internal timer becomes disabled, and ignores source values while the\ntimer is enabled. Initially, the timer is disabled. As soon as the first\nsource value arrives, the timer is enabled. After <code>duration</code> milliseconds (or\nthe time unit determined internally by the optional <code>scheduler</code>) has passed,\nthe timer is disabled, then the most recent source value is emitted on the\noutput Observable, and this process repeats for the next source value.\nOptionally takes a <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> for managing timers.</p>\n<p><code><a href=\"api/index/function/auditTime\" class=\"code-anchor\">auditTime</a></code> 类似于 <code><a href=\"api/index/function/throttleTime\" class=\"code-anchor\">throttleTime</a></code>，但它会从静默时间窗口中发送最后一个值，而不是第一个。<code><a href=\"api/index/function/auditTime\" class=\"code-anchor\">auditTime</a></code> 在其内部计时器被禁用时会立即在输出 Observable 上发送来自源 Observable 的最新值，并在计时器被启用时忽略源值。最初，定时器被禁用。一旦第一个源值抵达，定时器就会被启用。在 <code>duration</code> 毫秒（或由可选的 <code>scheduler</code> 内部确定的时间单位）过去之后，计时器被禁用，然后在输出 Observable 上发送最近的源值，并且该过程对下一个源值重复。可以选择使用 <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> 来管理计时器。</p>\n<h2 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/auditTime#example\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/auditTime#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Emit clicks at a rate of at most one click per second</p>\n<p>以每秒最多一次的速度发送点击事件</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/auditTime\" class=\"code-anchor\">auditTime</a> } from 'rxjs';\n\nconst clicks = <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click');\nconst result = clicks.pipe(<a href=\"api/index/function/auditTime\" class=\"code-anchor\">auditTime</a>(1000));\nresult.subscribe(x => console.log(x));\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/auditTime\" class=\"code-anchor\">auditTime</a>&#x3C;T>(duration: number, scheduler: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a> = <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"duration\"></a>\n        <code>duration</code>\n      </td>\n      <td class=\"param-type\"><code>number</code></td>\n      <td class=\"param-description\">\n      <p>        Time to wait before emitting the most recent source\nvalue, measured in milliseconds or the time unit determined internally\nby the optional <code>scheduler</code>.</p>\n<p>在发送最近的源值之前要等待的时间，其单位是毫秒或由可选 <code>scheduler</code> 内部确定的时间单位。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"scheduler\"></a>\n        <code>scheduler</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a></code></td>\n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code><a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a></code>。</p>\n<p>        The <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> to use for\nmanaging the timers that handle the rate-limiting behavior.</p>\n<p>用于管理处理限速行为的定时器。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable that performs rate-limiting of\nemissions from the source Observable.</p>\n<p>一个返回 Observable 的函数，该 Observable 会对来自源 Observable 进行发送速率的限制。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/auditTime#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/operators/audit\"><code>audit</code></a>\n</li>\n    <li><a href=\"api/operators/debounceTime\"><code>debounceTime</code></a>\n</li>\n    <li><a href=\"api/operators/delay\"><code>delay</code></a>\n</li>\n    <li><a href=\"api/operators/sampleTime\"><code>sampleTime</code></a>\n</li>\n    <li><a href=\"api/operators/throttleTime\"><code>throttleTime</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/audit\n - api/operators/debounce\n - api/operators/debounceTime\n - api/operators/delay\n - api/operators/delayWhen\n - api/operators/sampleTime\n - api/operators/throttleTime\n-->\n<!-- links from this doc:\n - /api\n - api/index/const/asyncScheduler\n - api/index/function/auditTime\n - api/index/function/fromEvent\n - api/index/function/throttleTime\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/interface/SchedulerLike\n - api/operators\n - api/operators/audit\n - api/operators/auditTime#audittime\n - api/operators/auditTime#example\n - api/operators/auditTime#see-also\n - api/operators/auditTime#例子\n - api/operators/debounceTime\n - api/operators/delay\n - api/operators/sampleTime\n - api/operators/throttleTime\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/auditTime.ts?message=docs(operators)%3A%20describe%20your%20change...#L5-L72\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/auditTime.ts#L5-L72\n-->"
}