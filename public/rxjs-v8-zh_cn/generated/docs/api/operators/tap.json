{
  "id": "api/operators/tap",
  "title": "tap",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/tap.ts?message=docs(operators)%3A%20describe%20your%20change...#L12-L171\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/tap.ts#L12-L171\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/tap\", \"name\": \"tap\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"tap\">tap<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/tap#tap\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Used to perform side-effects for notifications from the source observable</p>\n<p>用于对来自源 observable 的通知执行副作用</p>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>&#x3C;T>(observerOrNext?: Partial&#x3C;TapObserver&#x3C;T>> | ((value: T) => void)): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"observerOrNext\"></a>\n        <code>observerOrNext</code>\n      </td>\n      <td class=\"param-type\"><code>Partial&#x3C;TapObserver&#x3C;T>> | ((value: T) => void)</code></td>\n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code>undefined</code>。</p>\n<p>        A next handler or partial observer</p>\n<p>下一个值的处理器或部分 Observer</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable identical to the source, but\nruns the specified Observer or callback(s) for each item.</p>\n<p>返回与源相同的 Observable 的函数，但会为每个条目运行指定的 Observer 或回调。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/tap#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p><span class=\"informal\">Used when you want to affect outside state with a notification without altering the notification</span></p>\n<p><span class=\"informal\">当你想借助某个通知来影响外部状态而不想更改此通知时使用</span></p>\n<p><img src=\"/assets/images/marble-diagrams/tap.png\" width=\"100%\" alt=\"tap marble diagram\"></p>\n<p>Tap is designed to allow the developer a designated place to perform side effects. While you <em>could</em> perform side-effects\ninside of a <code><a href=\"api/index/function/map\" class=\"code-anchor\">map</a></code> or a <code><a href=\"api/index/function/mergeMap\" class=\"code-anchor\">mergeMap</a></code>, that would make their mapping functions impure, which isn't always a big deal, but will\nmake it so you can't do things like memoize those functions. The <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> operator is designed solely for such side-effects to\nhelp you remove side-effects from other operations.</p>\n<p>tap 旨在让开发者在指定的地方执行副作用。虽然你<em>可以</em>在 <code><a href=\"api/index/function/map\" class=\"code-anchor\">map</a></code> 或 <code><a href=\"api/index/function/mergeMap\" class=\"code-anchor\">mergeMap</a></code> 内部执行副作用，但这会使它们的映射函数不再纯净，这虽然不是什么大不了的，但会使你无法调用诸如 memoize 之类的函数。<code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> 操作符就是专为此类副作用设计的，以帮助你消除其它操作的副作用。</p>\n<p>For any notification, next, error, or complete, <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> will call the appropriate callback you have provided to it, via a function\nreference, or a partial observer, then pass that notification down the stream.</p>\n<p>对于任何通知：下一个、出错或完成，<code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> 都将通过函数引用或部分 Observer 调用你提供给它的适当回调，然后将该通知传递到流中。</p>\n<p>The observable returned by <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> is an exact mirror of the source, with one exception: Any error that occurs -- synchronously -- in a handler\nprovided to <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> will be emitted as an error from the returned observable.</p>\n<p><code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> 返回的 observable 是源的精准镜像，但有一个例外：在提供给 <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> 的处理器中同步发生的任何错误都将作为结果 observable 中的错误进行发送。</p>\n<blockquote>\n<p>Be careful! You can mutate objects as they pass through the <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> operator's handlers.</p>\n<p>小心！你可以在某些对象通过 <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> 操作符的处理器时对其进行修改。</p>\n</blockquote>\n<p>The most common use of <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> is actually for debugging. You can place a <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(console.log)</code> anywhere\nin your observable <code><a href=\"api/index/function/pipe\" class=\"code-anchor\">pipe</a></code>, log out the notifications as they are emitted by the source returned by the previous\noperation.</p>\n<p><code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> 最常见的用途实际上是用于调试。你可以在 Observable <code><a href=\"api/index/function/pipe\" class=\"code-anchor\">pipe</a></code> 中的任何位置放置一个 <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(console.log)</code>，以记录这些通知，因为它们是由以前的操作返回的源发出来的。</p>\n<h2 id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/tap#examples\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/tap#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Check a random number before it is handled. Below is an observable that will use a random number between 0 and 1,\nand emit <code>'big'</code> or <code>'small'</code> depending on the size of that number. But we wanted to log what the original number\nwas, so we have added a <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(console.log)</code>.</p>\n<p>在处理之前检查一个随机数。下面是一个 observable，它将使用 0 到 1 之间的随机数，并根据该数字的大小发送 <code>'big'</code> 或 <code>'small'</code>。但是我们还想记录其原始数字是多少，所以我们添加了一个 <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(console.log)</code>。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a> } from 'rxjs';\n\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(Math.random()).pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(console.log),\n  <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(n => n > 0.5 ? 'big' : 'small')\n).subscribe(console.log);\n</code-example>\n<p>Using <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> to analyze a value and force an error. Below is an observable where in our system we only\nwant to emit numbers 3 or less we get from another source. We can force our observable to error\nusing <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code>.</p>\n<p>使用 <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> 分析某个值并强制出错。下面是一个 observable，在我们的系统中，只想发送从另一个来源获得的 3 或更小的数字。我们可以使用 <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> 来强制我们的 observable 出错。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a> } from 'rxjs';\n\nconst source = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3, 4, 5);\n\nsource.pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(n => {\n    if (n > 3) {\n      throw new TypeError(`Value ${ n } is greater than 3`);\n    }\n  })\n)\n.subscribe({ next: console.log, error: err => console.log(err.message) });\n</code-example>\n<p>We want to know when an observable completes before moving on to the next observable. The system\nbelow will emit a random series of <code>'X'</code> characters from 3 different observables in sequence. The\nonly way we know when one observable completes and moves to the next one, in this case, is because\nwe have added a <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> with the side effect of logging to console.</p>\n<p>我们想知道一个 observable 何时完成，然后再继续处理下一个 observable。下面的系统将从 3 个不同的 observables 中依次发送一系列随机的 <code>'X'</code> 字符。在这种情况下，我们知道一个 observable 何时完成并移动到下一个的唯一方法是因为我们添加了一个带有把日志记录到控制台这个副作用的 <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code>。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/concatMap\" class=\"code-anchor\">concatMap</a>, <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a> } from 'rxjs';\n\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3).pipe(\n  <a href=\"api/index/function/concatMap\" class=\"code-anchor\">concatMap</a>(n => <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000).pipe(\n    <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(Math.round(Math.random() * 10)),\n    <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(() => 'X'),\n    <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>({ complete: () => console.log(`Done with ${ n }`) })\n  ))\n)\n.subscribe(console.log);\n</code-example>\n\n</section>\n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/tap#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/operators/finalize\"><code>finalize</code></a>\n</li>\n    <li><a href=\"api/index/class/Observable#subscribe\"><code>Observable</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/timeout\n-->\n<!-- links from this doc:\n - /api\n - api/index/class/Observable#subscribe\n - api/index/function/concatMap\n - api/index/function/interval\n - api/index/function/map\n - api/index/function/mergeMap\n - api/index/function/of\n - api/index/function/pipe\n - api/index/function/take\n - api/index/function/tap\n - api/index/interface/MonoTypeOperatorFunction\n - api/operators\n - api/operators/finalize\n - api/operators/tap#description\n - api/operators/tap#examples\n - api/operators/tap#see-also\n - api/operators/tap#tap\n - api/operators/tap#例子\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/tap.ts?message=docs(operators)%3A%20describe%20your%20change...#L12-L171\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/tap.ts#L12-L171\n-->"
}