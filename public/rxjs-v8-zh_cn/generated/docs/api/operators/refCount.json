{
  "id": "api/operators/refCount",
  "title": "refCount",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/refCount.ts?message=docs(operators)%3A%20describe%20your%20change...#L6-L134\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/refCount.ts#L6-L134\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/refCount\", \"name\": \"refCount\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"refcount\">refCount<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/refCount#refcount\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    <label class=\"api-status-label deprecated\">已弃用</label>\n    \n    \n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Make a <a href=\"api/index/class/ConnectableObservable\"><code>ConnectableObservable</code></a> behave like a ordinary observable and automates the way\nyou can connect to it.</p>\n<p>让 <a href=\"api/index/class/ConnectableObservable\"><code>ConnectableObservable</code></a> 的行为就像一个普通的 observable，但你能自动连接到它。</p>\n<p>Internally it counts the subscriptions to the observable and subscribes (only once) to the source if\nthe number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\nunsubscribes from the source. This way you can make sure that everything before the <em>published</em>\nrefCount has only a single subscription independently of the number of subscribers to the target\nobservable.</p>\n<p>在内部，它会对 observable 的订阅进行计数，如果订阅数大于 0，则订阅源（只一次）。如果订阅数小于 1，则从源退订。这样，你可以确保<em>已发布</em>的 refCount 之前的所有内容都只有一个订阅，而与目标 observable 的订阅者数量无关。</p>\n<p>Note that using the <a href=\"api/operators/share\"><code>share</code></a> operator is exactly the same as using the <code><a href=\"api/index/function/multicast\" class=\"code-anchor\">multicast</a>(() => new <a href=\"api/index/class/Subject\" class=\"code-anchor\">Subject</a>())</code> operator\n(making the observable hot) and the <em>refCount</em> operator in a sequence.</p>\n<p>请注意，使用 <a href=\"api/operators/share\"><code>share</code></a> 操作符与依次使用 <code><a href=\"api/index/function/multicast\" class=\"code-anchor\">multicast</a>(() => new <a href=\"api/index/class/Subject\" class=\"code-anchor\">Subject</a>())</code> 操作符（使 observable 变成热的）和<em>refCount</em>操作符的效果完全相同。</p>\n<p><img src=\"/assets/images/marble-diagrams/refCount.png\" width=\"100%\" alt=\"refCount marble diagram\"></p>\n<h2 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/refCount#example\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/refCount#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>In the following example there are two intervals turned into connectable observables\nby using the <em>publish</em> operator. The first one uses the <em>refCount</em> operator, the\nsecond one does not use it. You will notice that a connectable observable does nothing\nuntil you call its connect function.</p>\n<p>在下面的示例中，使用 <em>publish</em> 操作符将两个定期重复 Observable 转换为可连接的 observable。第一个会使用 <em>refCount</em> 操作符，第二个则不使用。你会注意到一个可连接的 observable 在你调用它的 connect 函数之前什么都不做。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>, <a href=\"api/index/function/publish\" class=\"code-anchor\">publish</a>, refCount } from 'rxjs';\n\n// Turn the <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a> <a href=\"api/index/const/observable\" class=\"code-anchor\">observable</a> into a <a href=\"api/index/class/ConnectableObservable\" class=\"code-anchor\">ConnectableObservable</a> (hot)\nconst refCountInterval = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(400).pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(num => console.log(`refCount ${ num }`)),\n  <a href=\"api/index/function/publish\" class=\"code-anchor\">publish</a>(),\n  refCount()\n);\n\nconst publishedInterval = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(400).pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(num => console.log(`<a href=\"api/index/function/publish\" class=\"code-anchor\">publish</a> ${ num }`)),\n  <a href=\"api/index/function/publish\" class=\"code-anchor\">publish</a>()\n);\n\nrefCountInterval.subscribe();\nrefCountInterval.subscribe();\n// 'refCount 0' -----> 'refCount 1' -----> etc\n// All subscriptions will receive the same value and the <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a> (and\n// <a href=\"api/index/function/every\" class=\"code-anchor\">every</a> other operator) before the `<a href=\"api/index/function/publish\" class=\"code-anchor\">publish</a>` operator will be executed\n// only once per event independently <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> the number <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> subscriptions.\n\npublishedInterval.subscribe();\n// Nothing happens until you call .connect() on the observable.\n</code-example>\n<p></p>\n  \n\n  \n<section class=\"deprecated\">\n  <h2 id=\"deprecation-notes\">弃用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/refCount#deprecation-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <p>Replaced with the <a href=\"api/operators/share\"><code>share</code></a> operator. How <code><a href=\"api/index/function/share\" class=\"code-anchor\">share</a></code> is used\nwill depend on the connectable observable you created just prior to the\n<code>refCount</code> operator.\nDetails: <a href=\"https://rxjs.dev/deprecations/multicasting\">https://rxjs.dev/deprecations/multicasting</a></p>\n<p>已替换为 <a href=\"api/operators/share\"><code>share</code></a> 操作符。如何使用 <code><a href=\"api/index/function/share\" class=\"code-anchor\">share</a></code> 取决于你在 <code>refCount</code> 操作符之前创建的可连接 observable。详细信息： <a href=\"https://rxjs.dev/deprecations/multicasting\">https://rxjs.dev/deprecations/multicasting</a></p>\n\n</section>\n\n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading deprecated-api-item\"> refCount&#x3C;T>(): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <p>没有参数。</p>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable that automates the connection\nto ConnectableObservable.</p>\n<p>返回一个 Observable 的函数，该 Observable 会自动连接到 ConnectableObservable。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/refCount#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/class/ConnectableObservable\"><code>ConnectableObservable</code></a>\n</li>\n    <li><a href=\"api/operators/share\"><code>share</code></a>\n</li>\n    <li><a href=\"api/operators/publish\"><code>publish</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/deprecations\n - api/operators\n-->\n<!-- links from this doc:\n - /api\n - api/index/class/ConnectableObservable\n - api/index/class/Subject\n - api/index/const/observable\n - api/index/function/every\n - api/index/function/interval\n - api/index/function/multicast\n - api/index/function/of\n - api/index/function/publish\n - api/index/function/share\n - api/index/function/tap\n - api/index/interface/MonoTypeOperatorFunction\n - api/operators\n - api/operators/publish\n - api/operators/refCount#deprecation-notes\n - api/operators/refCount#example\n - api/operators/refCount#refcount\n - api/operators/refCount#see-also\n - api/operators/refCount#例子\n - api/operators/share\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/refCount.ts?message=docs(operators)%3A%20describe%20your%20change...#L6-L134\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/refCount.ts#L6-L134\n - https://rxjs.dev/deprecations/multicasting\n-->"
}