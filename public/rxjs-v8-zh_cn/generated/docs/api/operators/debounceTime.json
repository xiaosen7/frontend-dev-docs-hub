{
  "id": "api/operators/debounceTime",
  "title": "debounceTime",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/debounceTime.ts?message=docs(operators)%3A%20describe%20your%20change...#L6-L143\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/debounceTime.ts#L6-L143\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/debounceTime\", \"name\": \"debounceTime\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"debouncetime\">debounceTime<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/debounceTime#debouncetime\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Emits a notification from the source Observable only after a particular time span\nhas passed without another source emission.</p>\n<p>只有在特定时间跨度过去且源没有发送其它值时，才会从源 Observable 发送通知。</p>\n<p><span class=\"informal\">It's like <a href=\"api/operators/delay\"><code>delay</code></a>, but passes only the most\nrecent notification from each burst of emissions.</span></p>\n<p><span class=\"informal\">类似于 <a href=\"api/operators/delay\"><code>delay</code></a>，但只传出每一轮密集发送时的最新通知。</span></p>\n<p><img src=\"/assets/images/marble-diagrams/debounceTime.png\" width=\"100%\" alt=\"debounceTime marble diagram\"></p>\n<p><code><a href=\"api/index/function/debounceTime\" class=\"code-anchor\">debounceTime</a></code> delays notifications emitted by the source Observable, but drops\nprevious pending delayed emissions if a new notification arrives on the source\nObservable. This operator keeps track of the most recent notification from the\nsource Observable, and emits that only when <code>dueTime</code> has passed\nwithout any other notification appearing on the source Observable. If a new value\nappears before <code>dueTime</code> silence occurs, the previous notification will be dropped\nand will not be emitted and a new <code>dueTime</code> is scheduled.\nIf the completing event happens during <code>dueTime</code> the last cached notification\nis emitted before the completion event is forwarded to the output observable.\nIf the error event happens during <code>dueTime</code> or after it only the error event is\nforwarded to the output observable. The cache notification is not emitted in this case.</p>\n<p><code><a href=\"api/index/function/debounceTime\" class=\"code-anchor\">debounceTime</a></code> 会延迟源 Observable 发送的通知，但如果源 Observable 上来了新的通知，则会丢弃先前已挂起的延迟发送物。该操作符会跟踪来自源 Observable 的最新通知，并且仅在已经过去了 <code>dueTime</code> 且源 Observable 上没有出现任何其它通知时才发送此通知。如果在 <code>dueTime</code> 静默期之前出现了新值，则先前的通知将被丢弃而不会发送，并且会安排在新的 <code>dueTime</code>。如果在 <code>dueTime</code> 期间发生了 complete 事件，则把此前发送的最后一个已缓存通知转发到输出 observable 。如果在 <code>dueTime</code> 期间或之后发生了 error 事件，则仅将此 error 事件转发到输出 observable。在这种情况下不会发送已缓存的通知。</p>\n<p>This is a rate-limiting operator, because it is impossible for more than one\nnotification to be emitted in any time window of duration <code>dueTime</code>, but it is also\na delay-like operator since output emissions do not occur at the same time as\nthey did on the source Observable. Optionally takes a <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> for\nmanaging timers.</p>\n<p>这是一个限速操作符，因为不可能在任何持续时间的时间窗口内发送多个 <code>dueTime</code>，但它同时也是一个延迟类的操作符，因为输出 Observable 上的值不会与源 Observable 上的值同时发出。可以选择使用 <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> 来管理定时器。</p>\n<h2 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/debounceTime#example\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/debounceTime#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Emit the most recent click after a burst of clicks</p>\n<p>在收到一阵疯狂点击之后只发出最近的点击</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/debounceTime\" class=\"code-anchor\">debounceTime</a> } from 'rxjs';\n\nconst clicks = <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click');\nconst result = clicks.pipe(<a href=\"api/index/function/debounceTime\" class=\"code-anchor\">debounceTime</a>(1000));\nresult.subscribe(x => console.log(x));\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/debounceTime\" class=\"code-anchor\">debounceTime</a>&#x3C;T>(dueTime: number, scheduler: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a> = <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"dueTime\"></a>\n        <code>dueTime</code>\n      </td>\n      <td class=\"param-type\"><code>number</code></td>\n      <td class=\"param-description\">\n      <p>        The timeout duration in milliseconds (or the time\nunit determined internally by the optional <code>scheduler</code>) for the window of\ntime required to wait for emission silence before emitting the most recent\nsource value.</p>\n<p>以毫秒为单位的超时持续时间（或由可选的 <code>scheduler</code> 自行设定的时间单位），用于在发送最近的源值之前等待发送静默时所需的时间窗口。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"scheduler\"></a>\n        <code>scheduler</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a></code></td>\n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code><a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a></code>。</p>\n<p>        The <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> to use for\nmanaging the timers that handle the timeout for each value.</p>\n<p>此 <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> 用来管理定时器，此定时器会用来处理每个值的超时。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable that delays the emissions of\nthe source Observable by the specified <code>dueTime</code>, and may drop some values\nif they occur too frequently.</p>\n<p>一个返回 Observable 的函数，它会将源 Observable 发出的值延迟指定的 <code>dueTime</code>，如果它们发生得太频繁，可能会丢弃一些值。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/debounceTime#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/operators/audit\"><code>audit</code></a>\n</li>\n    <li><a href=\"api/operators/auditTime\"><code>auditTime</code></a>\n</li>\n    <li><a href=\"api/operators/debounce\"><code>debounce</code></a>\n</li>\n    <li><a href=\"api/operators/sample\"><code>sample</code></a>\n</li>\n    <li><a href=\"api/operators/sampleTime\"><code>sampleTime</code></a>\n</li>\n    <li><a href=\"api/operators/throttle\"><code>throttle</code></a>\n</li>\n    <li><a href=\"api/operators/throttleTime\"><code>throttleTime</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/auditTime\n - api/operators/debounce\n - api/operators/delay\n - api/operators/delayWhen\n - api/operators/sampleTime\n - api/operators/throttleTime\n-->\n<!-- links from this doc:\n - /api\n - api/index/const/asyncScheduler\n - api/index/function/debounceTime\n - api/index/function/fromEvent\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/interface/SchedulerLike\n - api/operators\n - api/operators/audit\n - api/operators/auditTime\n - api/operators/debounce\n - api/operators/debounceTime#debouncetime\n - api/operators/debounceTime#example\n - api/operators/debounceTime#see-also\n - api/operators/debounceTime#例子\n - api/operators/delay\n - api/operators/sample\n - api/operators/sampleTime\n - api/operators/throttle\n - api/operators/throttleTime\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/debounceTime.ts?message=docs(operators)%3A%20describe%20your%20change...#L6-L143\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/debounceTime.ts#L6-L143\n-->"
}