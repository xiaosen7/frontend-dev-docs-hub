{
  "id": "api/operators/shareReplay",
  "title": "shareReplay",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/shareReplay.ts?message=docs(operators)%3A%20describe%20your%20change...#L14-L173\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/shareReplay.ts#L14-L173\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/shareReplay\", \"name\": \"shareReplay\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"sharereplay\">shareReplay<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#sharereplay\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Share source and replay specified number of emissions on subscription.</p>\n<p>This operator is a specialization of <code>replay</code> that connects to a source observable\nand multicasts through a <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> constructed with the specified arguments.\nA successfully completed source will stay cached in the <code><a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a></code>ed observable forever,\nbut an errored source can be retried.</p>\n<h2 id=\"why-use-sharereplay\">Why use <code><a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a></code>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#why-use-sharereplay\"><i class=\"material-icons\">link</i></a></h2>\n<p>You generally want to use <code><a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a></code> when you have side-effects or taxing computations\nthat you do not wish to be executed amongst multiple subscribers.\nIt may also be valuable in situations where you know you will have late subscribers to\na stream that need access to previously emitted values.\nThis ability to replay values on subscription is what differentiates <a href=\"api/operators/share\"><code>share</code></a> and <code><a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a></code>.</p>\n<h2 id=\"reference-counting\">Reference counting<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#reference-counting\"><i class=\"material-icons\">link</i></a></h2>\n<p>By default <code><a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a></code> will use <code>refCount</code> of false, meaning that it will <em>not</em> unsubscribe the\nsource when the reference counter drops to zero, i.e. the inner <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> will <em>not</em> be unsubscribed\n(and potentially run for ever).\nThis is the default as it is expected that <code><a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a></code> is often used to keep around expensive to setup\nobservables which we want to keep running instead of having to do the expensive setup again.</p>\n<p>As of RXJS version 6.4.0 a new overload signature was added to allow for manual control over what\nhappens when the operators internal reference counter drops to zero.\nIf <code>refCount</code> is true, the source will be unsubscribed from once the reference count drops to zero, i.e.\nthe inner <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> will be unsubscribed. All new subscribers will receive value emissions from a\nnew <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> which in turn will cause a new subscription to the source observable.</p>\n<h2 id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#examples\"><i class=\"material-icons\">link</i></a></h2>\n<p>Example with a third subscriber coming late to the party</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>, <a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a> } from 'rxjs';\n\nconst shared$ = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(2000).pipe(\n  <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(6),\n  <a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a>(3)\n);\n\nshared$.subscribe(x => console.log('sub A: ', x));\nshared$.subscribe(y => console.log('sub B: ', y));\n\nsetTimeout(() => {\n  shared$.subscribe(y => console.log('sub C: ', y));\n}, 11000);\n\n// Logs:\n// (after ~2000 ms)\n// sub A: 0\n// sub B: 0\n// (after ~4000 ms)\n// sub A: 1\n// sub B: 1\n// (after ~6000 ms)\n// sub A: 2\n// sub B: 2\n// (after ~8000 ms)\n// sub A: 3\n// sub B: 3\n// (after ~10000 ms)\n// sub A: 4\n// sub B: 4\n// (after ~11000 ms, sub C gets the <a href=\"api/index/function/last\" class=\"code-anchor\">last</a> 3 values)\n// sub C: 2\n// sub C: 3\n// sub C: 4\n// (after ~12000 ms)\n// sub A: 5\n// sub B: 5\n// sub C: 5\n</code-example>\n<p>Example for <code>refCount</code> usage</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>, <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a> } from 'rxjs';\n\nconst log = &#x3C;T>(name: string, source: <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T>) => source.pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>({\n    subscribe: () => console.log(`${ name }: subscribed`),\n    next: value => console.log(`${ name }: ${ value }`),\n    complete: () => console.log(`${ name }: completed`),\n    <a href=\"api/index/function/finalize\" class=\"code-anchor\">finalize</a>: () => console.log(`${ name }: unsubscribed`)\n  })\n);\n\nconst obs$ = log('source', <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000));\n\nconst shared$ = log('shared', obs$.pipe(\n  <a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a>({ bufferSize: 1, refCount: true }),\n  <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(2)\n));\n\nshared$.subscribe(x => console.log('sub A: ', x));\nshared$.subscribe(y => console.log('sub B: ', y));\n\n// PRINTS:\n// shared: subscribed &#x3C;-- reference <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 1\n// source: subscribed\n// shared: subscribed &#x3C;-- reference <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 2\n// source: 0\n// shared: 0\n// sub A: 0\n// shared: 0\n// sub B: 0\n// source: 1\n// shared: 1\n// sub A: 1\n// shared: completed &#x3C;-- <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(2) completes the subscription for sub A\n// shared: unsubscribed &#x3C;-- reference <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 1\n// shared: 1\n// sub B: 1\n// shared: completed &#x3C;-- <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(2) completes the subscription for sub B\n// shared: unsubscribed &#x3C;-- reference <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 0\n// source: unsubscribed &#x3C;-- replaySubject unsubscribes <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> source <a href=\"api/index/const/observable\" class=\"code-anchor\">observable</a> because the reference <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> dropped to 0 and refCount is true\n\n// In case <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> refCount being false, the unsubscribe is never called on the source and the source would keep on emitting, even if no subscribers\n// are listening.\n// source: 2\n// source: 3\n// source: 4\n// ...\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a>&#x3C;T>(configOrBufferSize?: number | <a href=\"api/index/interface/ShareReplayConfig\" class=\"code-anchor\">ShareReplayConfig</a>, <a href=\"api/index/function/windowTime\" class=\"code-anchor\">windowTime</a>?: number, scheduler?: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a>): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"configOrBufferSize\"></a>\n        <code>configOrBufferSize</code>\n      </td>\n      <td class=\"param-type\"><code>number | <a href=\"api/index/interface/ShareReplayConfig\" class=\"code-anchor\">ShareReplayConfig</a></code></td>\n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code>undefined</code>。</p>\n<p>        Maximum element count of the replay buffer or <a href=\"api/operators/ShareReplayConfig\">configuration</a>\nobject.</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"windowTime\"></a>\n        <code><a href=\"api/index/function/windowTime\" class=\"code-anchor\">windowTime</a></code>\n      </td>\n      <td class=\"param-type\"><code>number</code></td>\n      <td class=\"param-description\">\n              <p>可选。默认值为 <code>undefined</code>。</p>\n        <p>Maximum time length of the replay buffer in milliseconds.</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"scheduler\"></a>\n        <code>scheduler</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a></code></td>\n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code>undefined</code>。</p>\n<p>        Scheduler where connected observers within the selector function\nwill be invoked on.</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable sequence that contains the\nelements of a sequence produced by multicasting the source sequence within a\nselector function.</p>\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/operators/publish\"><code>publish</code></a>\n</li>\n    <li><a href=\"api/operators/share\"><code>share</code></a>\n</li>\n    <li><a href=\"api/operators/publishReplay\"><code>publishReplay</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/share\n-->\n<!-- links from this doc:\n - /api\n - api/index/class/Observable\n - api/index/class/ReplaySubject\n - api/index/const/observable\n - api/index/function/count\n - api/index/function/finalize\n - api/index/function/from\n - api/index/function/interval\n - api/index/function/last\n - api/index/function/of\n - api/index/function/shareReplay\n - api/index/function/take\n - api/index/function/tap\n - api/index/function/windowTime\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/interface/SchedulerLike\n - api/index/interface/ShareReplayConfig\n - api/operators\n - api/operators/ShareReplayConfig\n - api/operators/publish\n - api/operators/publishReplay\n - api/operators/share\n - api/operators/shareReplay#examples\n - api/operators/shareReplay#reference-counting\n - api/operators/shareReplay#see-also\n - api/operators/shareReplay#sharereplay\n - api/operators/shareReplay#why-use-sharereplay\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/shareReplay.ts?message=docs(operators)%3A%20describe%20your%20change...#L14-L173\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/shareReplay.ts#L14-L173\n-->"
}