{
  "id": "api/operators/subscribeOn",
  "title": "subscribeOn",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/subscribeOn.ts?message=docs(operators)%3A%20describe%20your%20change...#L3-L92\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/subscribeOn.ts#L3-L92\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/subscribeOn\", \"name\": \"subscribeOn\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"subscribeon\">subscribeOn<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/subscribeOn#subscribeon\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Asynchronously subscribes Observers to this Observable on the specified <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a>.</p>\n<p>在指定的 <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> 上异步订阅此 Observable 的各个 Observer。</p>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/subscribeOn\" class=\"code-anchor\">subscribeOn</a>&#x3C;T>(scheduler: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a>, <a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>: number = 0): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"scheduler\"></a>\n        <code>scheduler</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a></code></td>\n      <td class=\"param-description\">\n      <p>        The <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> to perform subscription actions on.</p>\n<p>要对其执行订阅操作的 <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a>。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"delay\"></a>\n        <code><a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a></code>\n      </td>\n      <td class=\"param-type\"><code>number</code></td>\n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code>0</code>。</p>\n<p>        A delay to pass to the scheduler to delay subscriptions</p>\n<p>一个延迟数量，用来传给调度器以对订阅进行延迟</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable modified so that its\nsubscriptions happen on the specified <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a>.</p>\n<p>一个返回 Observable 的函数，会修改此 Observable，以便它的订阅发生在指定的 <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> 上。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/subscribeOn#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p>With <code><a href=\"api/index/function/subscribeOn\" class=\"code-anchor\">subscribeOn</a></code> you can decide what type of scheduler a specific Observable will be using when it is subscribed to.</p>\n<p>通过 <code><a href=\"api/index/function/subscribeOn\" class=\"code-anchor\">subscribeOn</a></code>，你可以决定特定 Observable 在订阅时要使用哪种类型的调度器。</p>\n<p>Schedulers control the speed and order of emissions to observers from an Observable stream.</p>\n<p>调度器负责控制从 Observable 流向 Observer 的发送速度和顺序。</p>\n<p><img src=\"/assets/images/marble-diagrams/subscribeOn.png\" width=\"100%\" alt=\"subscribeOn marble diagram\"></p>\n<h2 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/subscribeOn#example\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/subscribeOn#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Given the following code:</p>\n<p>给定以下代码：</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a> } from 'rxjs';\n\nconst a = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3);\nconst b = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(4, 5, 6);\n\n<a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a>(a, b).subscribe(console.log);\n\n// Outputs\n// 1\n// 2\n// 3\n// 4\n// 5\n// 6\n</code-example>\n<p>Both Observable <code>a</code> and <code>b</code> will emit their values directly and synchronously once they are subscribed to.</p>\n<p>一旦订阅，<code>a</code> 和 <code>b</code> 这两个 Observable 都会直接同步发送它们的值。</p>\n<p>If we instead use the <code><a href=\"api/index/function/subscribeOn\" class=\"code-anchor\">subscribeOn</a></code> operator declaring that we want to use the <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a> for values emitted by Observable <code>a</code>:</p>\n<p>如果我们改为使用 <code><a href=\"api/index/function/subscribeOn\" class=\"code-anchor\">subscribeOn</a></code> 操作符来声明我们想要使用 <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a> 来处理 Observable <code>a</code> 发送的值：</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/subscribeOn\" class=\"code-anchor\">subscribeOn</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>, <a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a> } from 'rxjs';\n\nconst a = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3).pipe(<a href=\"api/index/function/subscribeOn\" class=\"code-anchor\">subscribeOn</a>(<a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>));\nconst b = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(4, 5, 6);\n\n<a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a>(a, b).subscribe(console.log);\n\n// Outputs\n// 4\n// 5\n// 6\n// 1\n// 2\n// 3\n</code-example>\n<p>The reason for this is that Observable <code>b</code> emits its values directly and synchronously like before\nbut the emissions from <code>a</code> are scheduled on the event loop because we are now using the <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a> for that specific Observable.</p>\n<p>这样做的原因是 Observable <code>b</code> 像以前一样直接和同步地发送它的值，但是来自 <code>a</code> 的发送是在事件循环上安排的，因为我们现在正在为那个特定的 Observable 使用 <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a>。</p>\n\n</section>\n\n\n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n-->\n<!-- links from this doc:\n - /api\n - api/index/const/asyncScheduler\n - api/index/function/delay\n - api/index/function/merge\n - api/index/function/of\n - api/index/function/subscribeOn\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/interface/SchedulerLike\n - api/operators\n - api/operators/subscribeOn#description\n - api/operators/subscribeOn#example\n - api/operators/subscribeOn#subscribeon\n - api/operators/subscribeOn#例子\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/subscribeOn.ts?message=docs(operators)%3A%20describe%20your%20change...#L3-L92\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/operators/subscribeOn.ts#L3-L92\n-->"
}