{
  "id": "api/fetch/fromFetch",
  "title": "fromFetch",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/dom/fetch.ts?message=docs(fetch)%3A%20describe%20your%20change...#L14-L208\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/dom/fetch.ts#L14-L208\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/fetch\", \"name\": \"rxjs/fetch\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/fetch/fromFetch\", \"name\": \"fromFetch\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/fetch\">rxjs/fetch</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"fromfetch\">fromFetch<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/fetch/fromFetch#fromfetch\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">the Fetch API</a> to\nmake an HTTP request.</p>\n<p>使用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">Fetch API</a> 发出 HTTP 请求。</p>\n<p><strong>WARNING</strong> Parts of the fetch API are still experimental. <code>AbortController</code> is\nrequired for this implementation to work and use cancellation appropriately.</p>\n<p><strong>警告</strong> fetch API 的部分内容仍处于试验阶段。此实现需要 <code>AbortController</code> 才能正常工作和使用取消功能。</p>\n<p>Will automatically set up an internal <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController\">AbortController</a>\nin order to finalize the internal <code>fetch</code> when the subscription tears down.</p>\n<p>将自动设置一个内部 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController\">AbortController</a> 以便在订阅拆解时拆解内部 <code>fetch</code>。</p>\n<p>If a <code>signal</code> is provided via the <code>init</code> argument, it will behave like it usually does with\n<code>fetch</code>. If the provided <code>signal</code> aborts, the error that <code>fetch</code> normally rejects with\nin that scenario will be emitted as an error from the observable.</p>\n<p>如果一个 <code>signal</code> 是通过 <code>init</code> 参数提供的，它的行为就像它通常对 <code>fetch</code> 所做的那样。如果提供的 <code>signal</code> 中止了，那么在这种情况下通常会拒绝 <code>fetch</code> 的错误，并将其作为此 observable 的错误发出。</p>\n<h2 id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/fetch/fromFetch#examples\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/fetch/fromFetch#例子\"><i class=\"material-icons\">link</i></a></h2>\n<p>Basic use</p>\n<p>基本用法</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/fetch/fromFetch\" class=\"code-anchor\">fromFetch</a> } from 'rxjs/fetch';\nimport { <a href=\"api/index/function/switchMap\" class=\"code-anchor\">switchMap</a>, <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/catchError\" class=\"code-anchor\">catchError</a> } from 'rxjs';\n\nconst data$ = <a href=\"api/fetch/fromFetch\" class=\"code-anchor\">fromFetch</a>('https://api.github.com/users?per_page=5').pipe(\n  <a href=\"api/index/function/switchMap\" class=\"code-anchor\">switchMap</a>(response => {\n    if (response.ok) {\n      // OK return data\n      return response.json();\n    } else {\n      // Server is returning a status requiring the client to try something else.\n      return <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>({ error: true, message: `Error ${ response.status }` });\n    }\n  }),\n  <a href=\"api/index/function/catchError\" class=\"code-anchor\">catchError</a>(err => {\n    // Network or other error, handle appropriately\n    console.error(err);\n    return <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>({ error: true, message: err.message })\n  })\n);\n\ndata$.subscribe({\n  next: result => console.log(result),\n  complete: () => console.log('done')\n});\n</code-example>\n<h3 id=\"use-with-chunked-transfer-encoding\">Use with Chunked Transfer Encoding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/fetch/fromFetch#use-with-chunked-transfer-encoding\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"与分块传输编码一起使用\">与分块传输编码一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/fetch/fromFetch#与分块传输编码一起使用\"><i class=\"material-icons\">link</i></a></h3>\n<p>With HTTP responses that use <a href=\"https://tools.ietf.org/html/rfc7230#section-3.3.1\">chunked transfer encoding</a>,\nthe promise returned by <code>fetch</code> will resolve as soon as the response's headers are\nreceived.</p>\n<p>对于使用<a href=\"https://tools.ietf.org/html/rfc7230#section-3.3.1\">分块传输编码</a>的 HTTP 响应，<code>fetch</code> 返回的 Promise 将在收到响应对象的标头后立即解析。</p>\n<p>That means the <code><a href=\"api/fetch/fromFetch\" class=\"code-anchor\">fromFetch</a></code> observable will emit a <code>Response</code> - and will\nthen complete - before the body is received. When one of the methods on the\n<code>Response</code> - like <code>text()</code> or <code>json()</code> - is called, the returned promise will not\nresolve until the entire body has been received. Unsubscribing from any observable\nthat uses the promise as an observable input will not abort the request.</p>\n<p>这意味着 <code><a href=\"api/fetch/fromFetch\" class=\"code-anchor\">fromFetch</a></code> observable 将在接收到 body 之前发出一个 <code>Response</code> - 然后完成。当调用 <code>Response</code> 上的方法之一（如 <code>text()</code> 或 <code>json()</code> 时，返回的 Promise 将在收到整个 body 之前不会解析。退订任何使用 Promise 作为可观察输入的 Observable 不会中止请求。</p>\n<p>To facilitate aborting the retrieval of responses that use chunked transfer encoding,\na <code>selector</code> can be specified via the <code>init</code> parameter:</p>\n<p>为了便于中止检索使用分块传输编码的响应对象，可以通过 <code>init</code> 参数指定 <code>selector</code> ：</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> } from 'rxjs';\nimport { <a href=\"api/fetch/fromFetch\" class=\"code-anchor\">fromFetch</a> } from 'rxjs/fetch';\n\nconst data$ = <a href=\"api/fetch/fromFetch\" class=\"code-anchor\">fromFetch</a>('https://api.github.com/users?per_page=5', {\n  selector: response => response.json()\n});\n\ndata$.subscribe({\n  next: result => console.log(result),\n  complete: () => console.log('done')\n});\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/fetch/fromFetch\" class=\"code-anchor\">fromFetch</a>&#x3C;T>(input: string | Request, initWithSelector: RequestInit &#x26; { selector?: (response: Response) => <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;T>; } = {}): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;Response | T></code-example>\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"input\"></a>\n        <code>input</code>\n      </td>\n      <td class=\"param-type\"><code>string | Request</code></td>\n      <td class=\"param-description\">\n      <p>        The resource you would like to fetch. Can be a url or a request object.</p>\n<p>你要获取的资源。可以是 url 或请求对象。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"initWithSelector\"></a>\n        <code>initWithSelector</code>\n      </td>\n      <td class=\"param-type\"><code>RequestInit &#x26; { selector?: (response: Response) => <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;T>; }</code></td>\n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code>{}</code>。</p>\n<p>        A configuration object for the fetch.\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters\">See MDN for more details</a></p>\n<p>获取的配置对象。<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters\">有关更多详细信息，请参阅 MDN</a></p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;Response | T></code>: An Observable, that when subscribed to, performs an HTTP request using the native <code>fetch</code>\nfunction. The <a href=\"api/index/class/Subscription\"><code>Subscription</code></a> is tied to an <code>AbortController</code> for the fetch.</p>\n<p>一个 Observable，当被订阅时，它使用原生 <code>fetch</code> 函数执行 HTTP 请求。<a href=\"api/index/class/Subscription\"><code>Subscription</code></a> 绑定到 <code>AbortController</code> 以进行获取。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/fetch\n - guide/importing\n-->\n<!-- links from this doc:\n - /api\n - api/fetch\n - api/fetch/fromFetch#examples\n - api/fetch/fromFetch#fromfetch\n - api/fetch/fromFetch#use-with-chunked-transfer-encoding\n - api/fetch/fromFetch#与分块传输编码一起使用\n - api/fetch/fromFetch#例子\n - api/index/class/Observable\n - api/index/class/Subscription\n - api/index/function/catchError\n - api/index/function/of\n - api/index/function/switchMap\n - api/index/type-alias/ObservableInput\n - https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n - https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n - https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/dom/fetch.ts?message=docs(fetch)%3A%20describe%20your%20change...#L14-L208\n - https://github.com/reactivex/rxjs/tree/8.0.0-alpha.7/src/internal/observable/dom/fetch.ts#L14-L208\n - https://tools.ietf.org/html/rfc7230#section-3.3.1\n-->"
}