{
  "id": "api/index/function/connect",
  "title": "connect",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/ReactiveX/rxjs/edit/master/src/internal/operators/connect.ts?message=docs(index)%3A%20describe%20your%20change...#L23-L108\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/ReactiveX/rxjs/tree/8.0.0-alpha.14/src/internal/operators/connect.ts#L23-L108\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/connect\", \"name\": \"connect\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"connect\">connect<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/connect#connect\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n    <label class=\"api-status-label operator\">operator</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Creates an observable by multicasting the source within a function that\nallows the developer to define the usage of the multicast prior to connection.</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a>&#x3C;T, O extends <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;unknown>>(selector: (shared: Observable&#x3C;T>) => O, config: <a href=\"api/index/interface/ConnectConfig\" class=\"code-anchor\">ConnectConfig</a>&#x3C;T> = DEFAULT_CONFIG): <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, <a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;O>></code-example>\n\n\n\n<h4 class=\"no-anchor\" id=\"parameters\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"selector\"></a>\n        <code>selector</code>\n      </td>\n      <td class=\"param-type\"><code>(shared: Observable&#x3C;T>) => O</code></td>\n      <td class=\"param-description\">\n      <p>        A function used to set up the multicast. Gives you a multicast observable\nthat is not yet connected. With that, you're expected to create and return\nan Observable, that when subscribed to, will utilize the multicast observable.\nAfter this function is executed -- and its return value subscribed to -- the\noperator will subscribe to the source, and the connection will be made.</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"config\"></a>\n        <code>config</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/index/interface/ConnectConfig\" class=\"code-anchor\">ConnectConfig&#x3C;T></a></code></td>\n      <td class=\"param-description\">\n              <p>Optional. Default is <code>DEFAULT_CONFIG</code>.</p>\n        <p>The configuration object for <code><a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a></code>.</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\" id=\"returns\">Returns</h4>\n<p><code><a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, <a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;O>></code></p>\n\n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/connect#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p>This is particularly useful if the observable source you wish to multicast could\nbe synchronous or asynchronous. This sets it apart from <a href=\"api/index/function/share\"><code>share</code></a>, which, in the\ncase of totally synchronous sources will fail to share a single subscription with\nmultiple consumers, as by the time the subscription to the result of <a href=\"api/index/function/share\"><code>share</code></a>\nhas returned, if the source is synchronous its internal reference count will jump from\n0 to 1 back to 0 and reset.</p>\n<p>To use <code><a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a></code>, you provide a <code>selector</code> function that will give you\na multicast observable that is not yet connected. You then use that multicast observable\nto create a resulting observable that, when subscribed, will set up your multicast. This is\ngenerally, but not always, accomplished with <a href=\"api/index/function/merge\"><code>merge</code></a>.</p>\n<p>Note that using a <a href=\"api/index/function/takeUntil\"><code>takeUntil</code></a> inside of <code><a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a></code>'s <code>selector</code> <em>might</em> mean you were looking\nto use the <a href=\"api/index/function/takeWhile\"><code>takeWhile</code></a> operator instead.</p>\n<p>When you subscribe to the result of <code><a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a></code>, the <code>selector</code> function will be called. After\nthe <code>selector</code> function returns, the observable it returns will be subscribed to, <em>then</em> the\nmulticast will be connected to the source.</p>\n<h2 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/connect#example\"><i class=\"material-icons\">link</i></a></h2>\n<p>Sharing a totally synchronous observable</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>, <a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a>, <a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>, <a href=\"api/index/function/filter\" class=\"code-anchor\">filter</a> } from 'rxjs';\n\nconst source$ = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3, 4, 5).pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>({\n    subscribe: () => console.log('subscription started'),\n    next: n => console.log(`source emitted ${ n }`)\n  })\n);\n\nsource$.pipe(\n  // Notice in here we're merging 3 subscriptions to `shared$`.\n  <a href=\"api/index/function/connect\" class=\"code-anchor\">connect</a>(shared$ => <a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a>(\n    shared$.pipe(<a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(n => `all ${ n }`)),\n    shared$.pipe(<a href=\"api/index/function/filter\" class=\"code-anchor\">filter</a>(n => n % 2 === 0), <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(n => `even ${ n }`)),\n    shared$.pipe(<a href=\"api/index/function/filter\" class=\"code-anchor\">filter</a>(n => n % 2 === 1), <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(n => `odd ${ n }`))\n  ))\n)\n.subscribe(console.log);\n\n// Expected output: (notice only one subscription)\n'subscription started'\n'source emitted 1'\n'all 1'\n'odd 1'\n'source emitted 2'\n'all 2'\n'even 2'\n'source emitted 3'\n'all 3'\n'odd 3'\n'source emitted 4'\n'all 4'\n'even 4'\n'source emitted 5'\n'all 5'\n'odd 5'\n</code-example>\n\n</section>\n\n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - api/index/function/connectable\n - api/index/interface/ConnectConfig\n - api/index/interface/Connectable\n - api/operators/connect\n - deprecations/multicasting\n - guide/subject\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/function/connect#connect\n - api/index/function/connect#description\n - api/index/function/connect#example\n - api/index/function/filter\n - api/index/function/map\n - api/index/function/merge\n - api/index/function/of\n - api/index/function/share\n - api/index/function/takeUntil\n - api/index/function/takeWhile\n - api/index/function/tap\n - api/index/interface/ConnectConfig\n - api/index/interface/OperatorFunction\n - api/index/type-alias/ObservableInput\n - api/index/type-alias/ObservedValueOf\n - https://github.com/ReactiveX/rxjs/edit/master/src/internal/operators/connect.ts?message=docs(index)%3A%20describe%20your%20change...#L23-L108\n - https://github.com/ReactiveX/rxjs/tree/8.0.0-alpha.14/src/internal/operators/connect.ts#L23-L108\n-->"
}