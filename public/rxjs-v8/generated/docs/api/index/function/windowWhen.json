{
  "id": "api/index/function/windowWhen",
  "title": "windowWhen",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/ReactiveX/rxjs/edit/master/src/internal/operators/windowWhen.ts?message=docs(index)%3A%20describe%20your%20change...#L6-L133\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/ReactiveX/rxjs/tree/8.0.0-alpha.14/src/internal/operators/windowWhen.ts#L6-L133\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/windowWhen\", \"name\": \"windowWhen\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"windowwhen\">windowWhen<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/windowWhen#windowwhen\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n    <label class=\"api-status-label operator\">operator</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Branch out the source Observable values as a nested Observable using a\nfactory function of closing Observables to determine when to start a new\nwindow.</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/windowWhen\" class=\"code-anchor\">windowWhen</a>&#x3C;T>(closingSelector: () => any): <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, Observable&#x3C;T>></code-example>\n\n\n\n<h4 class=\"no-anchor\" id=\"parameters\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"closingSelector\"></a>\n        <code>closingSelector</code>\n      </td>\n      <td class=\"param-type\"><code>() => any</code></td>\n      <td class=\"param-description\">\n      <p>        A function that takes no arguments and returns an\n<a href=\"api/index/type-alias/ObservableInput\"><code>ObservableInput</code></a> (that gets converted to Observable) that signals\nwhen to close the previous window and start a new one. Note that a value (any value) must be\nobserved to signal window closure.</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\" id=\"returns\">Returns</h4>\n<p><code><a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, Observable&#x3C;T>></code>: A function that returns an Observable of windows, which in turn are\nObservables.</p>\n\n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/windowWhen#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p><span class=\"informal\">It's like <a href=\"api/index/function/bufferWhen\"><code>bufferWhen</code></a>, but emits a nested\nObservable instead of an array.</span></p>\n<p><img src=\"/assets/images/marble-diagrams/windowWhen.svg\" width=\"100%\" alt=\"windowWhen marble diagram\"></p>\n<p>Returns an Observable that emits Observable windows of items it collects from\nthe source Observable. The output Observable emits connected, non-overlapping\nwindows. It emits the current window immediately when subscribing to the source\nObservable and opens a new one whenever the Observable produced by the specified\n<code>closingSelector</code> function emits <code>next</code>. When an Observable returned by the\n<code>closingSelector</code> emits <code>next</code>, the previous window completes and a new window\nis emitted to the output subscriber.</p>\n<h2 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/windowWhen#example\"><i class=\"material-icons\">link</i></a></h2>\n<p>Emit only the first two clicks events in every window of [1-5] random seconds</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/windowWhen\" class=\"code-anchor\">windowWhen</a>, <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>, <a href=\"api/index/function/mergeAll\" class=\"code-anchor\">mergeAll</a> } from 'rxjs';\n\nconst clicks = <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click');\nconst result = clicks.pipe(\n  <a href=\"api/index/function/windowWhen\" class=\"code-anchor\">windowWhen</a>(() => <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000 + Math.random() * 4000)),\n  <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(win => win.pipe(<a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(2))), // <a href=\"api/index/function/take\" class=\"code-anchor\">take</a> at most 2 emissions from each <a href=\"api/index/function/window\" class=\"code-anchor\">window</a>\n  <a href=\"api/index/function/mergeAll\" class=\"code-anchor\">mergeAll</a>()                     // flatten the Observable-of-Observables\n);\nresult.subscribe(x => console.log(x));\n</code-example>\n\n</section>\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">See Also<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/windowWhen#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/window\"><code>window</code></a>\n</li>\n    <li><a href=\"api/index/function/windowCount\"><code>windowCount</code></a>\n</li>\n    <li><a href=\"api/index/function/windowTime\"><code>windowTime</code></a>\n</li>\n    <li><a href=\"api/index/function/windowToggle\"><code>windowToggle</code></a>\n</li>\n    <li><a href=\"api/index/function/bufferWhen\"><code>bufferWhen</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - api/index/function/bufferWhen\n - api/index/function/window\n - api/index/function/windowCount\n - api/index/function/windowTime\n - api/index/function/windowToggle\n - api/operators/windowWhen\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/function/bufferWhen\n - api/index/function/fromEvent\n - api/index/function/interval\n - api/index/function/map\n - api/index/function/mergeAll\n - api/index/function/take\n - api/index/function/window\n - api/index/function/windowCount\n - api/index/function/windowTime\n - api/index/function/windowToggle\n - api/index/function/windowWhen#description\n - api/index/function/windowWhen#example\n - api/index/function/windowWhen#see-also\n - api/index/function/windowWhen#windowwhen\n - api/index/interface/OperatorFunction\n - api/index/type-alias/ObservableInput\n - https://github.com/ReactiveX/rxjs/edit/master/src/internal/operators/windowWhen.ts?message=docs(index)%3A%20describe%20your%20change...#L6-L133\n - https://github.com/ReactiveX/rxjs/tree/8.0.0-alpha.14/src/internal/operators/windowWhen.ts#L6-L133\n-->"
}