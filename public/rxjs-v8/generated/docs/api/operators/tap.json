{
  "id": "api/operators/tap",
  "title": "tap",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/ReactiveX/rxjs/edit/master/src/internal/operators/tap.ts?message=docs(operators)%3A%20describe%20your%20change...#L72-L195\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/ReactiveX/rxjs/tree/8.0.0-alpha.14/src/internal/operators/tap.ts#L72-L195\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/tap\", \"name\": \"tap\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"tap\">tap<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/tap#tap\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n    <label class=\"api-status-label operator\">operator</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Used to perform side-effects for notifications from the source observable</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>&#x3C;T>(observerOrNext?: Partial&#x3C;<a href=\"api/index/interface/TapObserver\" class=\"code-anchor\">TapObserver</a>&#x3C;T>> | ((value: T) => void)): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n<h4 class=\"no-anchor\" id=\"parameters\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"observerOrNext\"></a>\n        <code>observerOrNext</code>\n      </td>\n      <td class=\"param-type\"><code>Partial&#x3C;<a href=\"api/index/interface/TapObserver\" class=\"code-anchor\">TapObserver</a>&#x3C;T>> | ((value: T) => void)</code></td>\n      <td class=\"param-description\">\n              <p>Optional. Default is <code>undefined</code>.</p>\n        <p>A next handler or partial observer</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\" id=\"returns\">Returns</h4>\n<p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable identical to the source, but\nruns the specified Observer or callback(s) for each item.</p>\n\n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/tap#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p><span class=\"informal\">Used when you want to affect outside state with a notification without altering the notification</span></p>\n<p><img src=\"/assets/images/marble-diagrams/tap.png\" width=\"100%\" alt=\"tap marble diagram\"></p>\n<p>Tap is designed to allow the developer a designated place to perform side effects. While you <em>could</em> perform side-effects\ninside of a <code><a href=\"api/index/function/map\" class=\"code-anchor\">map</a></code> or a <code><a href=\"api/index/function/mergeMap\" class=\"code-anchor\">mergeMap</a></code>, that would make their mapping functions impure, which isn't always a big deal, but will\nmake it so you can't do things like memoize those functions. The <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> operator is designed solely for such side-effects to\nhelp you remove side-effects from other operations.</p>\n<p>For any notification, next, error, or complete, <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> will call the appropriate callback you have provided to it, via a function\nreference, or a partial observer, then pass that notification down the stream.</p>\n<p>The observable returned by <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> is an exact mirror of the source, with one exception: Any error that occurs -- synchronously -- in a handler\nprovided to <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> will be emitted as an error from the returned observable.</p>\n<blockquote>\n<p>Be careful! You can mutate objects as they pass through the <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> operator's handlers.</p>\n</blockquote>\n<p>The most common use of <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> is actually for debugging. You can place a <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(console.log)</code> anywhere\nin your observable <code><a href=\"api/index/function/pipe\" class=\"code-anchor\">pipe</a></code>, log out the notifications as they are emitted by the source returned by the previous\noperation.</p>\n<h2 id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/tap#examples\"><i class=\"material-icons\">link</i></a></h2>\n<p>Check a random number before it is handled. Below is an observable that will use a random number between 0 and 1,\nand emit <code>'big'</code> or <code>'small'</code> depending on the size of that number. But we wanted to log what the original number\nwas, so we have added a <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(console.log)</code>.</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a> } from 'rxjs';\n\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(Math.random()).pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(console.log),\n  <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(n => n > 0.5 ? 'big' : 'small')\n).subscribe(console.log);\n</code-example>\n<p>Using <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> to analyze a value and force an error. Below is an observable where in our system we only\nwant to emit numbers 3 or less we get from another source. We can force our observable to error\nusing <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code>.</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a> } from 'rxjs';\n\nconst source = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3, 4, 5);\n\nsource.pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(n => {\n    if (n > 3) {\n      throw new TypeError(`Value ${ n } is greater than 3`);\n    }\n  })\n)\n.subscribe({ next: console.log, error: err => console.log(err.message) });\n</code-example>\n<p>We want to know when an observable completes before moving on to the next observable. The system\nbelow will emit a random series of <code>'X'</code> characters from 3 different observables in sequence. The\nonly way we know when one observable completes and moves to the next one, in this case, is because\nwe have added a <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> with the side effect of logging to console.</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/concatMap\" class=\"code-anchor\">concatMap</a>, <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a> } from 'rxjs';\n\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3).pipe(\n  <a href=\"api/index/function/concatMap\" class=\"code-anchor\">concatMap</a>(n => <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000).pipe(\n    <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(Math.round(Math.random() * 10)),\n    <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(() => 'X'),\n    <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>({ complete: () => console.log(`Done with ${ n }`) })\n  ))\n)\n.subscribe(console.log);\n</code-example>\n\n</section>\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">See Also<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/tap#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/operators/finalize\"><code>finalize</code></a>\n</li>\n    <li><a href=\"api/operators/TapObserver\"><code>TapObserver</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/TapObserver\n - api/operators/timeout\n-->\n<!-- links from this doc:\n - /api\n - api/index/function/concatMap\n - api/index/function/interval\n - api/index/function/map\n - api/index/function/mergeMap\n - api/index/function/of\n - api/index/function/pipe\n - api/index/function/take\n - api/index/function/tap\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/interface/TapObserver\n - api/operators\n - api/operators/TapObserver\n - api/operators/finalize\n - api/operators/tap#description\n - api/operators/tap#examples\n - api/operators/tap#see-also\n - api/operators/tap#tap\n - https://github.com/ReactiveX/rxjs/edit/master/src/internal/operators/tap.ts?message=docs(operators)%3A%20describe%20your%20change...#L72-L195\n - https://github.com/ReactiveX/rxjs/tree/8.0.0-alpha.14/src/internal/operators/tap.ts#L72-L195\n-->"
}