{
  "id": "api/operators/sequenceEqual",
  "title": "sequenceEqual",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/ReactiveX/rxjs/edit/master/src/internal/operators/sequenceEqual.ts?message=docs(operators)%3A%20describe%20your%20change...#L3-L124\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/ReactiveX/rxjs/tree/8.0.0-alpha.14/src/internal/operators/sequenceEqual.ts#L3-L124\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/sequenceEqual\", \"name\": \"sequenceEqual\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"sequenceequal\">sequenceEqual<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/sequenceEqual#sequenceequal\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n    <label class=\"api-status-label operator\">operator</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>Compares all values of two observables in sequence using an optional comparator function\nand returns an observable of a single boolean value representing whether or not the two sequences\nare equal.</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/sequenceEqual\" class=\"code-anchor\">sequenceEqual</a>&#x3C;T>(compareTo: any, comparator: (a: T, b: T) => boolean = (a, b) => a === b): <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, boolean></code-example>\n\n\n\n<h4 class=\"no-anchor\" id=\"parameters\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"compareTo\"></a>\n        <code>compareTo</code>\n      </td>\n      <td class=\"param-type\"><code>any</code></td>\n      <td class=\"param-description\">\n              <p>The <code><a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a></code> sequence to compare the source sequence to.</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"comparator\"></a>\n        <code>comparator</code>\n      </td>\n      <td class=\"param-type\"><code>(a: T, b: T) => boolean</code></td>\n      <td class=\"param-description\">\n              <p>Optional. Default is <code>(a, b) => a === b</code>.</p>\n        <p>An optional function to compare each value pair.</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\" id=\"returns\">Returns</h4>\n<p><code><a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, boolean></code>: A function that returns an Observable that emits a single boolean\nvalue representing whether or not the values emitted by the source\nObservable and provided <code><a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a></code> were equal in sequence.</p>\n\n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/sequenceEqual#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p><span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span></p>\n<p><img src=\"/assets/images/marble-diagrams/sequenceEqual.png\" width=\"100%\" alt=\"sequenceEqual marble diagram\"></p>\n<p><code><a href=\"api/index/function/sequenceEqual\" class=\"code-anchor\">sequenceEqual</a></code> subscribes to source observable and <code>compareTo</code> <code><a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a></code> (that internally\ngets converted to an observable) and buffers incoming values from each observable. Whenever either\nobservable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\nup; If any value pair doesn't match, the returned observable will emit <code>false</code> and complete. If one of the\nobservables completes, the operator will wait for the other observable to complete; If the other\nobservable emits before completing, the returned observable will emit <code>false</code> and complete. If one observable never\ncompletes or emits after the other completes, the returned observable will never complete.</p>\n<h2 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/sequenceEqual#example\"><i class=\"material-icons\">link</i></a></h2>\n<p>Figure out if the Konami code matches</p>\n<code-example language=\"ts\">\nimport { from, <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>, <a href=\"api/index/function/bufferCount\" class=\"code-anchor\">bufferCount</a>, <a href=\"api/index/function/mergeMap\" class=\"code-anchor\">mergeMap</a>, <a href=\"api/index/function/sequenceEqual\" class=\"code-anchor\">sequenceEqual</a> } from 'rxjs';\n\nconst codes = from([\n  'ArrowUp',\n  'ArrowUp',\n  'ArrowDown',\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowLeft',\n  'ArrowRight',\n  'KeyB',\n  'KeyA',\n  'Enter', // no start key, clearly.\n]);\n\nconst keys = <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>&#x3C;KeyboardEvent>(document, 'keyup').pipe(<a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(e => e.code));\nconst matches = keys.pipe(\n  <a href=\"api/index/function/bufferCount\" class=\"code-anchor\">bufferCount</a>(11, 1),\n  <a href=\"api/index/function/mergeMap\" class=\"code-anchor\">mergeMap</a>(last11 => from(last11).pipe(<a href=\"api/index/function/sequenceEqual\" class=\"code-anchor\">sequenceEqual</a>(codes)))\n);\nmatches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n</code-example>\n\n</section>\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">See Also<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/sequenceEqual#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/combineLatest\"><code>combineLatest</code></a>\n</li>\n    <li><a href=\"api/index/function/zip\"><code>zip</code></a>\n</li>\n    <li><a href=\"api/operators/withLatestFrom\"><code>withLatestFrom</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n-->\n<!-- links from this doc:\n - /api\n - api/index/function/bufferCount\n - api/index/function/combineLatest\n - api/index/function/fromEvent\n - api/index/function/map\n - api/index/function/mergeMap\n - api/index/function/sequenceEqual\n - api/index/function/zip\n - api/index/interface/OperatorFunction\n - api/index/type-alias/ObservableInput\n - api/operators\n - api/operators/sequenceEqual#description\n - api/operators/sequenceEqual#example\n - api/operators/sequenceEqual#see-also\n - api/operators/sequenceEqual#sequenceequal\n - api/operators/withLatestFrom\n - https://github.com/ReactiveX/rxjs/edit/master/src/internal/operators/sequenceEqual.ts?message=docs(operators)%3A%20describe%20your%20change...#L3-L124\n - https://github.com/ReactiveX/rxjs/tree/8.0.0-alpha.14/src/internal/operators/sequenceEqual.ts#L3-L124\n-->"
}