{
  "id": "api/operators/ShareConfig",
  "title": "ShareConfig",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/ReactiveX/rxjs/edit/master/src/internal/operators/share.ts?message=docs(operators)%3A%20describe%20your%20change...#L5-L44\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/ReactiveX/rxjs/tree/8.0.0-alpha.14/src/internal/operators/share.ts#L5-L44\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/ShareConfig\", \"name\": \"ShareConfig\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"shareconfig\">ShareConfig<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/ShareConfig#shareconfig\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p>\n  \n  \n  <section class=\"interface-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/index/interface/ShareConfig\" class=\"code-anchor\">ShareConfig</a>&#x3C;T> {\n  <a class=\"code-anchor\" href=\"api/operators/ShareConfig#connector\">connector?: () => SubjectLike&#x3C;T></a>\n  <a class=\"code-anchor\" href=\"api/operators/ShareConfig#resetOnError\">resetOnError?: boolean | ((error: any) => ObservableInput&#x3C;any>)</a>\n  <a class=\"code-anchor\" href=\"api/operators/ShareConfig#resetOnComplete\">resetOnComplete?: boolean | (() => ObservableInput&#x3C;any>)</a>\n  <a class=\"code-anchor\" href=\"api/operators/ShareConfig#resetOnRefCountZero\">resetOnRefCountZero?: boolean | (() => ObservableInput&#x3C;any>)</a>\n}\n</code-example>\n\n  \n  \n\n\n  \n  \n\n</section>\n  \n  \n  \n<section class=\"instance-properties\">\n  <h2 id=\"properties\">Properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/ShareConfig#properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table properties-table\">\n    <thead>\n      <tr><th>Property</th><th>Type</th><th>Description</th></tr>\n    </thead>\n    <tbody>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"connector\"></a><code class=\"\">connector</code></td>\n        <td><label class=\"property-type-label\"><code>() => <a href=\"api/index/interface/SubjectLike\" class=\"code-anchor\">SubjectLike</a>&#x3C;T></code></label></td>\n        <td>\n          <p>The factory used to create the subject that will connect the source observable to\nmulticast consumers.</p>\n\n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"resetOnError\"></a><code class=\"\">resetOnError</code></td>\n        <td><label class=\"property-type-label\"><code>boolean | ((error: any) => <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;any>)</code></label></td>\n        <td>\n          <p>If <code>true</code>, the resulting observable will reset internal state on error from source and return to a \"cold\" state. This\nallows the resulting observable to be \"retried\" in the event of an error.\nIf <code>false</code>, when an error comes from the source it will push the error into the connecting subject, and the subject\nwill remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent retries\nor resubscriptions will resubscribe to that same subject. In all cases, RxJS subjects will emit the same error again, however\n<a href=\"api/index/class/ReplaySubject\"><code>ReplaySubject</code></a> will also push its buffered values before pushing the error.\nIt is also possible to pass a notifier factory returning an <code><a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a></code> instead which grants more fine-grained\ncontrol over how and when the reset should happen. This allows behaviors like conditional or delayed resets.</p>\n\n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"resetOnComplete\"></a><code class=\"\">resetOnComplete</code></td>\n        <td><label class=\"property-type-label\"><code>boolean | (() => <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;any>)</code></label></td>\n        <td>\n          <p>If <code>true</code>, the resulting observable will reset internal state on completion from source and return to a \"cold\" state. This\nallows the resulting observable to be \"repeated\" after it is done.\nIf <code>false</code>, when the source completes, it will push the completion through the connecting subject, and the subject\nwill remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent repeats\nor resubscriptions will resubscribe to that same subject.\nIt is also possible to pass a notifier factory returning an <code><a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a></code> instead which grants more fine-grained\ncontrol over how and when the reset should happen. This allows behaviors like conditional or delayed resets.</p>\n\n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"resetOnRefCountZero\"></a><code class=\"\">resetOnRefCountZero</code></td>\n        <td><label class=\"property-type-label\"><code>boolean | (() => <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;any>)</code></label></td>\n        <td>\n          <p>If <code>true</code>, when the number of subscribers to the resulting observable reaches zero due to those subscribers unsubscribing, the\ninternal state will be reset and the resulting observable will return to a \"cold\" state. This means that the next\ntime the resulting observable is subscribed to, a new subject will be created and the source will be subscribed to\nagain.\nIf <code>false</code>, when the number of subscribers to the resulting observable reaches zero due to unsubscription, the subject\nwill remain connected to the source, and new subscriptions to the result will be connected through that same subject.\nIt is also possible to pass a notifier factory returning an <code><a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a></code> instead which grants more fine-grained\ncontrol over how and when the reset should happen. This allows behaviors like conditional or delayed resets.</p>\n\n          \n          \n        </td>\n    </tr>\n    \n    </tbody>\n  </table>\n</section>\n  \n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n-->\n<!-- links from this doc:\n - /api\n - api/index/class/ReplaySubject\n - api/index/interface/ShareConfig\n - api/index/interface/SubjectLike\n - api/index/type-alias/ObservableInput\n - api/operators\n - api/operators/ShareConfig#connector\n - api/operators/ShareConfig#properties\n - api/operators/ShareConfig#resetOnComplete\n - api/operators/ShareConfig#resetOnError\n - api/operators/ShareConfig#resetOnRefCountZero\n - api/operators/ShareConfig#shareconfig\n - https://github.com/ReactiveX/rxjs/edit/master/src/internal/operators/share.ts?message=docs(operators)%3A%20describe%20your%20change...#L5-L44\n - https://github.com/ReactiveX/rxjs/tree/8.0.0-alpha.14/src/internal/operators/share.ts#L5-L44\n-->"
}