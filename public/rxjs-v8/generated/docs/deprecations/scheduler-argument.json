{
  "id": "deprecations/scheduler-argument",
  "title": "Scheduler Argument",
  "contents": "\n<div class=\"content\">\n<h1 id=\"scheduler-argument\">Scheduler Argument<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#scheduler-argument\"><i class=\"material-icons\">link</i></a></h1>\n<p>To limit the API surface of some operators, but also prepare for a <a href=\"https://github.com/ReactiveX/rxjs/pull/4583\">major refactoring in V8</a>, we\nagreed on deprecating the <code>scheduler</code> argument from many operators. It solely deprecates those methods where this argument is rarely used. So <code>time</code> related\noperators, like <a href=\"https://rxjs.dev/api/index/function/interval\"><code>interval</code></a> are not affected by this deprecation.</p>\n<p>To support this transition the <a href=\"/api/index/function/scheduled\">scheduled creation function</a> was added.</p>\n<div class=\"alert is-important\">\n    <span>\n        This deprecation was introduced in RxJS 6.5 and will become breaking with RxJS 8.\n    </span>\n</div>\n<h2 id=\"operators-affected-by-this-change\">Operators affected by this Change<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#operators-affected-by-this-change\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li><a href=\"/api/index/function/from\">from</a></li>\n<li><a href=\"/api/index/function/of\">of</a></li>\n<li><a href=\"/api/index/function/merge\">merge</a></li>\n<li><a href=\"/api/index/function/concat\">concat</a></li>\n<li><a href=\"/api/operators/startWith\">startWith</a></li>\n<li><a href=\"/api/operators/endWith\">endWith</a></li>\n<li><a href=\"/api/index/function/combineLatest\">combineLatest</a></li>\n</ul>\n<h2 id=\"how-to-refactor\">How to Refactor<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#how-to-refactor\"><i class=\"material-icons\">link</i></a></h2>\n<p>If you use any operator from the above list and you're passing the <code>scheduler</code> argument, you have three potential refactoring options.</p>\n<h3 id=\"refactoring-of-of-and-from\">Refactoring of <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a></code> and <code>from</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#refactoring-of-of-and-from\"><i class=\"material-icons\">link</i></a></h3>\n<p><code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> is kinda copying the behavior of <code>from</code>. Therefore if you used <code>from</code> with a <code>scheduler</code> argument, you can just replace them.</p>\n<p>For the <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a></code> creation function you need to replace this Observable with <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> and instead of passing the <code>scheduler</code> argument to <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a></code> pass it to <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code>.\nFollowing code example demonstrate this process.</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>, <a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a> } from 'rxjs';\n\n// Deprecated approach\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>).subscribe((x) => console.log(x));\n// suggested approach\n<a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a>([1, 2, 3], <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>).subscribe((x) => console.log(x));\n</code-example>\n<h3 id=\"refactoring-of-merge-concat-combinelatest-startwith-and-endwith\">Refactoring of <code><a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a></code>, <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code>, <code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code>, <code><a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a></code> and <code><a href=\"api/index/function/endWith\" class=\"code-anchor\">endWith</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#refactoring-of-merge-concat-combinelatest-startwith-and-endwith\"><i class=\"material-icons\">link</i></a></h3>\n<p>In case you used to pass a scheduler argument to one of these operators you probably had code like this:</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a>, <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a> } from 'rxjs';\n\n<a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a>(<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('hello '), <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('World'), <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>).subscribe((x) => console.log(x));\n</code-example>\n<p>To work around this deprecation you can leverage the <a href=\"/api/index/function/scheduled\"><code>scheduled</code></a> function.</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a>, <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>, <a href=\"api/index/function/concatAll\" class=\"code-anchor\">concatAll</a> } from 'rxjs';\n\n<a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a>([<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('hello '), <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('World')], <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>)\n  .pipe(<a href=\"api/index/function/concatAll\" class=\"code-anchor\">concatAll</a>())\n  .subscribe((x) => console.log(x));\n</code-example>\n<p>You can apply this pattern to refactor deprecated usage of <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code>, <code><a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a></code> and <code><a href=\"api/index/function/endWith\" class=\"code-anchor\">endWith</a></code> but do notice that you will want to use <a href=\"/api/operators/mergeAll\">mergeAll</a> to refactor the deprecated usage of <code><a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a></code>.</p>\n<p>With <code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code>, you will want to use <a href=\"/api/operators/combineLatestAll\">combineLatestAll</a></p>\n<p>E.g. code that used to look like this:</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>, <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a> } from 'rxjs';\n\n<a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>(<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('hello '), <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('World'), <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>).subscribe(console.log);\n</code-example>\n<p>would become:</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a>, <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>, <a href=\"api/index/function/combineLatestAll\" class=\"code-anchor\">combineLatestAll</a> } from 'rxjs';\n\n<a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a>([<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('hello '), <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('World')], <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>)\n  .pipe(<a href=\"api/index/function/combineLatestAll\" class=\"code-anchor\">combineLatestAll</a>())\n  .subscribe((x) => console.log(x));\n</code-example>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /api/index/function/combineLatest\n - /api/index/function/concat\n - /api/index/function/from\n - /api/index/function/merge\n - /api/index/function/of\n - /api/index/function/scheduled\n - /api/operators/combineLatestAll\n - /api/operators/endWith\n - /api/operators/mergeAll\n - /api/operators/startWith\n - api/index/const/asyncScheduler\n - api/index/function/combineLatest\n - api/index/function/combineLatestAll\n - api/index/function/concat\n - api/index/function/concatAll\n - api/index/function/endWith\n - api/index/function/merge\n - api/index/function/of\n - api/index/function/scheduled\n - api/index/function/startWith\n - deprecations/scheduler-argument#how-to-refactor\n - deprecations/scheduler-argument#operators-affected-by-this-change\n - deprecations/scheduler-argument#refactoring-of-merge-concat-combinelatest-startwith-and-endwith\n - deprecations/scheduler-argument#refactoring-of-of-and-from\n - deprecations/scheduler-argument#scheduler-argument\n - https://github.com/ReactiveX/rxjs/pull/4583\n - https://rxjs.dev/api/index/function/interval\n-->"
}