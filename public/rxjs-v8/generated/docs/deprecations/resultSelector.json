{
  "id": "deprecations/resultSelector",
  "title": "ResultSelector Parameter",
  "contents": "\n<div class=\"content\">\n<h1 id=\"resultselector-parameter\">ResultSelector Parameter<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/resultSelector#resultselector-parameter\"><i class=\"material-icons\">link</i></a></h1>\n<p>Some operator supported a resultSelector argument that acted as mapping function on the result of that operator.\nThe same behavior can be reproduced with the <code><a href=\"api/index/function/map\" class=\"code-anchor\">map</a></code> operator, therefore this argument became deprecated.</p>\n<div class=\"alert is-important\">\n    <span>\n        This deprecation was introduced in RxJS 6.0 and will become breaking with RxJS 8.\n    </span>\n</div>\n<p>There were two reasons for actually deprecating those parameters:</p>\n<ol>\n<li>It increases the bundle size of every operator</li>\n<li>In some scenarios values had to be retained in memory causing a general memory pressure</li>\n</ol>\n<h2 id=\"operators-affected-by-this-change\">Operators affected by this Change<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/resultSelector#operators-affected-by-this-change\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li><a href=\"/api/operators/concatMap\">concatMap</a></li>\n<li><a href=\"/api/operators/concatMapTo\">concatMapTo</a></li>\n<li><a href=\"/api/operators/exhaustMap\">exhaustMap</a></li>\n<li><a href=\"/api/operators/mergeMap\">mergeMap</a></li>\n<li><a href=\"/api/operators/mergeMapTo\">mergeMapTo</a></li>\n<li><a href=\"/api/operators/switchMap\">switchMap</a></li>\n<li><a href=\"/api/operators/switchMapTo\">switchMapTo</a></li>\n</ul>\n<h2 id=\"how-to-refactor\">How to Refactor<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/resultSelector#how-to-refactor\"><i class=\"material-icons\">link</i></a></h2>\n<p>Instead of using the <code>resultSelector</code> Argument, you can leverage the <a href=\"/api/operators/map\"><code>map</code></a> operator on the inner Observable:</p>\n<!-- prettier-ignore -->\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/switchMap\" class=\"code-anchor\">switchMap</a>, <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a> } from 'rxjs';\n\n// deprecated\n<a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click').pipe(\n  <a href=\"api/index/function/switchMap\" class=\"code-anchor\">switchMap</a>((x) => <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000), (_, x) => x + 1)\n);\n// suggested change\n<a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click').pipe(\n  <a href=\"api/index/function/switchMap\" class=\"code-anchor\">switchMap</a>((x) => <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000).pipe(<a href=\"api/index/function/map\" class=\"code-anchor\">map</a>((x) => x + 1)))\n);\n</code-example>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /api/operators/concatMap\n - /api/operators/concatMapTo\n - /api/operators/exhaustMap\n - /api/operators/map\n - /api/operators/mergeMap\n - /api/operators/mergeMapTo\n - /api/operators/switchMap\n - /api/operators/switchMapTo\n - api/index/function/fromEvent\n - api/index/function/interval\n - api/index/function/map\n - api/index/function/switchMap\n - deprecations/resultSelector#how-to-refactor\n - deprecations/resultSelector#operators-affected-by-this-change\n - deprecations/resultSelector#resultselector-parameter\n-->"
}