{
  "id": "deprecations/breaking-changes",
  "title": "Breaking Changes in Version 7",
  "contents": "\n<div class=\"content\">\n<h1 id=\"breaking-changes-in-version-7\">Breaking Changes in Version 7<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#breaking-changes-in-version-7\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"general\">General<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#general\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>\n<p><strong>TS:</strong> RxJS requires TS 4.2</p>\n</li>\n<li>\n<p><strong>rxjs-compat:</strong> <code>rxjs-compat</code> is not published for v7</p>\n</li>\n<li>\n<p><strong>toPromise:</strong> toPromise return type now returns <code>T | undefined</code> in TypeScript, which is correct, but may break builds.</p>\n</li>\n<li>\n<p><strong>Subscription:</strong> <code>add</code> no longer returns an unnecessary Subscription reference. This was done to prevent confusion caused by a legacy behavior. You can now add and remove functions and Subscriptions as teardowns to and from a <code>Subscription</code> using <code>add</code> and <code>remove</code> directly. Before this, <code>remove</code> only accepted subscriptions.</p>\n</li>\n<li>\n<p><strong>Observable:</strong> <code>lift</code> no longer exposed. It was <em>NEVER</em> documented that end users of the library should be creating operators using <code>lift</code>. Lift has a <a href=\"https://github.com/ReactiveX/rxjs/issues/5431\">variety of issues</a> and was always an internal implementation detail of rxjs that might have been used by a few power users in the early days when it had the most value. The value of <code>lift</code>, originally, was that subclassed <code>Observable</code>s would compose through all operators that implemented lift. The reality is that feature is not widely known, used, or supported, and it was never documented as it was very experimental when it was first added. Until the end of v7, <code>lift</code> will remain on Observable. Standard JavaScript users will notice no difference. However, TypeScript users might see complaints about <code>lift</code> not being a member of observable. To workaround this issue there are two things you can do: 1. Rewrite your operators as <a href=\"https://rxjs.dev/guide/operators\">outlined in the documentation</a>, such that they return <code>new Observable</code>. or 2. cast your observable as <code>any</code> and access <code>lift</code> that way. Method 1 is recommended if you do not want things to break when we move to version 8.</p>\n</li>\n<li>\n<p><strong>Subscriber:</strong> <code>new Subscriber</code> no longer takes 0-3 arguments. To create a <code>Subscriber</code> with 0-3 arguments, use <code>Subscriber.create</code>. However, please note that there is little to no reason that you should be creating <code>Subscriber</code> references directly, and <code>Subscriber.create</code> and <code>new Subscriber</code> are both deprecated.</p>\n</li>\n<li>\n<p><strong>onUnhandledError:</strong> Errors that occur during setup of an observable subscription after the subscription has emitted an error or completed will now throw in their own call stack. Before it would call <code>console.warn</code>. This is potentially breaking in edge cases for node applications, which may be configured to terminate for unhandled exceptions. In the unlikely event this affects you, you can configure the behavior to <code>console.warn</code> in the new configuration setting like so: <code>import { config } from 'rxjs'; config.onUnhandledError = (err) => console.warn(err);</code></p>\n</li>\n<li>\n<p><strong>RxJS Error types</strong> Tests that are written with naive expectations against errors may fail now that errors have a proper <code>stack</code> property. In some testing frameworks, a deep equality check on two error instances will check the values in <code>stack</code>, which could be different.</p>\n</li>\n<li>\n<p><code>unsubscribe</code> no longer available via the <code>this</code> context of observer functions. To reenable, set <code>config.useDeprecatedNextContext = true</code> on the rxjs <code>config</code> found at <code>import { config } from 'rxjs';</code>. Note that enabling this will result in a performance penalty for all consumer subscriptions.</p>\n</li>\n<li>\n<p>Leaked implementation detail <code>_unsubscribeAndRecycle</code> of <code>Subscriber</code> has been removed. Just use new <code>Subscription</code> objects</p>\n</li>\n<li>\n<p>The static <code>sortActions</code> method on <code><a href=\"api/index/class/VirtualTimeScheduler\" class=\"code-anchor\">VirtualTimeScheduler</a></code> is no longer publicly exposed by our TS types.</p>\n</li>\n<li>\n<p><code>Notification.createNext(undefined)</code> will no longer return the exact same reference every time.</p>\n</li>\n<li>\n<p>Type signatures tightened up around <code>Notification</code> and <code><a href=\"api/index/function/dematerialize\" class=\"code-anchor\">dematerialize</a></code>, may uncover issues with invalid types passed to those operators.</p>\n</li>\n<li>\n<p>Experimental support for <code>for await</code> has been removed. Use <a href=\"https://github.com/benlesh/rxjs-for-await\">https://github.com/benlesh/rxjs-for-await</a> instead.</p>\n</li>\n<li>\n<p><code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> no longer schedules emissions when a scheduler is provided. If you need that behavior,\nplease compose in <code><a href=\"api/index/function/observeOn\" class=\"code-anchor\">observeOn</a></code> using <code><a href=\"api/index/function/pipe\" class=\"code-anchor\">pipe</a></code>, for example: <code>new <a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a>(2, 3000).pipe(<a href=\"api/index/function/observeOn\" class=\"code-anchor\">observeOn</a>(asap))</code></p>\n</li>\n<li>\n<p><strong>rxjs-compat:</strong> <code>rxjs/Rx</code> is no longer a valid import site.</p>\n</li>\n</ul>\n<h2 id=\"operators\">Operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#operators\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"concat\">concat<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#concat\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li><strong>concat:</strong> Generic signature changed. Recommend not explicitly passing generics, just let inference do its job. If you must, cast with <code>as</code>.</li>\n<li><strong>of:</strong> Generic signature changed, do not specify generics, allow them to be inferred or use <code>as</code></li>\n</ul>\n<h3 id=\"count\">count<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#count\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li><strong>count:</strong> No longer passes <code>source</code> observable as a third argument to the predicate. That feature was rarely used, and of limited value. The workaround is to simply close over the source inside of the function if you need to access it in there.</li>\n</ul>\n<h3 id=\"defer\">defer<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#defer\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li><code><a href=\"api/index/function/defer\" class=\"code-anchor\">defer</a></code> no longer allows factories to return <code>void</code> or <code>undefined</code>. All factories passed to defer must return a proper <code><a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a></code>, such as <code>Observable</code>, <code>Promise</code>, et al. To get the same behavior as you may have relied on previously, <code>return <a href=\"api/index/const/EMPTY\" class=\"code-anchor\">EMPTY</a></code> or <code>return <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>()</code> from the factory.</li>\n</ul>\n<h3 id=\"map\">map<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#map\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li><strong>map:</strong> <code>thisArg</code> will now default to <code>undefined</code>. The previous default of <code>MapSubscriber</code> never made any sense. This will only affect code that calls map with a <code>function</code> and references <code>this</code> like so: <code>source.pipe(<a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(function () { console.log(this); }))</code>. There wasn't anything useful about doing this, so the breakage is expected to be very minimal. If anything we're no longer leaking an implementation detail.</li>\n</ul>\n<h3 id=\"mergescan\">mergeScan<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#mergescan\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li><strong>mergeScan:</strong> <code><a href=\"api/index/function/mergeScan\" class=\"code-anchor\">mergeScan</a></code> will no longer emit its inner state again upon completion.</li>\n</ul>\n<h3 id=\"of\">of<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#of\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li><strong>of:</strong> Use with more than 9 arguments, where the last argument is a <code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a></code> may result in the wrong type which includes the <code><a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a></code>, even though the run time implementation does not support that. Developers should be using <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> instead</li>\n</ul>\n<h3 id=\"pairs\">pairs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#pairs\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li><strong>pairs:</strong> <code>pairs</code> will no longer function in IE without a polyfill for <code>Object.entries</code>. <code>pairs</code> itself is also deprecated in favor of users just using <code>from(Object.entries(obj))</code>.</li>\n</ul>\n<h3 id=\"race\">race<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#race\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li><strong>race:</strong> <code><a href=\"api/index/function/race\" class=\"code-anchor\">race</a>()</code> will no longer subscribe to subsequent observables if a provided source synchronously errors or completes. This means side effects that might have occurred during subscription in those rare cases will no longer occur.</li>\n</ul>\n<h3 id=\"repeat\">repeat<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#repeat\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li>An undocumented behavior where passing a negative count argument to <code><a href=\"api/index/function/repeat\" class=\"code-anchor\">repeat</a></code> would result in an observable that repeats forever.</li>\n</ul>\n<h3 id=\"retry\">retry<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#retry\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li>Removed an undocumented behavior where passing a negative count argument to <code><a href=\"api/index/function/retry\" class=\"code-anchor\">retry</a></code> would result in an observable that repeats forever.</li>\n</ul>\n<h3 id=\"single\">single<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#single\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li><code><a href=\"api/index/function/single\" class=\"code-anchor\">single</a></code> operator will now throw for scenarios where values coming in are either not present, or do not match the provided predicate. Error types have thrown have also been updated, please check documentation for changes.</li>\n</ul>\n<h3 id=\"skiplast\">skipLast<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#skiplast\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li><strong>skipLast:</strong> <code><a href=\"api/index/function/skipLast\" class=\"code-anchor\">skipLast</a></code> will no longer error when passed a negative number, rather it will simply return the source, as though <code>0</code> was passed.</li>\n</ul>\n<h3 id=\"startwith\">startWith<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#startwith\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li><strong>startWith:</strong> <code><a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a></code> will return incorrect types when called with more than 7 arguments and a scheduler. Passing scheduler to startWith is deprecated</li>\n</ul>\n<h3 id=\"take\">take<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#take\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li><code><a href=\"api/index/function/take\" class=\"code-anchor\">take</a></code> and will now throw runtime error for arguments that are negative or NaN, this includes non-TS calls like <code><a href=\"api/index/function/take\" class=\"code-anchor\">take</a>()</code>.</li>\n</ul>\n<h3 id=\"takelast\">takeLast<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#takelast\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li><code><a href=\"api/index/function/takeLast\" class=\"code-anchor\">takeLast</a></code> now has runtime assertions that throw <code>TypeError</code>s for invalid arguments. Calling takeLast without arguments or with an argument that is <code>NaN</code> will throw a <code>TypeError</code></li>\n</ul>\n<h3 id=\"throwerror\">throwError<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#throwerror\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li><strong>throwError:</strong> In an extreme corner case for usage, <code><a href=\"api/index/function/throwError\" class=\"code-anchor\">throwError</a></code> is no longer able to emit a function as an error directly. If you need to push a function as an error, you will have to use the factory function to return the function like so: <code><a href=\"api/index/function/throwError\" class=\"code-anchor\">throwError</a>(() => functionToEmit)</code>, in other words <code><a href=\"api/index/function/throwError\" class=\"code-anchor\">throwError</a>(() => () => console.log('called later'))</code>.</li>\n</ul>\n<h3 id=\"timestamp\">timestamp<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#timestamp\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li><code><a href=\"api/index/function/timestamp\" class=\"code-anchor\">timestamp</a></code> operator accepts a <code><a href=\"api/index/interface/TimestampProvider\" class=\"code-anchor\">TimestampProvider</a></code>, which is any object with a <code>now</code> method\nthat returns a number. This means pulling in less code for the use of the <code><a href=\"api/index/function/timestamp\" class=\"code-anchor\">timestamp</a></code> operator. This may cause\nissues with <code><a href=\"api/testing/TestScheduler\" class=\"code-anchor\">TestScheduler</a></code> run mode. (see <a href=\"https://github.com/ReactiveX/rxjs/issues/5553\">Issue here</a>)</li>\n</ul>\n<h3 id=\"zip\">zip<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#zip\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li>\n<p><strong>zip:</strong> Zipping a single array will now have a different result. This is an extreme corner-case, because it is very unlikely that anyone would want to zip an array with nothing at all. The workaround would be to wrap the array in another array <code><a href=\"api/index/function/zip\" class=\"code-anchor\">zip</a>([[1,2,3]])</code>. But again, that's pretty weird.</p>\n</li>\n<li>\n<p><strong>zip:</strong> <code><a href=\"api/index/function/zip\" class=\"code-anchor\">zip</a></code> operators will no longer iterate provided iterables \"as needed\", instead the iterables will be treated as push-streams just like they would be everywhere else in RxJS. This means that passing an endless iterable will result in the thread locking up, as it will endlessly try to read from that iterable. This puts us in-line with all other Rx implementations. To work around this, it is probably best to use <code><a href=\"api/index/function/map\" class=\"code-anchor\">map</a></code> or some combination of <code><a href=\"api/index/function/map\" class=\"code-anchor\">map</a></code> and <code><a href=\"api/index/function/zip\" class=\"code-anchor\">zip</a></code>. For example, <code><a href=\"api/index/function/zip\" class=\"code-anchor\">zip</a>(source$, iterator)</code> could be <code>source$.pipe(<a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(value => [value, iterator.next().value]))</code>.</p>\n</li>\n</ul>\n<h2 id=\"ajax\">ajax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/breaking-changes#ajax\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>\n<p><code>ajax</code> body serialization will now use default XHR behavior in all cases. If the body is a <code>Blob</code>, <code>ArrayBuffer</code>, any array buffer view (like a byte sequence, e.g. <code>Uint8Array</code>, etc), <code>FormData</code>, <code>URLSearchParams</code>, <code>string</code>, or <code>ReadableStream</code>, default handling is use. If the <code>body</code> is otherwise <code>typeof</code> <code>\"object\"</code>, then it will be converted to JSON via <code>JSON.stringify</code>, and the <code>Content-Type</code> header will be set to <code>application/json;charset=utf-8</code>. All other types will emit an error.</p>\n</li>\n<li>\n<p>The <code>Content-Type</code> header passed to <code>ajax</code> configuration no longer has any effect on the serialization behavior of the AJAX request.</p>\n</li>\n<li>\n<p>For TypeScript users, <code><a href=\"api/ajax/AjaxRequest\" class=\"code-anchor\">AjaxRequest</a></code> is no longer the type that should be explicitly used to create an <code>ajax</code>. It is now <code><a href=\"api/ajax/AjaxConfig\" class=\"code-anchor\">AjaxConfig</a></code>, although the two types are compatible, only <code><a href=\"api/ajax/AjaxConfig\" class=\"code-anchor\">AjaxConfig</a></code> has <code>progressSubscriber</code> and <code>createXHR</code>.</p>\n</li>\n<li>\n<p><strong>ajax:</strong> In an extreme corner-case... If an error occurs, the responseType is <code>\"json\"</code>, we're in IE, and the <code>responseType</code> is not valid JSON, the <code>ajax</code> observable will no longer emit a syntax error, rather it will emit a full <code><a href=\"api/ajax/AjaxError\" class=\"code-anchor\">AjaxError</a></code> with more details.</p>\n</li>\n<li>\n<p><strong>ajax:</strong> Ajax implementation drops support for IE10 and lower. This puts us in-line with other implementations and helps clean up code in this area</p>\n</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/ajax/AjaxConfig\n - api/ajax/AjaxError\n - api/ajax/AjaxRequest\n - api/index/class/ReplaySubject\n - api/index/class/VirtualTimeScheduler\n - api/index/const/EMPTY\n - api/index/function/defer\n - api/index/function/dematerialize\n - api/index/function/map\n - api/index/function/mergeScan\n - api/index/function/observeOn\n - api/index/function/of\n - api/index/function/pipe\n - api/index/function/race\n - api/index/function/repeat\n - api/index/function/retry\n - api/index/function/scheduled\n - api/index/function/single\n - api/index/function/skipLast\n - api/index/function/startWith\n - api/index/function/take\n - api/index/function/takeLast\n - api/index/function/throwError\n - api/index/function/timestamp\n - api/index/function/zip\n - api/index/interface/SchedulerLike\n - api/index/interface/TimestampProvider\n - api/index/type-alias/ObservableInput\n - api/testing/TestScheduler\n - deprecations/breaking-changes#ajax\n - deprecations/breaking-changes#breaking-changes-in-version-7\n - deprecations/breaking-changes#concat\n - deprecations/breaking-changes#count\n - deprecations/breaking-changes#defer\n - deprecations/breaking-changes#general\n - deprecations/breaking-changes#map\n - deprecations/breaking-changes#mergescan\n - deprecations/breaking-changes#of\n - deprecations/breaking-changes#operators\n - deprecations/breaking-changes#pairs\n - deprecations/breaking-changes#race\n - deprecations/breaking-changes#repeat\n - deprecations/breaking-changes#retry\n - deprecations/breaking-changes#single\n - deprecations/breaking-changes#skiplast\n - deprecations/breaking-changes#startwith\n - deprecations/breaking-changes#take\n - deprecations/breaking-changes#takelast\n - deprecations/breaking-changes#throwerror\n - deprecations/breaking-changes#timestamp\n - deprecations/breaking-changes#zip\n - https://github.com/ReactiveX/rxjs/issues/5431\n - https://github.com/ReactiveX/rxjs/issues/5553\n - https://github.com/benlesh/rxjs-for-await\n - https://rxjs.dev/guide/operators\n-->"
}