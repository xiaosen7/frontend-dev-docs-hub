{"version":3,"mappings":"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","names":["ApiService","constructor","http","logger","this","DOC_CONTENT_URL_PREFIX","Subject","ReplaySubject","sectionsSubject","pipe","takeUntil","onDestroy","sections","firstTime","fetchSections","_sections","subscribe","log","tap","forEach","section","deprecated","items","every","item","stability","ngOnDestroy","next","src","url","apiBase","apiListJsonDefault","get","err","error","t","factory","i0","ApiListComponent","apiService","locationService","SearchCriteria","value","title","ngOnInit","filteredSections","combineLatest","criteriaSubject","map","results","criteria","Object","filterSection","initializeSearchCriteria","setQuery","query","setSearchCriteria","toLowerCase","trim","setStatus","status","toggleStatusMenu","setType","type","toggleTypeMenu","showStatusMenu","showTypeMenu","filter","docType","matchesType","securityRisk","matchesStatus","name","indexOf","matchesQuery","length","search","q","queryEl","nativeElement","statuses","find","x","types","searchCriteria","setLocationSearch","setSearch","undefined","assign","selectors","ctx","ApiListModule","imports","CommonModule","SharedModule","HttpClientModule"],"sources":["./src/app/custom-elements/api/api.service.ts","./src/app/custom-elements/api/api-list.component.ts","./src/app/custom-elements/api/api-list.module.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\n\nimport { ReplaySubject, Subject } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\nimport { DOC_CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\nexport interface ApiItem {\n  name: string;\n  title: string;\n  path: string;\n  docType: string;\n  stability: string;\n  securityRisk: boolean;\n}\n\nexport interface ApiSection {\n  path: string;\n  name: string;\n  title: string;\n  deprecated: boolean;\n  items: ApiItem[]|null;\n}\n\n@Injectable()\nexport class ApiService implements OnDestroy {\n\n  private apiBase = DOC_CONTENT_URL_PREFIX + 'api/';\n  private apiListJsonDefault = 'api-list.json';\n  private firstTime = true;\n  private onDestroy = new Subject();\n  private sectionsSubject = new ReplaySubject<ApiSection[]>(1);\n  private _sections = this.sectionsSubject.pipe(takeUntil(this.onDestroy));\n\n  /**\n   * Return a cached observable of API sections from a JSON file.\n   * API sections is an array of Angular top modules and metadata about their API documents (items).\n   */\n  get sections() {\n\n    if (this.firstTime) {\n      this.firstTime = false;\n      this.fetchSections(); // TODO: get URL for fetchSections by configuration?\n\n      // makes sectionsSubject hot; subscribe ensures stays alive (always refCount > 0);\n      this._sections.subscribe(() => this.logger.log('ApiService got API sections') );\n    }\n\n    return this._sections.pipe(tap(sections => {\n      sections.forEach(section => {\n        section.deprecated = !!section.items &&\n            section.items.every(item => item.stability === 'deprecated');\n      });\n    }));\n  }\n\n  constructor(private http: HttpClient, private logger: Logger) { }\n\n  ngOnDestroy() {\n    this.onDestroy.next(null);\n  }\n\n /**\n  * Fetch API sections from a JSON file.\n  * API sections is an array of Angular top modules and metadata about their API documents (items).\n  * Updates `sections` observable\n  *\n  * @param src Name of the api list JSON file\n  */\n  fetchSections(src?: string) {\n    // TODO: get URL by configuration?\n    const url = this.apiBase + (src || this.apiListJsonDefault);\n    this.http.get<ApiSection[]>(url)\n      .pipe(\n        takeUntil(this.onDestroy),\n        tap(() => this.logger.log(`Got API sections from ${url}`)),\n      )\n      .subscribe(\n        sections => this.sectionsSubject.next(sections),\n        (err: HttpErrorResponse) => {\n          // TODO: handle error\n          this.logger.error(err);\n          throw err; // rethrow for now.\n        }\n      );\n  }\n}\n","/*\n * API List & Filter Component\n *\n * A page that displays a formatted list of the public Angular API entities.\n * Clicking on a list item triggers navigation to the corresponding API entity document.\n * Can add/remove API entity links based on filter settings.\n */\n\nimport { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\n\nimport { combineLatest, Observable, ReplaySubject } from 'rxjs';\n\nimport { LocationService } from 'app/shared/location.service';\nimport { ApiSection, ApiService } from './api.service';\n\nimport { Option } from 'app/shared/select/select.component';\nimport { map } from 'rxjs/operators';\n\nclass SearchCriteria {\n  query? = '';\n  status? = 'all';\n  type? = 'all';\n}\n\n@Component({\n  selector: 'aio-api-list',\n  template: `<div class=\"l-flex-wrap api-filter\">\n      <aio-select (change)=\"setType($event.option)\" [options]=\"types\" [selected]=\"type\" [showSymbol]=\"true\" label=\"Type:\"> </aio-select>\n\n      <div class=\"form-search\">\n        <input #filter placeholder=\"Filter\" aria-label=\"Filter\" (input)=\"setQuery(filter.value)\" />\n        <i class=\"material-icons\">search</i>\n      </div>\n    </div>\n\n    <article class=\"api-list-container l-content-small docs-content\">\n      <div *ngFor=\"let section of filteredSections | async\">\n        <h2 [id]=\"section.title\" *ngIf=\"section.items\">{{ section.title }}</h2>\n        <ul class=\"api-list\" *ngIf=\"section.items?.length\">\n          <ng-container *ngFor=\"let item of section.items\">\n            <li class=\"api-item\">\n              <a [href]=\"item.path\">\n                <span class=\"symbol {{ item.docType }}\"></span>\n                <span class=\"stability {{ item.stability }}\"\n                  >{{ item.title }} {{ !item.stability || item.stability === 'stable' ? '' : '(' + item.stability + ')' }}</span\n                >\n              </a>\n            </li>\n          </ng-container>\n        </ul>\n      </div>\n    </article> `,\n})\nexport class ApiListComponent implements OnInit {\n  filteredSections: Observable<ApiSection[]>;\n\n  showStatusMenu = false;\n  showTypeMenu = false;\n\n  private criteriaSubject = new ReplaySubject<SearchCriteria>(1);\n  private searchCriteria = new SearchCriteria();\n\n  status: Option;\n  type: Option;\n\n  // API types\n  types: Option[] = [\n    { value: 'all', title: 'All' },\n    { value: 'class', title: 'Class' },\n    { value: 'const', title: 'Const' },\n    { value: 'enum', title: 'Enum' },\n    { value: 'function', title: 'Function' },\n    { value: 'interface', title: 'Interface' },\n    { value: 'type-alias', title: 'Type alias' },\n  ];\n\n  statuses: Option[] = [\n    { value: 'all', title: 'All' },\n    { value: 'deprecated', title: 'Deprecated' },\n    { value: 'security-risk', title: 'Security Risk' },\n  ];\n\n  @ViewChild('filter', { static: true }) queryEl: ElementRef;\n\n  constructor(private apiService: ApiService, private locationService: LocationService) {}\n\n  ngOnInit() {\n    this.filteredSections = combineLatest(this.apiService.sections, this.criteriaSubject).pipe(\n      map((results) => ({ sections: results[0], criteria: results[1] })),\n      map((results) => results.sections.map((section) => ({ ...section, items: this.filterSection(section, results.criteria) })))\n    );\n\n    this.initializeSearchCriteria();\n  }\n\n  // TODO: may need to debounce as the original did\n  // although there shouldn't be any perf consequences if we don't\n  setQuery(query: string) {\n    this.setSearchCriteria({ query: (query || '').toLowerCase().trim() });\n  }\n\n  setStatus(status: Option) {\n    this.toggleStatusMenu();\n    this.status = status;\n    this.setSearchCriteria({ status: status.value });\n  }\n\n  setType(type: Option) {\n    this.toggleTypeMenu();\n    this.type = type;\n    this.setSearchCriteria({ type: type.value });\n  }\n\n  toggleStatusMenu() {\n    this.showStatusMenu = !this.showStatusMenu;\n  }\n\n  toggleTypeMenu() {\n    this.showTypeMenu = !this.showTypeMenu;\n  }\n\n  //////// Private //////////\n\n  private filterSection(section: ApiSection, { query, status, type }: SearchCriteria) {\n    const items = section.items!.filter((item) => {\n      return matchesType() && matchesStatus() && matchesQuery();\n\n      function matchesQuery() {\n        return !query || section.name.indexOf(query) !== -1 || item.name.indexOf(query) !== -1;\n      }\n\n      function matchesStatus() {\n        return status === 'all' || status === item.stability || (status === 'security-risk' && item.securityRisk);\n      }\n\n      function matchesType() {\n        return type === 'all' || type === item.docType;\n      }\n    });\n\n    // If there are no items we still return an empty array if the section name matches and the type is 'package'\n    return items.length ? items : type === 'package' && (!query || section.name.indexOf(query) !== -1) ? [] : null;\n  }\n\n  // Get initial search criteria from URL search params\n  private initializeSearchCriteria() {\n    const { query, status, type } = this.locationService.search();\n\n    const q = (query || '').toLowerCase();\n    // Hack: can't bind to query because input cursor always forced to end-of-line.\n    this.queryEl.nativeElement.value = q;\n\n    this.status = this.statuses.find((x) => x.value === status) || this.statuses[0];\n    this.type = this.types.find((x) => x.value === type) || this.types[0];\n\n    this.searchCriteria = {\n      query: q,\n      status: this.status.value,\n      type: this.type.value,\n    };\n\n    this.criteriaSubject.next(this.searchCriteria);\n  }\n\n  private setLocationSearch() {\n    const { query, status, type } = this.searchCriteria;\n    const params = {\n      query: query ? query : undefined,\n      status: status !== 'all' ? status : undefined,\n      type: type !== 'all' ? type : undefined,\n    };\n\n    this.locationService.setSearch('API Search', params);\n  }\n\n  private setSearchCriteria(criteria: SearchCriteria) {\n    this.criteriaSubject.next(Object.assign(this.searchCriteria, criteria));\n    this.setLocationSearch();\n  }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { SharedModule } from '../../shared/shared.module';\nimport { ApiListComponent } from './api-list.component';\nimport { ApiService } from './api.service';\nimport { WithCustomElementComponent } from '../element-registry';\n\n@NgModule({\n  imports: [ CommonModule, SharedModule, HttpClientModule ],\n  declarations: [ ApiListComponent ],\n  providers: [ ApiService ]\n})\nexport class ApiListModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = ApiListComponent;\n}\n"],"sourceRoot":"webpack:///","file":"858.aa1fd87fe5834720.js"}