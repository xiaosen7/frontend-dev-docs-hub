{"version":3,"mappings":"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","names":["PROJECT_TEMPLATES","UI_SIDEBAR_VIEWS","UI_THEMES","UI_VIEWS","generators","clickToLoad","value","trueParam","devToolsHeight","percentParam","forceEmbedLayout","hideDevTools","hideExplorer","hideNavigation","openFile","stringParams","showSidebar","name","booleanParam","sidebarView","enumParam","startScript","terminalHeight","theme","view","zenMode","options","params","Object","entries","map","key","hasOwnProperty","filter","Boolean","length","join","Number","isNaN","clamped","Math","min","max","encodeURIComponent","round","allowList","includes","Array","isArray","val","trim","route","getOrigin","buildParams","origin","replace","newWindow","template","title","description","dependencies","files","settings","names","t","console","warn","inputs","addInput","defaultValue","push","input","document","createElement","type","createHiddenInput","JSON","stringify","forEach","path","contents","encodeFilePath","form","method","setAttribute","append","StackBlitzSDK","project","createProjectForm","action","openUrl","target","openTarget","body","appendChild","submit","removeChild","openNewProject","StackblitzService","openProject","config","codeExtension","ts","typescript","language","StackBlitzkSDK","html","code","tags","compile","trigger","clearConsole","factory","i0","ctx_r3","ctx_r5","CodeComponent","constructor","snackbar","pretty","copier","logger","stackblitz","this","EventEmitter","_code","formatDisplayedCode","showMissingCodeMessage","header","_header","ariaLabelCopy","ariaLabelEdit","ngOnChanges","leftAlignedCode","text","indent","MAX_VALUE","lines","split","line","lineIndent","search","substr","leftAlign","setCodeHtml","codeText","getCodeText","formatCode","a","getLinenums","pipe","tap","codeFormatted","emit","subscribe","c","src","region","formattedCode","codeContainer","nativeElement","innerHTML","textContent","getHtmlFromCode","pattern","RegExp","matches","match","doCopy","copyText","log","open","duration","error","Error","editInStackBlitz","rxjs","version","linenums","parseInt","f","selectors","CodeModule","PrettyPrinter","CopierService","imports","CommonModule","MatSnackBarModule","prettyPrintOne","fromPromise","getPrettyPrintOne","share","ppo","window","Promise","resolve","p","then","err","msg","message","first","b","createFake","isRTL","documentElement","getAttribute","fakeElem","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","select","setSelectionRange","removeFake","execCommand","module","scrollBehaviorSupported","supportsScrollBehavior","_viewportRuler","_previousHTMLStyles","left","_isEnabled","_document","attach","enable","_canBeEnabled","root","_previousScrollPosition","getViewportScrollPosition","coerceCssPixelValue","classList","add","disable","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","abs","updatePosition","unsubscribe","element","scrollContainers","some","containerBounds","bottom","right","scrollContainerRect","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","isElementScrolledOutsideView","ScrollStrategyOptions","noop","NoopScrollStrategy","close","CloseScrollStrategy","block","BlockScrollStrategy","reposition","RepositionScrollStrategy","ɵfac","i1","DOCUMENT","ɵprov","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","keys","undefined","connectionPair","scrollableViewProperties","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","event","next","_backdropTransitionendHandler","_disposeBackdrop","_keydownEvents","_outsidePointerEvents","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","portal","parentElement","_previousHostParent","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","_a","isAttached","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","keydownEvents","outsidePointerEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","assign","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","addEventListener","requestAnimationFrame","runOutsideAngular","nextSibling","parentNode","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","coerceArray","subscription","takeUntil","merge","children","backdrop","removeEventListener","clearTimeout","OverlayContainer","_platform","ngOnDestroy","_containerElement","getContainerElement","_createContainer","containerClass","isBrowser","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","i","container","i1$1","boundingBoxClass","cssUnitPattern","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","indexOf","withViewportMargin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","y","originX","startX","_isRtl","endX","originY","overlayStartX","overlayStartY","overlayX","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","horizontalFit","_pushOverlayOnScreen","start","overflowRight","overflowBottom","overflowTop","overflowLeft","pushX","pushY","s","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","ConnectedOverlayPositionChange","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","styles","_hasExactPosition","e","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isElementClippedByScrolling","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","cssClass","ElementRef","Element","destination","source","units","parseFloat","clientRect","floor","wrapperClass","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","m","parent","OverlayPositionBuilder","global","GlobalPositionStrategy","flexibleConnectedTo","FlexibleConnectedPositionStrategy","BaseOverlayDispatcher","_attachedOverlays","index","splice","OverlayKeyboardDispatcher","super","_keydownListener","overlays","_isAttached","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","slice","_addEventListeners","IOS","_cursorOriginalValue","cursor","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","OverlayConfig","OverlayRef","id","_appRef","get","ApplicationRef","DomPortalOutlet","i5","i6","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","InjectionToken","deps","useFactory","OverlayModule","ɵmod","ɵinj","BidiModule","PortalModule","ScrollingModule","mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","_matchMedia","matchMedia","bind","noopMatchMedia","query","WEBKIT","BLINK","has","head","sheet","insertRule","createEmptyStyleRule","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","isMatched","queries","mediaQuery","_registerQuery","mql","observe","observables","splitQueries","observable","stateObservable","combineLatest","concat","skip","debounceTime","breakpointStates","response","breakpoints","output","Observable","observer","handler","startWith","set","a1","a2","_r2","ctx_r0","MAT_SNACK_BAR_DATA","politeness","announcementMessage","data","horizontalPosition","verticalPosition","MAX_TIMEOUT","pow","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","_onExit","_finishDismiss","dismiss","closed","exit","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","_open","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","SimpleSnackBar","snackBarRef","hasAction","MatSnackBarRef","ɵcmp","ctx","directives","i2","i3","matSnackBarAnimations","snackBarState","state","opacity","transition","animate","MatSnackBarContainer","BasePortalOutlet","_elementRef","_changeDetectorRef","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","_assertNotAttached","_applySnackBarClasses","_live","h","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","fromState","toState","_completeExit","onEnter","enter","detectChanges","_screenReaderAnnounce","_announceTimeoutId","onMicrotaskEmpty","panelClasses","inertElement","querySelector","liveElement","focusedElement","activeElement","HTMLElement","removeAttribute","focus","MatSnackBarConfig","CdkPortalOutlet","_t","decls","i3$1","MatButtonModule","MatCommonModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","_MatSnackBarBase","_overlay","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","openFromComponent","component","_attach","openFromTemplate","simpleSnackBarComponent","_attachSnackBarContainer","injector","Injector","viewContainerRef","providers","useValue","containerPortal","ComponentPortal","snackBarContainerComponent","containerRef","instance","content","userConfig","_createOverlay","TemplateRef","TemplatePortal","$implicit","_createInjector","contentRef","toggle","handsetCssClass","announce","_animateSnackBar","clear","isLeft","isRight","i2$1","i3$2","MatSnackBar","live","breakpointObserver","parentSnackBar","defaultConfig"],"sources":["../node_modules/@stackblitz/sdk/bundles/sdk.m.js","./src/app/shared/stackblitz.service.ts","./src/app/custom-elements/code/code.component.ts","./src/app/custom-elements/code/code.module.ts","./src/app/custom-elements/code/pretty-printer.service.ts","./src/app/shared/copier.service.ts","./tools/stackblitz/rxjs.version.js","./node_modules/@angular/cdk/fesm2015/overlay.mjs","./node_modules/@angular/cdk/fesm2015/layout.mjs","./node_modules/@angular/material/fesm2015/snack-bar.mjs"],"sourcesContent":["const CONNECT_INTERVAL = 500;\nconst CONNECT_MAX_ATTEMPTS = 20;\nconst DEFAULT_FRAME_HEIGHT = 300;\nconst DEFAULT_ORIGIN = \"https://stackblitz.com\";\nconst PROJECT_TEMPLATES = [\n  \"angular-cli\",\n  \"create-react-app\",\n  \"html\",\n  \"javascript\",\n  \"node\",\n  \"polymer\",\n  \"typescript\",\n  \"vue\"\n];\nconst UI_SIDEBAR_VIEWS = [\"project\", \"search\", \"ports\", \"settings\"];\nconst UI_THEMES = [\"light\", \"dark\"];\nconst UI_VIEWS = [\"editor\", \"preview\"];\nconst generators = {\n  clickToLoad: (value) => trueParam(\"ctl\", value),\n  devToolsHeight: (value) => percentParam(\"devtoolsheight\", value),\n  forceEmbedLayout: (value) => trueParam(\"embed\", value),\n  hideDevTools: (value) => trueParam(\"hidedevtools\", value),\n  hideExplorer: (value) => trueParam(\"hideExplorer\", value),\n  hideNavigation: (value) => trueParam(\"hideNavigation\", value),\n  openFile: (value) => stringParams(\"file\", value),\n  showSidebar: (value) => booleanParam(\"showSidebar\", value),\n  sidebarView: (value) => enumParam(\"sidebarView\", value, UI_SIDEBAR_VIEWS),\n  startScript: (value) => stringParams(\"startScript\", value),\n  terminalHeight: (value) => percentParam(\"terminalHeight\", value),\n  theme: (value) => enumParam(\"theme\", value, UI_THEMES),\n  view: (value) => enumParam(\"view\", value, UI_VIEWS),\n  zenMode: (value) => trueParam(\"zenMode\", value)\n};\nfunction buildParams(options = {}) {\n  const params = Object.entries(options).map(([key, value]) => {\n    if (value != null && generators.hasOwnProperty(key)) {\n      return generators[key](value);\n    }\n    return \"\";\n  }).filter(Boolean);\n  return params.length ? `?${params.join(\"&\")}` : \"\";\n}\nfunction trueParam(name, value) {\n  if (value === true) {\n    return `${name}=1`;\n  }\n  return \"\";\n}\nfunction booleanParam(name, value) {\n  if (typeof value === \"boolean\") {\n    return `${name}=${value ? \"1\" : \"0\"}`;\n  }\n  return \"\";\n}\nfunction percentParam(name, value) {\n  if (typeof value === \"number\" && !Number.isNaN(value)) {\n    const clamped = Math.min(100, Math.max(0, value));\n    return `${name}=${encodeURIComponent(Math.round(clamped))}`;\n  }\n  return \"\";\n}\nfunction enumParam(name, value = \"\", allowList = []) {\n  if (allowList.includes(value)) {\n    return `${name}=${encodeURIComponent(value)}`;\n  }\n  return \"\";\n}\nfunction stringParams(name, value) {\n  const values = Array.isArray(value) ? value : [value];\n  return values.filter((val) => typeof val === \"string\" && val.trim() !== \"\").map((val) => `${name}=${encodeURIComponent(val)}`).join(\"&\");\n}\nfunction genID() {\n  return Math.random().toString(36).slice(2, 6) + Math.random().toString(36).slice(2, 6);\n}\nfunction openUrl(route, options) {\n  return `${getOrigin(options)}${route}${buildParams(options)}`;\n}\nfunction embedUrl(route, options) {\n  const config = {\n    forceEmbedLayout: true\n  };\n  if (options && typeof options === \"object\") {\n    Object.assign(config, options);\n  }\n  return `${getOrigin(config)}${route}${buildParams(config)}`;\n}\nfunction getOrigin(options = {}) {\n  const origin = typeof options.origin === \"string\" ? options.origin : DEFAULT_ORIGIN;\n  return origin.replace(/\\/$/, \"\");\n}\nfunction replaceAndEmbed(target, frame, options) {\n  if (!frame || !target || !target.parentNode) {\n    throw new Error(\"Invalid Element\");\n  }\n  if (target.id) {\n    frame.id = target.id;\n  }\n  if (target.className) {\n    frame.className = target.className;\n  }\n  setFrameDimensions(frame, options);\n  target.replaceWith(frame);\n}\nfunction findElement(elementOrId) {\n  if (typeof elementOrId === \"string\") {\n    const element = document.getElementById(elementOrId);\n    if (!element) {\n      throw new Error(`Could not find element with id '${elementOrId}'`);\n    }\n    return element;\n  } else if (elementOrId instanceof HTMLElement) {\n    return elementOrId;\n  }\n  throw new Error(`Invalid element: ${elementOrId}`);\n}\nfunction openTarget(options) {\n  return options && options.newWindow === false ? \"_self\" : \"_blank\";\n}\nfunction setFrameDimensions(frame, options = {}) {\n  const height = Object.hasOwnProperty.call(options, \"height\") ? `${options.height}` : `${DEFAULT_FRAME_HEIGHT}`;\n  const width = Object.hasOwnProperty.call(options, \"width\") ? `${options.width}` : void 0;\n  frame.setAttribute(\"height\", height);\n  if (width) {\n    frame.setAttribute(\"width\", width);\n  } else {\n    frame.setAttribute(\"style\", \"width:100%;\");\n  }\n}\nclass RDC {\n  constructor(port) {\n    this.pending = {};\n    this.port = port;\n    this.port.onmessage = this.messageListener.bind(this);\n  }\n  request({ type, payload }) {\n    return new Promise((resolve, reject) => {\n      const id = genID();\n      this.pending[id] = { resolve, reject };\n      this.port.postMessage({\n        type,\n        payload: {\n          ...payload,\n          // Ensure the payload object includes the request ID\n          __reqid: id\n        }\n      });\n    });\n  }\n  messageListener(event) {\n    if (typeof event.data.payload?.__reqid !== \"string\") {\n      return;\n    }\n    const { type, payload } = event.data;\n    const { __reqid: id, __success: success, __error: error } = payload;\n    if (this.pending[id]) {\n      if (success) {\n        this.pending[id].resolve(this.cleanResult(payload));\n      } else {\n        this.pending[id].reject(error ? `${type}: ${error}` : type);\n      }\n      delete this.pending[id];\n    }\n  }\n  cleanResult(payload) {\n    const result = { ...payload };\n    delete result.__reqid;\n    delete result.__success;\n    delete result.__error;\n    return Object.keys(result).length ? result : null;\n  }\n}\nclass VM {\n  constructor(port, config) {\n    this.editor = {\n      /**\n       * Open one of several files in tabs and/or split panes.\n       *\n       * @since 1.7.0 Added support for opening multiple files\n       */\n      openFile: (path) => {\n        return this._rdc.request({\n          type: \"SDK_OPEN_FILE\",\n          payload: { path }\n        });\n      },\n      /**\n       * Set a project file as the currently selected file.\n       *\n       * - This may update the highlighted file in the file explorer,\n       *   and the currently open and/or focused editor tab.\n       * - It will _not_ open a new editor tab if the provided path does not\n       *   match a currently open tab. See `vm.editor.openFile` to open files.\n       *\n       * @since 1.7.0\n       * @experimental\n       */\n      setCurrentFile: (path) => {\n        return this._rdc.request({\n          type: \"SDK_SET_CURRENT_FILE\",\n          payload: { path }\n        });\n      },\n      /**\n       * Change the color theme\n       *\n       * @since 1.7.0\n       */\n      setTheme: (theme) => {\n        return this._rdc.request({\n          type: \"SDK_SET_UI_THEME\",\n          payload: { theme }\n        });\n      },\n      /**\n       * Change the display mode of the project:\n       *\n       * - `default`: show the editor and preview pane\n       * - `editor`: show the editor pane only\n       * - `preview`: show the preview pane only\n       *\n       * @since 1.7.0\n       */\n      setView: (view) => {\n        return this._rdc.request({\n          type: \"SDK_SET_UI_VIEW\",\n          payload: { view }\n        });\n      },\n      /**\n       * Change the display mode of the sidebar:\n       *\n       * - `true`: show the sidebar\n       * - `false`: hide the sidebar\n       *\n       * @since 1.7.0\n       */\n      showSidebar: (visible = true) => {\n        return this._rdc.request({\n          type: \"SDK_TOGGLE_SIDEBAR\",\n          payload: { visible }\n        });\n      }\n    };\n    this.preview = {\n      /**\n       * The origin (protocol and domain) of the preview iframe.\n       *\n       * In WebContainers-based projects, the origin will always be `null`;\n       * try using `vm.preview.getUrl` instead.\n       *\n       * @see https://developer.stackblitz.com/guides/user-guide/available-environments\n       */\n      origin: \"\",\n      /**\n       * Get the current preview URL.\n       *\n       * In both and EngineBlock and WebContainers-based projects, the preview URL\n       * may not reflect the exact path of the current page, after user navigation.\n       *\n       * In WebContainers-based projects, the preview URL will be `null` initially,\n       * and until the project starts a web server.\n       *\n       * @since 1.7.0\n       * @experimental\n       */\n      getUrl: () => {\n        return this._rdc.request({\n          type: \"SDK_GET_PREVIEW_URL\",\n          payload: {}\n        }).then((data) => data?.url ?? null);\n      },\n      /**\n       * Change the path of the preview URL.\n       *\n       * In WebContainers-based projects, this will be ignored if there is no\n       * currently running web server.\n       *\n       * @since 1.7.0\n       * @experimental\n       */\n      setUrl: (path = \"/\") => {\n        if (typeof path !== \"string\" || !path.startsWith(\"/\")) {\n          throw new Error(`Invalid argument: expected a path starting with '/', got '${path}'`);\n        }\n        return this._rdc.request({\n          type: \"SDK_SET_PREVIEW_URL\",\n          payload: { path }\n        });\n      }\n    };\n    this._rdc = new RDC(port);\n    Object.defineProperty(this.preview, \"origin\", {\n      value: typeof config.previewOrigin === \"string\" ? config.previewOrigin : null,\n      writable: false\n    });\n  }\n  /**\n   * Apply batch updates to the project files in one call.\n   */\n  applyFsDiff(diff) {\n    const isObject = (val) => val !== null && typeof val === \"object\";\n    if (!isObject(diff) || !isObject(diff.create)) {\n      throw new Error(\"Invalid diff object: expected diff.create to be an object.\");\n    } else if (!Array.isArray(diff.destroy)) {\n      throw new Error(\"Invalid diff object: expected diff.destroy to be an array.\");\n    }\n    return this._rdc.request({\n      type: \"SDK_APPLY_FS_DIFF\",\n      payload: diff\n    });\n  }\n  /**\n   * Get the project’s defined dependencies.\n   *\n   * In EngineBlock projects, version numbers represent the resolved dependency versions.\n   * In WebContainers-based projects, returns data from the project’s `package.json` without resolving installed version numbers.\n   */\n  getDependencies() {\n    return this._rdc.request({\n      type: \"SDK_GET_DEPS_SNAPSHOT\",\n      payload: {}\n    });\n  }\n  /**\n   * Get a snapshot of the project files and their content.\n   */\n  getFsSnapshot() {\n    return this._rdc.request({\n      type: \"SDK_GET_FS_SNAPSHOT\",\n      payload: {}\n    });\n  }\n}\nconst connections = [];\nclass Connection {\n  constructor(element) {\n    this.id = genID();\n    this.element = element;\n    this.pending = new Promise((resolve, reject) => {\n      const listenForSuccess = ({ data, ports }) => {\n        if (data?.action === \"SDK_INIT_SUCCESS\" && data.id === this.id) {\n          this.vm = new VM(ports[0], data.payload);\n          resolve(this.vm);\n          cleanup();\n        }\n      };\n      const pingFrame = () => {\n        this.element.contentWindow?.postMessage(\n          {\n            action: \"SDK_INIT\",\n            id: this.id\n          },\n          \"*\"\n        );\n      };\n      function cleanup() {\n        window.clearInterval(interval);\n        window.removeEventListener(\"message\", listenForSuccess);\n      }\n      window.addEventListener(\"message\", listenForSuccess);\n      pingFrame();\n      let attempts = 0;\n      const interval = window.setInterval(() => {\n        if (this.vm) {\n          cleanup();\n          return;\n        }\n        if (attempts >= CONNECT_MAX_ATTEMPTS) {\n          cleanup();\n          reject(\"Timeout: Unable to establish a connection with the StackBlitz VM\");\n          connections.forEach((connection, index) => {\n            if (connection.id === this.id) {\n              connections.splice(index, 1);\n            }\n          });\n          return;\n        }\n        attempts++;\n        pingFrame();\n      }, CONNECT_INTERVAL);\n    });\n    connections.push(this);\n  }\n}\nconst getConnection = (identifier) => {\n  const key = identifier instanceof Element ? \"element\" : \"id\";\n  return connections.find((c) => c[key] === identifier) ?? null;\n};\nfunction createHiddenInput(name, value) {\n  const input = document.createElement(\"input\");\n  input.type = \"hidden\";\n  input.name = name;\n  input.value = value;\n  return input;\n}\nfunction encodeFilePath(path) {\n  return path.replace(/\\[/g, \"%5B\").replace(/\\]/g, \"%5D\");\n}\nfunction createProjectForm({\n  template,\n  title,\n  description,\n  dependencies,\n  files,\n  settings\n}) {\n  if (!PROJECT_TEMPLATES.includes(template)) {\n    const names = PROJECT_TEMPLATES.map((t) => `'${t}'`).join(\", \");\n    console.warn(`Unsupported project.template: must be one of ${names}`);\n  }\n  const inputs = [];\n  const addInput = (name, value, defaultValue = \"\") => {\n    inputs.push(createHiddenInput(name, typeof value === \"string\" ? value : defaultValue));\n  };\n  addInput(\"project[title]\", title);\n  if (typeof description === \"string\" && description.length > 0) {\n    addInput(\"project[description]\", description);\n  }\n  addInput(\"project[template]\", template, \"javascript\");\n  if (dependencies) {\n    if (template === \"node\") {\n      console.warn(\n        `Invalid project.dependencies: dependencies must be provided as a 'package.json' file when using the 'node' template.`\n      );\n    } else {\n      addInput(\"project[dependencies]\", JSON.stringify(dependencies));\n    }\n  }\n  if (settings) {\n    addInput(\"project[settings]\", JSON.stringify(settings));\n  }\n  Object.entries(files).forEach(([path, contents]) => {\n    addInput(`project[files][${encodeFilePath(path)}]`, contents);\n  });\n  const form = document.createElement(\"form\");\n  form.method = \"POST\";\n  form.setAttribute(\"style\", \"display:none!important;\");\n  form.append(...inputs);\n  return form;\n}\nfunction createProjectFrameHTML(project, options) {\n  const form = createProjectForm(project);\n  form.action = embedUrl(\"/run\", options);\n  form.id = \"sb_run\";\n  const html = `<!doctype html>\n<html>\n<head><title></title></head>\n<body>\n  ${form.outerHTML}\n  <script>document.getElementById('${form.id}').submit();<\\/script>\n</body>\n</html>`;\n  return html;\n}\nfunction openNewProject(project, options) {\n  const form = createProjectForm(project);\n  form.action = openUrl(\"/run\", options);\n  form.target = openTarget(options);\n  document.body.appendChild(form);\n  form.submit();\n  document.body.removeChild(form);\n}\nfunction connect(frameEl) {\n  if (!frameEl?.contentWindow) {\n    return Promise.reject(\"Provided element is not an iframe.\");\n  }\n  const connection = getConnection(frameEl) ?? new Connection(frameEl);\n  return connection.pending;\n}\nfunction openProject(project, options) {\n  openNewProject(project, options);\n}\nfunction openProjectId(projectId, options) {\n  const url = openUrl(`/edit/${projectId}`, options);\n  const target = openTarget(options);\n  window.open(url, target);\n}\nfunction openGithubProject(repoSlug, options) {\n  const url = openUrl(`/github/${repoSlug}`, options);\n  const target = openTarget(options);\n  window.open(url, target);\n}\nfunction embedProject(elementOrId, project, options) {\n  const element = findElement(elementOrId);\n  const html = createProjectFrameHTML(project, options);\n  const frame = document.createElement(\"iframe\");\n  replaceAndEmbed(element, frame, options);\n  frame.contentDocument?.write(html);\n  return connect(frame);\n}\nfunction embedProjectId(elementOrId, projectId, options) {\n  const element = findElement(elementOrId);\n  const frame = document.createElement(\"iframe\");\n  frame.src = embedUrl(`/edit/${projectId}`, options);\n  replaceAndEmbed(element, frame, options);\n  return connect(frame);\n}\nfunction embedGithubProject(elementOrId, repoSlug, options) {\n  const element = findElement(elementOrId);\n  const frame = document.createElement(\"iframe\");\n  frame.src = embedUrl(`/github/${repoSlug}`, options);\n  replaceAndEmbed(element, frame, options);\n  return connect(frame);\n}\nconst StackBlitzSDK = {\n  connect,\n  embedGithubProject,\n  embedProject,\n  embedProjectId,\n  openGithubProject,\n  openProject,\n  openProjectId\n};\nexport {\n  StackBlitzSDK as default\n};\n","import StackBlitzkSDK from '@stackblitz/sdk';\nimport { Injectable } from '@angular/core';\nimport { Project } from '@stackblitz/sdk';\n\ninterface StackBlitzExampleConfig {\n  code: string;\n  language: string;\n  html?: string;\n  dependencies: {\n    [name: string]: string;\n  };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StackblitzService {\n  openProject(config: StackBlitzExampleConfig) {\n    const codeExtension: 'js' | string =\n      {\n        ts: 'ts',\n        typescript: 'ts',\n      }[config.language] || 'js';\n\n    const template: Project['template'] = codeExtension === 'ts' ? 'typescript' : 'javascript';\n\n    StackBlitzkSDK.openProject(\n      {\n        files: {\n          'index.html': config.html || '',\n          [`index.${codeExtension}`]: config.code,\n        },\n        title: 'RxJS example',\n        description: 'RxJS example',\n        template,\n        tags: ['rxjs', 'demo'],\n        dependencies: config.dependencies,\n        settings: {\n          compile: {\n            trigger: 'auto',\n            action: 'refresh',\n            clearConsole: true,\n          },\n        },\n      },\n      {\n        devToolsHeight: 50,\n      }\n    );\n  }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\nimport { StackblitzService } from 'app/shared/stackblitz.service';\n// @ts-expect-error\nimport version from '../../../../tools/stackblitz/rxjs.version';\n\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nconst DEFAULT_LINE_NUMS_COUNT = 10;\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n  selector: 'aio-code',\n  template: `\n    <pre class=\"prettyprint lang-{{ language }}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabelCopy\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <button *ngIf=\"!hideCopy\" class=\"material-icons edit-button no-print\"\n        title=\"Edit in StackBlitz\"\n        [attr.aria-label]=\"ariaLabelEdit\"\n        (click)=\"editInStackBlitz()\">\n        <span aria-hidden=\"true\">open_in_new</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n  `,\n})\nexport class CodeComponent implements OnChanges {\n  ariaLabelCopy = '';\n  ariaLabelEdit = '';\n\n  /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n  private codeText: string;\n\n  /** Code that should be formatted with current inputs and displayed in the view. */\n  set code(code: string) {\n    this._code = code;\n\n    if (!this._code || !this._code.trim()) {\n      this.showMissingCodeMessage();\n    } else {\n      this.formatDisplayedCode();\n    }\n  }\n  get code(): string {\n    return this._code;\n  }\n  _code: string;\n\n  /** Whether the copy button should be shown. */\n  @Input() hideCopy: boolean;\n\n  /** Language to render the code (e.g. javascript, dart, typescript). */\n  @Input() language: string | null;\n\n  /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n  @Input() linenums: boolean | number | string;\n\n  /** Path to the source of the code. */\n  @Input() path: string;\n\n  /** Region of the source of the code being displayed. */\n  @Input() region: string;\n\n  /** Optional header to be displayed above the code. */\n  @Input()\n  set header(header: string | null) {\n    this._header = header;\n    this.ariaLabelCopy = this.header ? `Copy code snippet from ${this.header}` : '';\n    this.ariaLabelEdit = this.header ? `Edit code snippet from ${this.header} in StackBlitz` : '';\n  }\n  get header(): string | null {\n    return this._header;\n  }\n  private _header: string | null;\n\n  @Output() codeFormatted = new EventEmitter<void>();\n\n  /** The element in the template that will display the formatted code. */\n  @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n  constructor(\n    private snackbar: MatSnackBar,\n    private pretty: PrettyPrinter,\n    private copier: CopierService,\n    private logger: Logger,\n    private stackblitz: StackblitzService\n  ) {}\n\n  ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n    if (this.code) {\n      this.formatDisplayedCode();\n    }\n  }\n\n  private formatDisplayedCode() {\n    const leftAlignedCode = leftAlign(this.code);\n    this.setCodeHtml(leftAlignedCode); // start with unformatted code\n    this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n    this.pretty\n      .formatCode(leftAlignedCode, this.language ?? '', this.getLinenums(leftAlignedCode))\n      .pipe(tap(() => this.codeFormatted.emit()))\n      .subscribe(\n        (c) => this.setCodeHtml(c),\n        () => {\n          /* ignore failure to format */\n        }\n      );\n  }\n\n  /** Sets the message showing that the code could not be found. */\n  private showMissingCodeMessage() {\n    const src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n    const srcMsg = src ? ` for\\n${src}` : '.';\n    this.setCodeHtml(`<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`);\n  }\n\n  /** Sets the innerHTML of the code container to the provided code string. */\n  private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n    this.codeContainer.nativeElement.innerHTML = formattedCode;\n  }\n\n  /** Gets the textContent of the displayed code element. */\n  private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n    return this.codeContainer.nativeElement.textContent;\n  }\n\n  /** Extracts html placed in the `// html: ` comment in the code.  */\n  private getHtmlFromCode(code: string): string {\n    const pattern = new RegExp('// html: (.*)');\n    const matches = code.match(pattern);\n\n    return matches ? matches[1] : '';\n  }\n\n  /** Copies the code snippet to the user's clipboard. */\n  doCopy() {\n    const code = this.codeText;\n    const successfullyCopied = this.copier.copyText(code);\n\n    if (successfullyCopied) {\n      this.logger.log('Copied code to clipboard:', code);\n      this.snackbar.open('Code Copied', '', { duration: 800 });\n    } else {\n      this.logger.error(new Error(`ERROR copying code to clipboard: \"${code}\"`));\n      this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n    }\n  }\n\n  editInStackBlitz() {\n    this.stackblitz.openProject({\n      code: this.codeText,\n      language: this.language ?? '',\n      dependencies: {\n        rxjs: version,\n      },\n      html: this.getHtmlFromCode(this.codeText),\n    });\n  }\n\n  /** Gets the calculated value of linenums (boolean/number). */\n  getLinenums(code: string) {\n    const linenums =\n      typeof this.linenums === 'boolean'\n        ? this.linenums\n        : this.linenums === 'true'\n        ? true\n        : this.linenums === 'false'\n        ? false\n        : typeof this.linenums === 'string'\n        ? parseInt(this.linenums, 10)\n        : this.linenums;\n\n    // if no linenums, enable line numbers if more than one line\n    return linenums == null || isNaN(linenums as number) ? (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT : linenums;\n  }\n}\n\nfunction leftAlign(text: string): string {\n  let indent = Number.MAX_VALUE;\n\n  const lines = text.split('\\n');\n  lines.forEach((line) => {\n    const lineIndent = line.search(/\\S/);\n    if (lineIndent !== -1) {\n      indent = Math.min(lineIndent, indent);\n    }\n  });\n\n  return lines\n    .map((line) => line.substr(indent))\n    .join('\\n')\n    .trim();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n  imports: [ CommonModule, MatSnackBarModule ],\n  declarations: [ CodeComponent ],\n  exports: [ CodeComponent ],\n  providers: [ PrettyPrinter, CopierService ]\n})\nexport class CodeModule { }\n","import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any).prettyPrintOne;\n    return ppo ? Promise.resolve(ppo) :\n      // `prettyPrintOne` is not on `window`, which means `prettify.js` has not been loaded yet.\n      // Import it; as a side-effect it will add `prettyPrintOne` on `window`.\n      import('assets/js/prettify.js' as any)\n        .then(\n          () => (window as any).prettyPrintOne,\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML\n   *\n   * @param code the code snippet to format; should already be HTML encoded\n   * @param language The language of the code to render (could be javascript, html, typescript, etc)\n   * @param linenums Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable of formatted code\n   */\n  formatCode(code: string, language?: string, linenums?: number | boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return ppo(code, language, linenums);\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n */\n\n\n@Injectable()\nexport class CopierService {\n    private fakeElem: HTMLTextAreaElement|null;\n\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    createFake(text: string) {\n      const isRTL = document.documentElement.getAttribute('dir') === 'rtl';\n\n      // Create a fake element to hold the contents to copy\n      this.fakeElem = document.createElement('textarea');\n\n      // Prevent zooming on iOS\n      this.fakeElem.style.fontSize = '12pt';\n\n      // Reset box model\n      this.fakeElem.style.border = '0';\n      this.fakeElem.style.padding = '0';\n      this.fakeElem.style.margin = '0';\n\n      // Move element out of screen horizontally\n      this.fakeElem.style.position = 'absolute';\n      this.fakeElem.style[ isRTL ? 'right' : 'left' ] = '-9999px';\n\n      // Move element to the same position vertically\n      const yPosition = window.pageYOffset || document.documentElement.scrollTop;\n      this.fakeElem.style.top = yPosition + 'px';\n\n      this.fakeElem.setAttribute('readonly', '');\n      this.fakeElem.value = text;\n\n      document.body.appendChild(this.fakeElem);\n\n      this.fakeElem.select();\n      this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n    }\n\n    removeFake() {\n      if (this.fakeElem) {\n        document.body.removeChild(this.fakeElem);\n        this.fakeElem = null;\n      }\n    }\n\n    copyText(text: string) {\n      try {\n        this.createFake(text);\n        return document.execCommand('copy');\n      } catch (err) {\n        return false;\n      } finally {\n        this.removeFake();\n      }\n    }\n}\n","// Exposes the current RxJS version number from the library's package.json\n// for usage in TypeScript files.\n// (Since said package.json is outside of this TypeScript project, it's not\n// available for a direct TypeScript import).\n\nmodule.exports = require('../../../../packages/rxjs/package.json').version;\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ElementRef, Optional, ApplicationRef, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _isTestEnvironment, _getEventTarget } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        var _a;\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        (_a = this._host) === null || _a === void 0 ? void 0 : _a.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        var _a;\n        (_a = this._containerElement) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: OverlayContainer }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }];\n    } });\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                    }] }, { type: i5.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, declarations: [CdkConnectedOverlay, CdkOverlayOrigin], imports: [BidiModule, PortalModule, ScrollingModule], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import * as i0 from '@angular/core';\nimport { NgModule, Injectable } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass LayoutModule {\n}\nLayoutModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: LayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLayoutModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: LayoutModule });\nLayoutModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: LayoutModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: LayoutModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia =\n            this._platform.isBrowser && window.matchMedia\n                ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n                    // call it from a different scope.\n                    window.matchMedia.bind(window)\n                : noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT || this._platform.BLINK) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MediaMatcher, deps: [{ token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaMatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MediaMatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MediaMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }]; } });\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { },\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(breakpointStates => {\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(({ matches, query }) => {\n                response.matches = response.matches || matches;\n                response.breakpoints[query] = matches;\n            });\n            return response;\n        }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = new Observable((observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            const handler = (e) => this._zone.run(() => observer.next(e));\n            mql.addListener(handler);\n            return () => {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(({ matches }) => ({ query, matches })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BreakpointObserver, deps: [{ token: MediaMatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nBreakpointObserver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BreakpointObserver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BreakpointObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: MediaMatcher }, { type: i0.NgZone }]; } });\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries\n        .map(query => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.98px)',\n    Small: '(min-width: 600px) and (max-width: 959.98px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n        '(max-width: 959.98px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i2$1 from '@angular/cdk/a11y';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-simple-snackbar\" }, ngImport: i0, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\\n\"], components: [{ type: i2.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-simple-snackbar',\n                    }, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DATA]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarContainer, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSnackBarContainer, selector: \"snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mat-snack-bar-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], directives: [{ type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, declarations: [MatSnackBarContainer, SimpleSnackBar], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatSnackBarContainer, MatCommonModule] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, imports: [[OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                }]\n        }] });\n\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\nclass _MatSnackBarBase {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\n_MatSnackBarBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\n_MatSnackBarBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSnackBarBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: MatSnackBarConfig, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: MatSnackBarConfig, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, matSnackBarAnimations };\n"],"sourceRoot":"webpack:///","file":"423.773ee1c679c4b1be.js"}